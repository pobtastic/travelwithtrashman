@rom
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Travel With Trashman Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$03,$E0,$00,$00,$03,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$0E,$10,$00,$00,$00,$C1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $04,$C8,$46,$03,$31,$52,$A2,$89,$8C,$E3,$DA,$18,$00,$03,$80,$00,$FF,$00,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$04,$84,$A2,$88,$10,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$06,$12,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$02,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$02,$00,$00,$00,$00,$34,$AA,$B2,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$03,$E0,$00,$06,$00,$12,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$02,$10,$00,$00,$04,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$30,$20,$00,$00,$38,$62,$00,$00,$0E,$02,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $04,$84,$4B,$C2,$51,$4A,$25,$16,$92,$00,$12,$60,$00,$06,$FF,$FF,$00,$FF,$BF,$7F,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$02,$4A,$B3,$37,$E0,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$02,$12,$31,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$04,$40,$00,$00,$00,$00,$00,$00,$00,$E0,$10,$00,$04,$00,$00,$00,$00,$34,$AA,$AA,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$04,$90,$00,$02,$00,$02,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$04,$10,$00,$00,$08,$90,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$40,$C0,$00,$00,$C4,$84,$0D,$98,$11,$05,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $07,$02,$DA,$22,$12,$AC,$56,$2A,$80,$B5,$73,$80,$00,$08,$00,$00,$07,$E0,$FF,$00,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$02,$52,$80,$D2,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$04,$12,$77,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$04,$40,$00,$00,$00,$00,$00,$00,$03,$18,$20,$00,$08,$00,$02,$00,$00,$E4,$6A,$BA,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$B5,$DB,$7A,$75,$B7,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$13,$20,$00,$00,$11,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$C0,$20,$00,$01,$04,$83,$12,$64,$23,$08,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$04,$50,$2C,$92,$AC,$A1,$56,$9F,$4A,$A0,$00,$00,$78,$00,$07,$E8,$00,$00,$40,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$04,$52,$A9,$80,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$04,$16,$65,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$02,$A0,$00,$00,$00,$00,$00,$00,$04,$04,$40,$00,$10,$00,$04,$00,$00,$EA,$6A,$BE,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$98,$4A,$4A,$36,$92,$48,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$20,$40,$00,$00,$12,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $01,$0A,$C0,$00,$00,$B9,$41,$21,$C8,$C9,$08,$34,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$06,$D0,$68,$54,$A8,$A3,$54,$EC,$00,$40,$00,$02,$C0,$00,$0D,$F0,$00,$06,$40,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$04,$BD,$16,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$0C,$56,$5F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$02,$40,$00,$00,$00,$00,$00,$00,$0C,$03,$80,$00,$20,$00,$04,$00,$01,$6A,$6A,$A6,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$93,$CA,$72,$36,$92,$48,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$E1,$80,$00,$00,$15,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $02,$04,$40,$00,$01,$12,$03,$20,$04,$95,$11,$2A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$04,$50,$29,$59,$29,$25,$98,$00,$00,$00,$00,$05,$80,$00,$0F,$C0,$00,$0F,$C0,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$02,$41,$20,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$08,$56,$5B,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$01,$80,$00,$00,$00,$00,$00,$07,$FC,$06,$00,$00,$40,$00,$08,$00,$02,$AE,$6A,$A6,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$92,$4C,$72,$16,$92,$48,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$01,$26,$00,$00,$00,$25,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $04,$1C,$80,$00,$01,$12,$01,$4C,$89,$29,$22,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$06,$58,$32,$41,$59,$30,$00,$00,$00,$00,$00,$04,$00,$00,$09,$00,$00,$1F,$C0,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$04,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$18,$AA,$73,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FE,$0C,$00,$00,$80,$00,$10,$00,$02,$A2,$6A,$BA,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$01,$F9,$B4,$97,$19,$3B,$ED,$24,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$02,$18,$00,$00,$00,$46,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $04,$26,$40,$00,$C0,$A2,$C2,$8C,$8A,$52,$46,$74,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$0A,$44,$32,$40,$96,$00,$00,$00,$00,$00,$00,$04,$00,$00,$0C,$00,$00,$0F,$10,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$04,$40,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$01,$00,$00,$00,$00,$38,$AA,$7B,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FE,$08,$00,$01,$00,$00,$10,$00,$06,$52,$6A,$A6,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$3F,$00,$02,$00,$00,$20,$00,$06,$5A,$6A,$A8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$3E,$FD,$00,$7F,$FF,$00,$FC,$EE,$AD,$82,$FF,$07,$00,$0F,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FF,$7F,$FF,$FF,$FF,$FF,$F3,$F2,$B3,$2F,$FF,$FB,$FE,$7F,$FF,$FF,$FF,$FF,$80,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$FD,$DF,$FF,$FF,$FF,$FF,$07,$EA,$E6,$6F,$F0,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$3C,$3F,$FC ;
 $4880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$27,$FE,$FF,$97,$67,$87,$00,$07,$53,$C7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$80,$00,$83,$87,$80,$00,$07,$07,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$5C,$00,$00,$00,$41,$00,$01,$D8,$FC,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$63,$1E,$02,$13,$E3,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$C3,$00,$1F,$C0,$00,$40,$00,$0B,$EE,$6A,$BB,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FE,$FF,$F5,$FA,$7F,$FF,$FF,$FC,$DE,$BB,$00,$FE,$0D,$7C,$0F,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FF,$7F,$FF,$FF,$FF,$FF,$F3,$F2,$B7,$2B,$FF,$FB,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$B7,$DF,$FF,$FF,$FF,$FF,$07,$EA,$E6,$7F,$F0,$00,$00,$00,$00,$00,$FF,$FF,$FF,$03,$C3,$FF ;
 $4980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$2F,$FE,$FB,$15,$67,$FF,$F8,$07,$53,$8F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$92,$C0,$00,$00,$87,$80,$00,$0F,$13,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$43,$D0,$00,$06,$43,$7E,$01,$B8,$EF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FC,$00,$00,$62,$01,$FE,$13,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C1,$00,$10,$3F,$E0,$80,$00,$1B,$AC,$EA,$B7,$C2,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$FF,$FF,$FF,$FF,$FD,$BE,$DB,$00,$A0,$3B,$9E,$1F,$FF,$E0,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FE,$7F,$FF,$FF,$FF,$FF,$D3,$F2,$B7,$6B,$FF,$FE,$5E,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00 ;
 $4A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$FF,$BF,$FF,$FF,$FF,$FF,$07,$CC,$EE,$7F,$F0,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$1E,$1F ;
 $4A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FD,$F9,$15,$24,$18,$3F,$07,$53,$CF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$E0,$00,$46,$07,$80,$00,$EF,$13,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$30,$00,$22,$C7,$0F,$FC,$30,$EF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$66,$00,$00,$23,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B00 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$10,$00,$21,$00,$00,$1E,$B6,$EB,$F6,$C2,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$BE,$DB,$00,$8F,$F3,$1F,$1F,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FE,$7F,$FF,$FF,$FF,$FF,$B3,$F3,$77,$6B,$FF,$FF,$3B,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00 ;
 $4B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$FC,$BF,$FF,$FF,$FF,$FF,$07,$96,$CE,$7F,$E0,$00,$00,$00,$00,$00,$00,$01,$FF,$00,$01,$E0 ;
 $4B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$8D,$FD,$FD,$15,$66,$00,$03,$07,$0A,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$E0,$00,$57,$07,$80,$00,$DF,$39,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4E,$00,$00,$02,$C3,$00,$FE,$34,$6F,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$66,$00,$00,$27,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C00 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$1F,$C0,$22,$00,$00,$36,$D6,$EB,$EF,$81,$DC,$60,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$FE,$FB,$FF,$7F,$F3,$FF,$3F,$FF,$FF,$E0,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FE,$FF,$FF,$FF,$FF,$FF,$03,$F5,$77,$6B,$F8,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00 ;
 $4C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$FB,$FF,$87,$FF,$FF,$FF,$07,$96,$CC,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$1F ;
 $4C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$AF,$FF,$81,$10,$67,$00,$00,$07,$AF,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$E0,$00,$47,$07,$80,$00,$DF,$99,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$7A,$C0,$00,$0E,$3F,$80,$06,$21,$4E,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$63,$F0,$00,$67,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D00 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$3F,$E2,$01,$FC,$3A,$D6,$EB,$F5,$01,$B8,$10,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4B,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$F9,$BB,$DF,$FF,$ED,$FC,$BF,$FF,$FF,$FC,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FE,$FF,$FF,$FF,$FF,$FF,$03,$F5,$67,$6B,$F8,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00 ;
 $4D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$FB,$7F,$88,$3F,$FF,$FF,$07,$9B,$CD,$7F,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$AF,$FC,$00,$90,$67,$00,$00,$07,$AF,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$C0,$00,$47,$07,$80,$00,$DF,$78,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$B8,$00,$00,$4F,$80,$02,$29,$5F,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$60,$22,$0F,$00,$66,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $1F,$FF,$FF,$F0,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$01,$04,$59,$6C,$EB,$EE,$03,$B8,$10,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$F9,$7B,$DF,$FF,$E5,$FF,$BF,$FF,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FE,$EF,$FF,$FF,$FF,$FF,$03,$E6,$E7,$6F,$F8,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00 ;
 $4E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$EF,$FF,$D0,$21,$9F,$FF,$07,$2B,$CB,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$F0,$00,$02,$E7,$00,$00,$07,$97,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$C0,$00,$07,$07,$00,$00,$DE,$78,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$47,$80,$02,$29,$5F,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$0F,$90,$25,$01,$00,$46,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F00 DEFB $1F,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$3F,$C0,$00,$7C,$00,$01,$04,$5D,$6C,$E7,$EE,$07,$70,$0E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4A,$FF,$FF,$FF,$FF,$FF,$FF,$F3,$F9,$77,$D7,$FF,$F3,$FE,$7F,$FF,$FF,$FF,$FC,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$82,$DF,$FF,$FF,$FF,$FF,$07,$E6,$E7,$6F,$F8,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$CF,$FF,$E0 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$17,$FF,$FF,$D6,$09,$9B,$FF,$07,$2B,$CB,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$C0,$00,$82,$87,$00,$00,$07,$97,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$E0,$00,$C1,$07,$80,$00,$DC,$5C,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00,$47,$E0,$02,$0B,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$10,$25,$01,$3F,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$25,$C0,$E0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $EF,$FF,$FF,$FF,$F7,$FF,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$6F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $5080 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$FF ;
 $50A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C1,$FF,$FF ;
 $50C0 DEFB $FF,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $50E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$03,$FF,$FF ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$27,$3C,$1F,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5160 DEFB $FD,$A1,$82,$00,$18,$09,$01,$38,$29,$EE,$FF,$FF,$FF,$80,$10,$00,$7F,$FF,$BC,$37,$FF,$00,$00,$00,$00,$07,$37,$F0,$00,$80,$FF,$FF ;
 $5180 DEFB $03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$FF ;
 $51A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C1,$FF,$FF ;
 $51C0 DEFB $FF,$BD,$FF,$BD,$FF,$FF,$FF,$C3,$FF,$FF,$FF,$FF,$FF,$EF,$EF,$FF,$FF,$FF,$C3,$FF,$F3,$EF,$FF,$FF,$FF,$FF,$FF,$E7,$C3,$C3,$F7,$FF ;
 $51E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$03,$FF,$FF ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$12,$03,$80,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5240 DEFB $FC,$00,$00,$00,$00,$00,$07,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5260 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$3F,$7F,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$02,$FF,$FF ;
 $5280 DEFB $01,$FF,$FF,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$FF ;
 $52A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C1,$FF,$FF ;
 $52C0 DEFB $FF,$66,$FF,$9D,$C7,$BB,$FF,$BD,$C7,$87,$C7,$E3,$C7,$C7,$FF,$C7,$87,$FF,$BF,$C7,$EF,$C7,$BB,$C7,$E3,$C7,$FF,$D7,$BD,$BD,$E7,$FF ;
 $52E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$03,$FF,$FF ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$12,$00,$78,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5340 DEFB $FF,$C0,$00,$00,$00,$FE,$7F,$E0,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5360 DEFB $FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$FF,$C0,$00,$03,$FF,$00,$FF,$FF,$FC,$00,$0F,$FF,$FF,$FE,$FF,$FF ;
 $5380 DEFB $FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$FF,$FF ;
 $53A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$81,$FF,$FF ;
 $53C0 DEFB $FF,$5E,$FF,$AD,$BB,$AB,$FF,$BF,$BB,$BB,$BB,$DF,$FB,$EF,$CF,$BB,$BB,$FF,$C3,$BB,$E7,$EF,$AB,$FB,$DF,$BB,$FF,$F7,$BD,$C3,$D7,$FF ;
 $53E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$07,$FF,$FF ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$14,$00,$07,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5440 DEFB $FF,$FF,$00,$05,$C1,$FF,$FE,$FF,$97,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5460 DEFB $00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$FF,$FF ;
 $5480 DEFB $FF,$FF,$FF,$00,$00,$FF,$FF,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F1,$FF,$FF ;
 $54A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$83,$FF,$FF ;
 $54C0 DEFB $FF,$5E,$FF,$B5,$87,$AB,$FF,$B1,$87,$BB,$87,$DF,$C3,$EF,$EF,$BB,$BB,$FF,$FD,$BB,$EF,$EF,$AB,$C3,$DF,$87,$FF,$F7,$C1,$BD,$B7,$FF ;
 $54E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$07,$FF,$FF ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5540 DEFB $FF,$9F,$FF,$BF,$FD,$F0,$01,$FF,$8C,$18,$98,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$FF,$FF ;
 $5580 DEFB $FF,$FF,$FE,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$FF,$FF ;
 $55A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$FF,$FF ;
 $55C0 DEFB $FF,$66,$FF,$B9,$BF,$AB,$FF,$BD,$BF,$BB,$BF,$DF,$BB,$EF,$EF,$BB,$BB,$FF,$BD,$BB,$EF,$EF,$AB,$BB,$DF,$BF,$FF,$F7,$FD,$BD,$81,$FF ;
 $55E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$07,$FF,$FF ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5640 DEFB $FF,$FF,$C0,$FF,$FF,$FF,$FF,$FF,$B1,$91,$91,$BF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$FF,$FF ;
 $5680 DEFB $00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$FF,$FF ;
 $56A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$FF,$FF ;
 $56C0 DEFB $FF,$BD,$FF,$BD,$C3,$D7,$FF,$C3,$C3,$BB,$C3,$DF,$C3,$F3,$C7,$C7,$BB,$FF,$C3,$C7,$EF,$F3,$D7,$C3,$DF,$C3,$FF,$C1,$C3,$C3,$F7,$FF ;
 $56E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$07,$FF,$FF ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5740 DEFB $FF,$FF,$FF,$CC,$C0,$7F,$FF,$FD,$EB,$FF,$FF,$B9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$01,$F0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$FF,$FF ;
 $5780 DEFB $00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$FF,$FF ;
 $57A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$FF,$FF ;
 $57C0 DEFB $FF,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $57E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$07,$FF,$FF ; }
 $5800 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ; {Attributes.
 $5820 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5840 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5860 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5880 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $58A0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $58C0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $58E0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5900 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5920 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5940 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5960 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5980 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $59A0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $59C0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $59E0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5A00 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5A20 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5A40 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5A60 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $5A80 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $5AA0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $5AC0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $5AE0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78 ; }
 $5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $F3,$0D,$CE,$0B,$E2,$50,$CE,$0B
 $5B20 DEFB $E3,$50,$1E,$17,$DC,$0A,$CE,$0B
 $5B28 DEFB $06,$03,$07,$5C,$4D,$00,$00,$00
 $5B30 DEFB $21,$B0,$AA,$00,$6A,$FF,$50,$15
 $5B38 DEFB $0E,$01,$8A,$18,$09,$18,$8F,$17
 $5B40 DEFB $09,$18,$09,$18,$8F,$17,$09,$18
 $5B48 DEFB $09,$18,$09,$18,$09,$18,$3B,$0F
 $5B50 DEFB $7F,$10,$54,$FF,$B4,$12,$00,$3E
 $5B58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00
 $5B60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
 $5B68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00
 $5B70 DEFB $00,$78,$44,$42,$42,$44,$78,$00
 $5B78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00
 $5B80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00
 $5B88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00
 $5B90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00
 $5B98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00
 $5BA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00
 $5BA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00
 $5BB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00
 $5BB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00
 $5BC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00
 $5BC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00
 $5BD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00
 $5BD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00
 $5BE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00
 $5BE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00
 $5BF0 DEFB $00,$FE,$10,$10,$10,$10,$10,$00
 $5BF8 DEFB $00,$42,$42,$42,$42,$42,$3C,$00
 $5C00 DEFB $FF,$00,$0D,$20,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$00,$00
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$AC,$01,$50,$FF,$00
 $5C40 DEFB $00,$00,$00,$00,$FF,$FE,$FF,$01
 $5C48 DEFB $38,$00,$00,$CB,$5C,$00,$00,$B6
 $5C50 DEFB $5C,$B6,$5C,$CB,$5C,$E4,$5C,$CA
 $5C58 DEFB $5C,$CC,$5C,$DF,$5C,$E3,$5C,$CF
 $5C60 DEFB $00,$E1,$5C,$E1,$5C,$E1,$5C,$00
 $5C68 DEFB $92,$5C,$10,$02,$00,$00,$FE,$FF
 $5C70 DEFB $01,$00,$00,$00,$01,$1A,$00,$00
 $5C78 DEFB $88,$1D,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$0A,$17,$60,$40,$E0,$50
 $5C88 DEFB $21,$15,$21,$17,$03,$38,$00,$38
 $5C90 DEFB $00,$00

@org

; Game Entry Point
@label=GameEntryPoint
c$5C92 LD HL,$5B00   ; {Copy #N$0100 bytes from #N$FF00 to #N$5B00.
 $5C95 LD DE,$FF00   ;
 $5C98 LD BC,$0100   ;
 $5C9B LDIR          ; }
 $5C9D JP $8003      ; Jump to #R$8003.

; Unused
u$5CA0 DEFB $00,$C9,$01,$00,$40,$00,$C0,$00
 $5CA8 DEFB $05,$00,$00,$00,$00,$29,$3C,$FF
 $5CB0 DEFB $00,$00,$57,$FF,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$80,$EA,$54,$52,$41
 $5CD0 DEFB $56,$45,$4C,$20,$20,$20,$20,$43
 $5CD8 DEFB $38,$30,$30,$33,$35,$31,$53,$0D
 $5CE0 DEFB $80,$22,$03,$03,$54,$52,$41,$56
 $5CE8 DEFB $45,$4C,$20,$20,$20,$20,$46,$9B
 $5CF0 DEFB $00,$60,$00,$80,$00,$00,$00,$00
 $5CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at 5D00
b$5D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; World Map/ Shadow Buffer?
@label=ShadowBuffer
b$6000 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6008 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6010 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6018 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6020 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6028 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6030 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6038 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6040 DEFB $00,$00,$00,$00,$00,$00,$00,$7F
 $6048 DEFB $FF,$FF,$FF,$FC,$00,$00,$00,$00
 $6050 DEFB $00,$00,$00,$00,$00,$00,$78,$00
 $6058 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6060 DEFB $00,$00,$3E,$03,$19,$C3,$F0,$00
 $6068 DEFB $0F,$FF,$FF,$E0,$00,$00,$00,$00
 $6070 DEFB $00,$01,$E0,$1E,$BF,$FF,$FF,$FF
 $6078 DEFB $FE,$00,$E4,$00,$00,$00,$00,$00
 $6080 DEFB $FF,$FF,$FF,$FF,$FF,$FE,$03,$FC
 $6088 DEFB $0F,$FF,$E0,$00,$00,$00,$0F,$FF
 $6090 DEFB $E0,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6098 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FE,$00
 $60A0 DEFB $FF,$FF,$F0,$FF,$F8,$00,$7C,$00
 $60A8 DEFB $01,$E0,$00,$00,$00,$01,$FF,$9C
 $60B0 DEFB $DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $60B8 DEFB $FF,$FF,$FF,$FF,$06,$10,$00,$00
 $60C0 DEFB $03,$FF,$FF,$FF,$FF,$F1,$FF,$FC
 $60C8 DEFB $00,$00,$00,$00,$07,$30,$7B,$FF
 $60D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9
 $60D8 DEFB $FF,$FF,$FE,$C0,$1C,$00,$00,$00
 $60E0 DEFB $00,$3F,$FF,$FF,$F8,$FF,$F3,$07
 $60E8 DEFB $C0,$00,$00,$00,$00,$3F,$FF,$FF
 $60F0 DEFB $FE,$7F,$CF,$FF,$F8,$7F,$FF,$FF
 $60F8 DEFB $FF,$FF,$FF,$20,$00,$00,$00,$00
 $6100 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6108 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6110 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6120 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6128 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6130 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6138 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6140 DEFB $00,$00,$00,$00,$00,$00,$00,$07
 $6148 DEFB $FF,$FF,$FF,$FC,$00,$00,$00,$00
 $6150 DEFB $00,$00,$00,$E0,$00,$04,$7F,$80
 $6158 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6160 DEFB $00,$00,$7E,$EB,$3E,$1B,$F8,$00
 $6168 DEFB $0F,$FF,$FF,$F0,$00,$00,$00,$08
 $6170 DEFB $00,$00,$C0,$1E,$FF,$FF,$FF,$FF
 $6178 DEFB $FF,$3F,$FE,$00,$00,$0C,$00,$00
 $6180 DEFB $FF,$FF,$FF,$FF,$FF,$FC,$07,$FC
 $6188 DEFB $0F,$FF,$80,$37,$C0,$00,$0F,$FF
 $6190 DEFB $F0,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6198 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$BC,$00
 $61A0 DEFB $FF,$FF,$F3,$FF,$F0,$00,$7E,$02
 $61A8 DEFB $00,$C0,$00,$00,$00,$01,$FF,$80
 $61B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $61B8 DEFB $FF,$FF,$FF,$FF,$04,$00,$00,$00
 $61C0 DEFB $01,$FF,$FF,$FF,$FF,$F3,$FF,$FF
 $61C8 DEFB $00,$00,$00,$00,$07,$70,$FF,$FF
 $61D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB
 $61D8 DEFB $FF,$FF,$FF,$C0,$1C,$00,$00,$00
 $61E0 DEFB $00,$7F,$FF,$FF,$E0,$7F,$EF,$00
 $61E8 DEFB $40,$00,$00,$00,$00,$1F,$FF,$FF
 $61F0 DEFB $CC,$FF,$8F,$9F,$FF,$FF,$FF,$FF
 $61F8 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00
 $6200 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6208 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6210 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6218 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6220 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6228 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6230 DEFB $00,$00,$00,$00,$00,$38,$00,$00
 $6238 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6240 DEFB $00,$00,$00,$00,$00,$00,$00,$3F
 $6248 DEFB $FF,$FF,$FF,$FC,$00,$00,$00,$00
 $6250 DEFB $00,$00,$0F,$80,$00,$0F,$FF,$C0
 $6258 DEFB $00,$1F,$80,$00,$00,$00,$00,$00
 $6260 DEFB $00,$00,$79,$FB,$1D,$1B,$FE,$00
 $6268 DEFB $07,$FF,$FF,$B0,$00,$00,$00,$1F
 $6270 DEFB $80,$00,$00,$1E,$FF,$FF,$FF,$FF
 $6278 DEFB $FF,$FF,$FF,$FC,$00,$00,$00,$00
 $6280 DEFB $FF,$FF,$FF,$FF,$FF,$F0,$07,$98
 $6288 DEFB $0F,$FE,$00,$1F,$C0,$00,$1F,$CF
 $6290 DEFB $F3,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6298 DEFB $FF,$FF,$FF,$FF,$FF,$FE,$0C,$00
 $62A0 DEFB $FF,$FF,$FF,$FF,$E0,$00,$FE,$60
 $62A8 DEFB $00,$00,$00,$00,$00,$01,$DF,$0F
 $62B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $62B8 DEFB $FF,$FF,$FC,$00,$1E,$00,$00,$00
 $62C0 DEFB $01,$FF,$FF,$FF,$FF,$F3,$FF,$FF
 $62C8 DEFB $00,$00,$00,$00,$07,$78,$FF,$FF
 $62D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB
 $62D8 DEFB $FF,$FF,$FF,$C0,$08,$00,$00,$00
 $62E0 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$D0
 $62E8 DEFB $00,$00,$00,$00,$00,$1F,$FB,$FF
 $62F0 DEFB $CE,$FF,$0F,$9F,$FF,$FF,$FF,$FF
 $62F8 DEFB $FF,$FF,$FE,$10,$00,$00,$00,$00
 $6300 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6308 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6310 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6318 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6320 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6328 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6330 DEFB $00,$00,$00,$00,$00,$78,$00,$00
 $6338 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6340 DEFB $00,$00,$00,$00,$04,$20,$00,$00
 $6348 DEFB $FF,$FF,$FF,$F8,$00,$00,$00,$00
 $6350 DEFB $00,$00,$7C,$00,$00,$3F,$FF,$E0
 $6358 DEFB $00,$1F,$38,$00,$00,$00,$00,$00
 $6360 DEFB $00,$00,$7B,$FF,$0B,$1F,$FF,$80
 $6368 DEFB $0B,$FF,$FF,$E0,$00,$00,$00,$3F
 $6370 DEFB $E0,$00,$07,$9E,$FF,$FF,$FF,$FF
 $6378 DEFB $FF,$FF,$FF,$FE,$0C,$F0,$00,$00
 $6380 DEFB $FF,$FF,$FF,$FF,$FF,$E8,$7F,$C0
 $6388 DEFB $0F,$F8,$00,$1F,$80,$00,$3F,$CF
 $6390 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6398 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $63A0 DEFB $FF,$FF,$FF,$FF,$E0,$00,$FE,$70
 $63A8 DEFB $00,$00,$00,$00,$00,$C0,$0F,$0F
 $63B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $63B8 DEFB $FF,$FF,$FC,$00,$3E,$00,$00,$00
 $63C0 DEFB $01,$FF,$FF,$F8,$FF,$F3,$FF,$FF
 $63C8 DEFB $00,$00,$00,$00,$04,$78,$FF,$FF
 $63D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F7
 $63D8 DEFB $FF,$FF,$FF,$60,$08,$00,$00,$00
 $63E0 DEFB $00,$7F,$FF,$FF,$FC,$4F,$FF,$E0
 $63E8 DEFB $00,$00,$00,$00,$00,$1F,$F9,$FF
 $63F0 DEFB $80,$7F,$3F,$BF,$FF,$FF,$FF,$FF
 $63F8 DEFB $FF,$FF,$FC,$1C,$00,$00,$00,$00
 $6400 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6410 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6418 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6428 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6430 DEFB $00,$00,$00,$00,$00,$1E,$00,$00
 $6438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6440 DEFB $00,$00,$00,$73,$0C,$39,$E0,$00
 $6448 DEFB $3F,$FF,$FF,$FC,$00,$00,$00,$00
 $6450 DEFB $00,$00,$78,$00,$00,$FF,$FF,$C0
 $6458 DEFB $00,$04,$00,$00,$00,$00,$00,$00
 $6460 DEFB $00,$00,$00,$7F,$07,$1F,$FF,$E0
 $6468 DEFB $1F,$FF,$FF,$E0,$00,$00,$00,$FF
 $6470 DEFB $F8,$00,$1B,$CF,$1F,$FF,$FF,$FF
 $6478 DEFB $FF,$FF,$FF,$FF,$FF,$FC,$00,$00
 $6480 DEFB $FF,$FF,$FF,$FF,$FF,$DE,$67,$C0
 $6488 DEFB $07,$F8,$00,$1E,$00,$00,$7F,$1F
 $6490 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6498 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$80,$00
 $64A0 DEFB $3F,$FF,$FF,$FF,$F0,$01,$FF,$F0
 $64A8 DEFB $00,$00,$00,$00,$00,$C0,$0E,$37
 $64B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $64B8 DEFB $FF,$FF,$F8,$00,$3E,$00,$00,$00
 $64C0 DEFB $00,$FF,$FF,$FA,$FF,$FB,$FF,$FC
 $64C8 DEFB $00,$00,$00,$00,$00,$F3,$FF,$FF
 $64D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $64D8 DEFB $FF,$FF,$FF,$20,$00,$00,$00,$00
 $64E0 DEFB $00,$7F,$FF,$FF,$F8,$9F,$FC,$C0
 $64E8 DEFB $00,$00,$00,$00,$00,$1F,$9C,$FF
 $64F0 DEFB $80,$1F,$1F,$FF,$FF,$FF,$FF,$FF
 $64F8 DEFB $FF,$FF,$FC,$3C,$00,$00,$00,$00
 $6500 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6510 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6528 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6530 DEFB $00,$00,$00,$00,$00,$06,$E0,$00
 $6538 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6540 DEFB $00,$00,$00,$7F,$0C,$3F,$E0,$00
 $6548 DEFB $1F,$FF,$FF,$F8,$00,$00,$00,$00
 $6550 DEFB $00,$00,$60,$00,$01,$FF,$FF,$E0
 $6558 DEFB $10,$00,$00,$00,$00,$00,$00,$00
 $6560 DEFB $00,$02,$03,$E3,$C3,$00,$1F,$E0
 $6568 DEFB $0B,$FF,$FF,$80,$00,$00,$01,$FF
 $6570 DEFB $FE,$11,$FF,$FF,$5F,$FF,$FF,$FF
 $6578 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$80,$00
 $6580 DEFB $FF,$FF,$FF,$FF,$FF,$1A,$03,$A0
 $6588 DEFB $07,$F0,$00,$00,$00,$00,$FF,$3F
 $6590 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6598 DEFB $FF,$FF,$FF,$FF,$FB,$FF,$80,$00
 $65A0 DEFB $3F,$FF,$FF,$FF,$F0,$01,$FF,$F0
 $65A8 DEFB $00,$00,$00,$00,$00,$E0,$6E,$3F
 $65B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $65B8 DEFB $FF,$FF,$F0,$00,$3E,$00,$00,$00
 $65C0 DEFB $00,$FF,$FF,$FE,$FF,$FF,$FF,$FB
 $65C8 DEFB $00,$00,$00,$00,$01,$07,$FF,$FF
 $65D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $65D8 DEFB $FF,$FF,$FF,$30,$00,$00,$00,$00
 $65E0 DEFB $00,$7F,$FF,$FF,$F9,$9B,$F1,$00
 $65E8 DEFB $00,$00,$00,$00,$07,$FC,$1E,$7F
 $65F0 DEFB $00,$0F,$0F,$FF,$FF,$FF,$FF,$FF
 $65F8 DEFB $FF,$FF,$C0,$08,$00,$00,$00,$00
 $6600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6610 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6618 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6620 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6628 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6630 DEFB $00,$00,$00,$00,$00,$00,$E0,$00
 $6638 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6640 DEFB $00,$00,$00,$1C,$00,$00,$00,$00
 $6648 DEFB $1F,$FF,$FF,$F8,$00,$00,$00,$00
 $6650 DEFB $00,$00,$C0,$08,$0F,$FF,$FF,$FF
 $6658 DEFB $3E,$00,$00,$00,$00,$00,$00,$00
 $6660 DEFB $E0,$3F,$E0,$0D,$9B,$87,$1F,$C0
 $6668 DEFB $0F,$FF,$FE,$00,$00,$00,$03,$FF
 $6670 DEFB $FF,$13,$FF,$FF,$7F,$FF,$FF,$FF
 $6678 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$C0,$00
 $6680 DEFB $FF,$FF,$FF,$FF,$FF,$10,$03,$D0
 $6688 DEFB $07,$F0,$00,$00,$00,$01,$FF,$3F
 $6690 DEFB $F3,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6698 DEFB $FF,$FF,$FF,$FF,$FB,$FE,$00,$00
 $66A0 DEFB $17,$FF,$FF,$FF,$FE,$01,$FF,$F0
 $66A8 DEFB $00,$00,$00,$00,$00,$C0,$60,$1F
 $66B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD
 $66B8 DEFB $FF,$FF,$E0,$00,$3E,$00,$00,$00
 $66C0 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FE,$03
 $66C8 DEFB $C0,$00,$00,$00,$00,$1F,$FF,$FF
 $66D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $66D8 DEFB $FF,$FF,$FF,$30,$00,$00,$00,$00
 $66E0 DEFB $00,$FF,$FF,$FF,$F9,$A7,$E0,$00
 $66E8 DEFB $00,$00,$00,$00,$07,$FC,$0F,$3F
 $66F0 DEFB $8E,$0F,$83,$FF,$FF,$FF,$FF,$FF
 $66F8 DEFB $FF,$FF,$C0,$20,$00,$00,$00,$00
 $6700 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6708 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6710 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6718 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6728 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6730 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6738 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6740 DEFB $00,$00,$00,$00,$01,$E0,$30,$00
 $6748 DEFB $0F,$FF,$FF,$C0,$00,$00,$00,$00
 $6750 DEFB $00,$00,$C0,$1E,$0F,$FF,$FF,$FF
 $6758 DEFB $FE,$00,$C0,$00,$00,$00,$00,$00
 $6760 DEFB $FE,$7F,$FE,$7C,$07,$EE,$03,$E0
 $6768 DEFB $0F,$FF,$E0,$00,$00,$00,$07,$FF
 $6770 DEFB $FF,$07,$FF,$FE,$FF,$FF,$FF,$FF
 $6778 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FC,$00
 $6780 DEFB $FF,$FF,$FF,$FF,$FE,$04,$70,$40
 $6788 DEFB $03,$E0,$00,$00,$00,$01,$FF,$3F
 $6790 DEFB $9F,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6798 DEFB $FF,$FF,$FF,$FF,$17,$F0,$00,$00
 $67A0 DEFB $07,$FF,$FF,$FF,$FF,$01,$FF,$F8
 $67A8 DEFB $00,$00,$00,$00,$03,$60,$40,$3F
 $67B0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD
 $67B8 DEFB $FF,$FF,$E0,$00,$3E,$00,$00,$00
 $67C0 DEFB $00,$3F,$FF,$FF,$FF,$FF,$FD,$83
 $67C8 DEFB $C0,$00,$00,$00,$00,$7F,$FF,$FF
 $67D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $67D8 DEFB $FF,$FF,$FF,$20,$00,$00,$00,$00
 $67E0 DEFB $00,$FF,$FF,$FF,$F9,$FF,$E0,$00
 $67E8 DEFB $00,$00,$00,$00,$07,$F8,$03,$DF
 $67F0 DEFB $FF,$FF,$C7,$FF,$FF,$FF,$FF,$FF
 $67F8 DEFB $FF,$DF,$C0,$30,$00,$00,$00,$00
 $6800 DEFB $00,$FF,$FF,$FF,$FF,$FF,$10,$00
 $6808 DEFB $00,$00,$00,$00,$07,$F0,$00,$9C
 $6810 DEFB $FF,$FF,$C7,$FF,$FF,$FF,$FF,$FF
 $6818 DEFB $FF,$9B,$80,$30,$00,$00,$00,$00
 $6820 DEFB $00,$1F,$FF,$FF,$FF,$E0,$00,$00
 $6828 DEFB $00,$00,$00,$00,$07,$FF,$FE,$1F
 $6830 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6838 DEFB $FF,$F8,$08,$00,$00,$00,$00,$00
 $6840 DEFB $00,$01,$BF,$F0,$00,$40,$00,$00
 $6848 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$FF
 $6850 DEFB $FE,$7F,$F1,$80,$3F,$FF,$FF,$FF
 $6858 DEFB $FF,$E4,$00,$00,$00,$00,$00,$00
 $6860 DEFB $00,$00,$00,$FF,$E0,$08,$04,$00
 $6868 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6870 DEFB $FF,$E7,$FC,$00,$03,$F8,$01,$9F
 $6878 DEFB $E0,$06,$00,$00,$00,$00,$00,$00
 $6880 DEFB $00,$00,$00,$00,$03,$67,$FF,$C0
 $6888 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$FF
 $6890 DEFB $FF,$FF,$F0,$00,$00,$0C,$00,$08
 $6898 DEFB $00,$00,$60,$00,$00,$00,$00,$00
 $68A0 DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $68A8 DEFB $E0,$00,$00,$00,$00,$00,$3F,$FF
 $68B0 DEFB $FB,$FC,$00,$00,$00,$00,$00,$07
 $68B8 DEFB $07,$E7,$81,$80,$00,$00,$00,$00
 $68C0 DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $68C8 DEFB $FF,$FF,$00,$00,$00,$00,$03,$FF
 $68D0 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $68D8 DEFB $00,$00,$40,$03,$9C,$00,$00,$00
 $68E0 DEFB $00,$00,$00,$00,$00,$01,$FF,$FF
 $68E8 DEFB $FF,$F8,$00,$00,$00,$00,$0F,$FF
 $68F0 DEFB $FF,$C3,$E0,$00,$00,$00,$00,$00
 $68F8 DEFB $00,$01,$FF,$F9,$C0,$00,$00,$00
 $6900 DEFB $00,$FF,$FF,$FF,$FF,$FF,$00,$00
 $6908 DEFB $00,$00,$00,$00,$07,$F0,$00,$9E
 $6910 DEFB $FF,$FF,$83,$FF,$FF,$FF,$FF,$FF
 $6918 DEFB $FF,$83,$C0,$30,$00,$00,$00,$00
 $6920 DEFB $00,$0F,$FF,$FF,$FF,$C0,$00,$00
 $6928 DEFB $00,$00,$00,$00,$07,$FF,$FF,$1F
 $6930 DEFB $F3,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6938 DEFB $FF,$F8,$00,$00,$00,$00,$00,$00
 $6940 DEFB $00,$00,$9F,$F0,$00,$00,$00,$00
 $6948 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$FF
 $6950 DEFB $FE,$7F,$FF,$E0,$1F,$FF,$FF,$FF
 $6958 DEFB $FF,$C4,$00,$00,$00,$00,$00,$00
 $6960 DEFB $00,$00,$00,$7F,$E0,$00,$00,$00
 $6968 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6970 DEFB $FF,$E3,$F0,$00,$01,$F0,$00,$1F
 $6978 DEFB $F0,$06,$00,$00,$00,$00,$00,$00
 $6980 DEFB $00,$00,$00,$00,$01,$DF,$FF,$E0
 $6988 DEFB $00,$00,$00,$00,$0F,$FF,$FF,$FF
 $6990 DEFB $FF,$FF,$F0,$00,$00,$0E,$00,$0C
 $6998 DEFB $00,$10,$60,$00,$00,$00,$00,$00
 $69A0 DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $69A8 DEFB $F0,$00,$00,$00,$00,$00,$3F,$FF
 $69B0 DEFB $FB,$F8,$00,$00,$00,$00,$00,$07
 $69B8 DEFB $87,$E6,$01,$8C,$00,$00,$00,$00
 $69C0 DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $69C8 DEFB $FF,$FE,$00,$00,$00,$00,$03,$FF
 $69D0 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $69D8 DEFB $00,$00,$80,$00,$0E,$00,$00,$00
 $69E0 DEFB $00,$00,$00,$00,$00,$00,$7F,$FF
 $69E8 DEFB $FF,$F0,$00,$00,$00,$00,$0F,$FF
 $69F0 DEFB $FF,$03,$C0,$00,$00,$00,$00,$00
 $69F8 DEFB $00,$03,$FF,$FF,$E0,$00,$00,$08
 $6A00 DEFB $00,$FF,$FF,$FF,$FF,$FE,$00,$00
 $6A08 DEFB $00,$00,$00,$00,$07,$F0,$01,$0E
 $6A10 DEFB $FF,$FF,$83,$FF,$FF,$FF,$FF,$FF
 $6A18 DEFB $FF,$F0,$C0,$30,$00,$00,$00,$00
 $6A20 DEFB $00,$0F,$FF,$FF,$FF,$C0,$00,$00
 $6A28 DEFB $00,$00,$00,$00,$07,$FF,$FF,$FF
 $6A30 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6A38 DEFB $FF,$F8,$00,$00,$00,$00,$00,$00
 $6A40 DEFB $00,$00,$5F,$F0,$00,$00,$00,$00
 $6A48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6A50 DEFB $FF,$3F,$FF,$E0,$1F,$FF,$F3,$FF
 $6A58 DEFB $FF,$00,$00,$00,$00,$00,$00,$00
 $6A60 DEFB $00,$00,$00,$1B,$FC,$00,$00,$40
 $6A68 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6A70 DEFB $FF,$FB,$C0,$00,$01,$F0,$00,$1F
 $6A78 DEFB $F0,$00,$00,$00,$00,$00,$00,$00
 $6A80 DEFB $00,$00,$00,$00,$00,$1F,$FF,$F0
 $6A88 DEFB $00,$00,$00,$00,$07,$FD,$FF,$FF
 $6A90 DEFB $FF,$FF,$E0,$00,$00,$04,$00,$06
 $6A98 DEFB $00,$38,$40,$00,$00,$00,$00,$00
 $6AA0 DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $6AA8 DEFB $FF,$00,$00,$00,$00,$00,$1F,$FF
 $6AB0 DEFB $FF,$F0,$00,$00,$00,$00,$00,$03
 $6AB8 DEFB $83,$CE,$00,$9F,$00,$00,$00,$00
 $6AC0 DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $6AC8 DEFB $FF,$FE,$00,$00,$00,$00,$03,$FF
 $6AD0 DEFB $FD,$F0,$00,$00,$00,$00,$00,$00
 $6AD8 DEFB $00,$00,$00,$01,$00,$00,$00,$00
 $6AE0 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $6AE8 DEFB $FF,$F0,$00,$00,$00,$00,$07,$FF
 $6AF0 DEFB $FF,$03,$C0,$00,$00,$00,$00,$00
 $6AF8 DEFB $00,$03,$FF,$FF,$F0,$00,$00,$00
 $6B00 DEFB $00,$7F,$FF,$FF,$FF,$FE,$00,$00
 $6B08 DEFB $00,$00,$00,$00,$03,$E0,$60,$08
 $6B10 DEFB $7F,$FF,$E3,$FF,$FF,$FF,$FF,$FF
 $6B18 DEFB $FF,$F0,$E0,$70,$00,$00,$00,$00
 $6B20 DEFB $00,$05,$FF,$FF,$FF,$C0,$00,$00
 $6B28 DEFB $00,$00,$00,$00,$0F,$FF,$FF,$FF
 $6B30 DEFB $FF,$FF,$9F,$FF,$FF,$FF,$FF,$FF
 $6B38 DEFB $FF,$F8,$00,$00,$00,$00,$00,$00
 $6B40 DEFB $00,$00,$0F,$F0,$01,$E0,$00,$00
 $6B48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6B50 DEFB $FF,$BF,$FF,$E0,$1F,$FF,$C3,$FF
 $6B58 DEFB $88,$00,$00,$00,$00,$00,$00,$00
 $6B60 DEFB $00,$00,$00,$01,$FE,$00,$00,$00
 $6B68 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6B70 DEFB $FF,$FB,$00,$00,$00,$F0,$00,$0B
 $6B78 DEFB $F0,$02,$80,$00,$00,$00,$00,$00
 $6B80 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FC
 $6B88 DEFB $00,$00,$00,$00,$03,$38,$FF,$FF
 $6B90 DEFB $FF,$FF,$C0,$00,$00,$00,$00,$67
 $6B98 DEFB $00,$70,$00,$00,$00,$00,$00,$00
 $6BA0 DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $6BA8 DEFB $FF,$E0,$00,$00,$00,$00,$0F,$FF
 $6BB0 DEFB $FF,$E0,$00,$00,$00,$00,$00,$03
 $6BB8 DEFB $C0,$6F,$00,$FF,$C0,$00,$00,$00
 $6BC0 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $6BC8 DEFB $FF,$FC,$00,$00,$00,$00,$03,$FF
 $6BD0 DEFB $FD,$F0,$00,$00,$00,$00,$00,$00
 $6BD8 DEFB $00,$00,$03,$81,$00,$00,$00,$00
 $6BE0 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $6BE8 DEFB $FF,$F0,$00,$00,$00,$00,$07,$FF
 $6BF0 DEFB $FE,$03,$C0,$00,$00,$00,$00,$00
 $6BF8 DEFB $00,$0F,$FF,$FF,$FA,$00,$00,$00
 $6C00 DEFB $00,$7F,$FF,$FF,$FF,$FC,$00,$00
 $6C08 DEFB $00,$00,$00,$00,$00,$0F,$E0,$00
 $6C10 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6C18 DEFB $FF,$E0,$E0,$F0,$00,$00,$00,$00
 $6C20 DEFB $00,$06,$FF,$FF,$E1,$C0,$00,$00
 $6C28 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$FF
 $6C30 DEFB $FB,$FF,$8F,$FF,$FF,$FF,$FF,$FF
 $6C38 DEFB $FF,$F8,$00,$00,$00,$00,$00,$00
 $6C40 DEFB $00,$00,$07,$F0,$10,$30,$00,$00
 $6C48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6C50 DEFB $FF,$9F,$FF,$C0,$03,$FF,$81,$FF
 $6C58 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $6C60 DEFB $00,$00,$00,$00,$3E,$00,$00,$00
 $6C68 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6C70 DEFB $FF,$FC,$00,$00,$00,$F0,$00,$09
 $6C78 DEFB $F0,$00,$40,$00,$00,$00,$00,$00
 $6C80 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $6C88 DEFB $80,$00,$00,$00,$00,$00,$1F,$FF
 $6C90 DEFB $FF,$FF,$C0,$00,$00,$00,$00,$33
 $6C98 DEFB $00,$70,$00,$00,$00,$00,$00,$00
 $6CA0 DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $6CA8 DEFB $FF,$F8,$00,$00,$00,$00,$0F,$FF
 $6CB0 DEFB $FF,$C0,$00,$00,$00,$00,$00,$01
 $6CB8 DEFB $C0,$04,$00,$1F,$E0,$00,$00,$00
 $6CC0 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $6CC8 DEFB $FF,$F8,$00,$00,$00,$00,$03,$FF
 $6CD0 DEFB $FD,$F0,$60,$00,$00,$00,$00,$00
 $6CD8 DEFB $00,$00,$07,$E1,$80,$00,$00,$00
 $6CE0 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $6CE8 DEFB $FF,$F0,$00,$00,$00,$00,$07,$FF
 $6CF0 DEFB $FE,$03,$C0,$00,$00,$00,$00,$00
 $6CF8 DEFB $00,$7F,$FF,$FF,$F9,$00,$10,$00
 $6D00 DEFB $00,$7F,$FF,$FF,$FF,$FC,$00,$00
 $6D08 DEFB $00,$00,$00,$00,$01,$9F,$F0,$00
 $6D10 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6D18 DEFB $FF,$E0,$C7,$E0,$00,$00,$00,$00
 $6D20 DEFB $00,$02,$FF,$F8,$20,$C0,$00,$00
 $6D28 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF
 $6D30 DEFB $F9,$FF,$E7,$FF,$FF,$FF,$FF,$FF
 $6D38 DEFB $FF,$F0,$00,$00,$00,$00,$00,$00
 $6D40 DEFB $00,$00,$07,$F0,$70,$1E,$00,$00
 $6D48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6D50 DEFB $FF,$8F,$FF,$C0,$03,$FF,$01,$FF
 $6D58 DEFB $88,$00,$00,$00,$00,$00,$00,$00
 $6D60 DEFB $00,$00,$00,$00,$0E,$00,$00,$00
 $6D68 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$FF
 $6D70 DEFB $FF,$FC,$F0,$00,$00,$70,$00,$08
 $6D78 DEFB $F0,$01,$40,$00,$00,$00,$00,$00
 $6D80 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $6D88 DEFB $C0,$00,$00,$00,$00,$00,$1F,$FF
 $6D90 DEFB $FF,$FF,$80,$00,$00,$00,$00,$1B
 $6D98 DEFB $01,$F0,$00,$00,$00,$00,$00,$00
 $6DA0 DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $6DA8 DEFB $FF,$FC,$00,$00,$00,$00,$07,$FF
 $6DB0 DEFB $FF,$C0,$00,$00,$00,$00,$00,$01
 $6DB8 DEFB $80,$00,$00,$0F,$F0,$00,$00,$00
 $6DC0 DEFB $00,$00,$00,$00,$00,$07,$FF,$FF
 $6DC8 DEFB $FF,$F8,$00,$00,$00,$00,$07,$FF
 $6DD0 DEFB $FF,$F0,$60,$00,$00,$00,$00,$00
 $6DD8 DEFB $00,$00,$27,$E1,$80,$00,$00,$00
 $6DE0 DEFB $00,$00,$00,$00,$00,$00,$1F,$FF
 $6DE8 DEFB $FF,$F0,$00,$00,$00,$00,$03,$FF
 $6DF0 DEFB $FE,$07,$80,$00,$00,$00,$00,$00
 $6DF8 DEFB $01,$FF,$FF,$FF,$F8,$00,$00,$00
 $6E00 DEFB $00,$3F,$FF,$FF,$FF,$FC,$00,$00
 $6E08 DEFB $00,$00,$00,$00,$01,$FF,$E0,$00
 $6E10 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6E18 DEFB $FF,$F0,$00,$00,$00,$00,$00,$00
 $6E20 DEFB $00,$02,$7F,$F0,$00,$C0,$00,$00
 $6E28 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$FF
 $6E30 DEFB $FC,$FF,$F0,$7F,$FF,$FF,$FF,$FF
 $6E38 DEFB $FF,$F0,$00,$00,$00,$00,$00,$00
 $6E40 DEFB $00,$00,$07,$F8,$70,$0C,$E0,$00
 $6E48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6E50 DEFB $FF,$8F,$FF,$80,$03,$FE,$01,$FF
 $6E58 DEFB $80,$03,$00,$00,$00,$00,$00,$00
 $6E60 DEFB $00,$00,$00,$00,$0E,$00,$E0,$00
 $6E68 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$FF
 $6E70 DEFB $FF,$FF,$F0,$00,$00,$60,$00,$08
 $6E78 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $6E80 DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $6E88 DEFB $E0,$00,$00,$00,$00,$00,$1F,$FF
 $6E90 DEFB $FF,$FF,$00,$00,$00,$00,$00,$0C
 $6E98 DEFB $07,$F8,$40,$00,$00,$00,$00,$00
 $6EA0 DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $6EA8 DEFB $FF,$FF,$00,$00,$00,$00,$07,$FF
 $6EB0 DEFB $FF,$C0,$00,$00,$00,$00,$00,$00
 $6EB8 DEFB $3E,$00,$00,$07,$F8,$18,$00,$00
 $6EC0 DEFB $00,$00,$00,$00,$00,$07,$FF,$FF
 $6EC8 DEFB $FF,$F8,$00,$00,$00,$00,$07,$FF
 $6ED0 DEFB $FF,$F0,$60,$00,$00,$00,$00,$00
 $6ED8 DEFB $00,$00,$7F,$C1,$C0,$00,$00,$00
 $6EE0 DEFB $00,$00,$00,$00,$00,$00,$1F,$FF
 $6EE8 DEFB $FF,$E0,$00,$00,$00,$00,$03,$FF
 $6EF0 DEFB $FE,$07,$80,$00,$00,$00,$00,$00
 $6EF8 DEFB $01,$FF,$FF,$FF,$FC,$00,$00,$00
 $6F00 DEFB $00,$3F,$FF,$FF,$FF,$F8,$00,$00
 $6F08 DEFB $00,$00,$00,$00,$01,$FF,$F0,$00
 $6F10 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $6F18 DEFB $FF,$F0,$08,$00,$00,$00,$00,$00
 $6F20 DEFB $00,$07,$3F,$F0,$00,$C0,$00,$00
 $6F28 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$FF
 $6F30 DEFB $FC,$FF,$F1,$03,$7F,$FF,$FF,$FF
 $6F38 DEFB $FF,$F4,$00,$00,$00,$00,$00,$00
 $6F40 DEFB $00,$00,$01,$F8,$F0,$01,$F0,$00
 $6F48 DEFB $00,$00,$00,$01,$FF,$FF,$FF,$FF
 $6F50 DEFB $FF,$C7,$FF,$00,$03,$FC,$01,$FF
 $6F58 DEFB $C0,$03,$00,$00,$00,$00,$00,$00
 $6F60 DEFB $00,$00,$00,$00,$0F,$07,$FF,$00
 $6F68 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF
 $6F70 DEFB $FF,$FF,$F0,$00,$00,$68,$00,$08
 $6F78 DEFB $00,$00,$20,$00,$00,$00,$00,$00
 $6F80 DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $6F88 DEFB $E0,$00,$00,$00,$00,$00,$3F,$FF
 $6F90 DEFB $FF,$FE,$00,$00,$00,$00,$00,$0F
 $6F98 DEFB $07,$F7,$88,$00,$00,$00,$00,$00
 $6FA0 DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $6FA8 DEFB $FF,$FF,$00,$00,$00,$00,$07,$FF
 $6FB0 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $6FB8 DEFB $1F,$20,$00,$07,$9C,$00,$00,$00
 $6FC0 DEFB $00,$00,$00,$00,$00,$03,$FF,$FF
 $6FC8 DEFB $FF,$F8,$00,$00,$00,$00,$0F,$FF
 $6FD0 DEFB $FF,$E1,$E0,$00,$00,$00,$00,$00
 $6FD8 DEFB $00,$01,$FF,$F1,$C0,$00,$00,$04
 $6FE0 DEFB $00,$00,$00,$00,$00,$00,$1F,$FF
 $6FE8 DEFB $FF,$00,$00,$00,$00,$00,$03,$FF
 $6FF0 DEFB $FE,$07,$80,$00,$00,$00,$00,$00
 $6FF8 DEFB $01,$FF,$FF,$FF,$FC,$00,$00,$00
 $7000 DEFB $00,$00,$00,$00,$00,$00,$1F,$FF
 $7008 DEFB $FC,$00,$00,$00,$00,$00,$01,$FF
 $7010 DEFB $FE,$03,$80,$00,$00,$00,$00,$00
 $7018 DEFB $03,$FF,$FF,$FF,$FE,$00,$00,$00
 $7020 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $7028 DEFB $E0,$00,$00,$00,$00,$00,$00,$7F
 $7030 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $7038 DEFB $01,$FE,$01,$FF,$F8,$00,$00,$00
 $7040 DEFB $00,$00,$00,$00,$00,$00,$3F,$E0
 $7048 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7050 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7058 DEFB $00,$00,$00,$00,$00,$00,$1A,$00
 $7060 DEFB $00,$00,$00,$00,$00,$00,$7F,$00
 $7068 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7070 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7078 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7080 DEFB $00,$00,$00,$00,$00,$00,$0F,$80
 $7088 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7090 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7098 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $70F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7100 DEFB $00,$00,$00,$00,$00,$00,$1F,$FF
 $7108 DEFB $F8,$00,$00,$00,$00,$00,$01,$FF
 $7110 DEFB $F8,$00,$00,$00,$00,$00,$00,$00
 $7118 DEFB $03,$FF,$FF,$FF,$FF,$00,$00,$00
 $7120 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $7128 DEFB $C0,$00,$00,$00,$00,$00,$00,$7F
 $7130 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7138 DEFB $01,$EC,$01,$FF,$F8,$00,$00,$00
 $7140 DEFB $00,$00,$00,$00,$00,$00,$3F,$E0
 $7148 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7150 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7158 DEFB $00,$00,$00,$00,$00,$00,$38,$00
 $7160 DEFB $00,$00,$00,$00,$00,$00,$3F,$80
 $7168 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7170 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7178 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7180 DEFB $00,$00,$00,$00,$00,$00,$01,$E0
 $7188 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7190 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7198 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $71F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7200 DEFB $00,$00,$00,$00
 $7204 DEFB $00
 $7205 DEFB $00,$1F
 $7207 DEFB $FF
 $7208 DEFB $F8,$00,$00,$00,$00,$00,$01,$FF
 $7210 DEFB $F8,$00,$00,$00,$00,$00,$00,$00
 $7218 DEFB $01,$FF,$FF,$FF,$FF,$00,$00,$00
 $7220 DEFB $00,$00,$00,$00,$00,$00,$3F,$FF
 $7228 DEFB $C0,$00,$00,$00,$00,$00,$00,$20
 $7230 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7238 DEFB $01
 $7239 DEFW $00C0
 $723B DEFB $3F,$F0,$00,$02,$00
 $7240 DEFW $0000
 $7242 DEFB $00,$00,$00,$00,$3F,$80,$00,$00
 $724A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7252 DEFB $00,$00,$00,$00,$00,$00
 $7258 DEFB $00,$00,$00,$00,$00,$00,$70,$00
 $7260 DEFB $00,$00,$00,$00,$00,$00,$3F,$00
 $7268 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7280 DEFB $00,$00,$00,$00,$00,$00,$00,$C0
 $7288 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72B0 DEFB $00,$00
 $72B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7302 DEFB $00,$00,$00,$00,$1F,$FF,$F8,$00
 $730A DEFB $00,$00,$00,$00,$01,$FF,$F8,$00
 $7312 DEFB $00,$00,$00,$00,$00,$00,$01,$FF
 $731A DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00
 $7322 DEFB $00,$00,$00,$00,$1F,$FC,$80,$00
 $732A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7332 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $733A DEFB $00,$3F,$E0,$00,$02,$00,$00,$00
 $7342 DEFB $00,$00,$00,$00,$3F,$C0,$00,$00
 $734A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7352 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $735A DEFB $00,$00,$00,$00,$E0,$00,$00,$00
 $7362 DEFB $00,$00,$00,$00,$3F,$00,$00,$00
 $736A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7372 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $737A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7382 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $738A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7392 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $739A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $73FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7402 DEFB $00,$00,$00,$00,$1F,$FF,$F8,$00
 $740A DEFB $00,$00,$00,$00,$00,$FF,$F0,$00
 $7412 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $741A DEFB $FF,$FF,$FE,$00,$00,$00,$00,$00
 $7422 DEFB $00,$00,$00,$00,$1F,$FE,$00,$00
 $742A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7432 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $743A DEFB $00,$3F,$E0,$00,$03,$00,$00,$00
 $7442 DEFB $00,$00,$00,$00,$3F,$C0,$00,$00
 $744A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7452 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $745A DEFB $00,$00,$00,$01,$C0,$00,$00,$00
 $7462 DEFB $00,$00,$00,$00,$3E,$00,$00,$00
 $746A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7472 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $747A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7482 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $748A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7492 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $749A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7502 DEFB $00,$00,$00,$00,$1F,$FF,$F0,$00
 $750A DEFB $00,$00,$00,$00,$00,$FF,$E0,$00
 $7512 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $751A DEFB $FF,$FF,$FE,$00,$00,$00,$00,$00
 $7522 DEFB $00,$00,$00,$00,$3F,$FE,$00,$00
 $752A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7532 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $753A DEFB $00,$1F,$C0,$00,$03,$80,$00,$00
 $7542 DEFB $00,$00,$00,$00,$1F,$80,$00,$00
 $754A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7552 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $755A DEFB $00,$00,$00,$03,$80,$00,$00,$00
 $7562 DEFB $00,$00,$00,$00,$1E,$02,$80,$00
 $756A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7572 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $757A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7582 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $758A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7592 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $759A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $75FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7602 DEFB $00,$00,$00,$00,$3F,$FF,$F0,$00
 $760A DEFB $00,$00,$00,$00,$00,$FF,$E0,$00
 $7612 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $761A DEFB $FF,$FF,$FE,$00,$00,$00,$00,$00
 $7622 DEFB $00,$00,$00,$00,$3F,$FE,$00,$00
 $762A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7632 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $763A DEFB $00,$03,$80,$00,$03,$00,$00,$00
 $7642 DEFB $00,$00,$00,$00,$1F,$80,$00,$00
 $764A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7652 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $765A DEFB $00,$00,$00,$07,$80,$00,$00,$00
 $7662 DEFB $00,$00,$00,$00,$1E,$00,$00,$00
 $766A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7672 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $767A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7682 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $768A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7692 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $769A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $76FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7702 DEFB $00,$00,$00,$00,$3F,$FF,$E0,$00
 $770A DEFB $00,$00,$00,$00,$00,$7F,$C0,$00
 $7712 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $771A DEFB $87,$FF,$FC,$00,$00,$00,$00,$00
 $7722 DEFB $00,$00,$00,$00,$3F,$FC,$00,$00
 $772A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7732 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $773A DEFB $00,$00,$00,$00,$06,$00,$00,$00
 $7742 DEFB $00,$00,$00,$00,$3F,$00,$00,$00
 $774A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7752 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $775A DEFB $00,$00,$00,$01,$00,$00,$00,$00
 $7762 DEFB $00,$00,$00,$00,$1F,$00,$00,$00
 $776A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7772 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $777A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7782 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $778A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7792 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $779A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77FA DEFB $00,$00,$00,$00,$00,$00

; Unused
u$7800 DEFB $20

; Game status buffer entry at 7801
g$7801 DEFW $4646

; Game status buffer entry at 7803
g$7803 DEFB $46
 $7804 DEFB $46

; Current Location Co-Ordinates
@label=CurrentLocationCoOrdinates
g$7805 DEFB $48,$0D

; Unused
u$7807 DEFM "DE"

; Game status buffer entry at 7809
g$7809 DEFB $46
 $780A DEFB $57
 $780B DEFB $20,$44,$46,$46,$46,$48

; Temporary Screen Location
@label=TemporaryScreenLocation
g$7811 DEFB $0D

; Game status buffer entry at 7812
g$7812 DEFB $44

; Game status buffer entry at 7813
g$7813 DEFW $4645

; Game status buffer entry at 7815
g$7815 DEFB $57
 $7816 DEFB $20,$46,$46,$46,$46,$48,$3B,$36
 $781E DEFB $45

; Game status buffer entry at 781F
g$781F DEFB $0D

; Ticker Buffer
@label=Buffer_Ticker
g$7820 DEFB $44,$45,$46,$57,$20,$46,$43,$46
 $7828 DEFB $45,$48,$0D,$44,$45,$46,$57,$20
 $7830 DEFB $43,$30,$46,$43,$48,$0D,$44,$45
 $7838 DEFB $46,$57,$20,$43,$30,$43,$30,$48
 $7840 DEFB $0D,$44,$45,$46,$57,$20,$32,$30
 $7848 DEFB $48,$3B,$36,$46,$0D,$44,$45,$46
 $7850 DEFB $57,$20,$31,$43,$31,$30,$48,$0D
 $7858 DEFB $44,$45,$46,$57,$20,$38,$33,$43
 $7860 DEFB $48,$0D,$44,$45,$46,$57,$20,$33
 $7868 DEFB $30,$32,$30,$48,$0D,$44,$45,$46
 $7870 DEFB $57,$20,$46,$46,$46,$46,$48,$3B
 $7878 DEFB $37,$30,$0D,$44,$45,$46,$57,$20
 $7880 DEFB $37,$46,$46,$46,$48,$0D,$44,$45
 $7888 DEFB $46,$57,$20,$37,$46,$37,$46,$48
 $7890 DEFB $0D,$44,$45,$46,$57,$20,$33,$46
 $7898 DEFB $33,$46,$48,$0D,$44,$45,$46,$57
 $78A0 DEFB $20,$46,$46,$46,$46,$48,$3B,$37
 $78A8 DEFB $31,$0D,$44,$45,$46,$57,$20,$46
 $78B0 DEFB $45,$46,$45,$48,$0D,$44,$45,$46
 $78B8 DEFB $57,$20,$46,$43,$46,$43,$48,$0D

; Data block at 78C0
b$78C0 DEFB $44,$45,$46,$57,$20,$46,$38,$46
 $78C8 DEFB $43,$48,$0D,$44,$45,$46,$57,$20
 $78D0 DEFB $31,$30,$48,$3B,$37,$32,$0D,$44
 $78D8 DEFB $45,$46,$53,$20,$36,$0D,$44,$45
 $78E0 DEFB $46,$57,$20,$37,$30,$37,$48,$3B
 $78E8 DEFB $37,$33,$0D,$44,$45,$46,$57,$20
 $78F0 DEFB $33,$30,$37,$48,$0D,$44,$45,$46
 $78F8 DEFB $57,$20,$31,$30,$30,$48
 $78FE DEFB $0D,$44,$45,$46,$57,$20,$31,$30
 $7906 DEFB $31,$48,$0D,$44,$45,$46,$57,$20
 $790E DEFB $46,$30,$46,$30,$48,$3B,$37,$34
 $7916 DEFB $0D,$44,$45,$46,$57,$20,$45,$30
 $791E DEFB $46,$30,$48,$0D,$44,$45,$46,$57
 $7926 DEFB $20,$39,$46,$30,$46,$48,$0D,$44
 $792E DEFB $45,$46,$57,$20,$46,$46,$46,$46
 $7936 DEFB $48,$0D,$44,$45,$46,$57,$20,$30
 $793E DEFB $48,$3B,$37,$35,$0D,$44,$45,$46
 $7946 DEFB $57,$20,$36,$30,$30,$31,$48,$0D
 $794E DEFB $44,$45,$46,$57,$20,$46,$30,$45
 $7956 DEFB $30,$48,$0D,$44,$45,$46,$57,$20
 $795E DEFB $46,$30,$45,$30,$48,$0D,$44,$45
 $7966 DEFB $46,$57,$20,$39,$45,$39,$43,$48
 $796E DEFB $3B,$37,$36,$0D,$44,$45,$46,$57
 $7976 DEFB $20,$38,$30,$45,$48,$0D,$44,$45
 $797E DEFB $46,$53,$20,$34,$0D,$44,$45,$46
 $7986 DEFB $57,$20,$46,$46,$46,$46,$48,$3B
 $798E DEFB $37,$37,$0D,$44,$45,$46,$57,$20
 $7996 DEFB $37,$46,$46,$46,$48,$0D,$44,$45
 $799E DEFB $46,$57,$20,$31,$30,$31,$48,$0D
 $79A6 DEFB $44,$45,$46,$57,$20,$31,$30,$31
 $79AE DEFB $48,$0D,$44,$45,$46,$57,$20,$38
 $79B6 DEFB $33,$43,$37,$48,$3B,$37,$38,$0D
 $79BE DEFB $44,$45,$46,$57,$20,$45,$33,$38
 $79C6 DEFB $33,$48,$0D,$44,$45,$46,$57,$20
 $79CE DEFB $46,$46,$46,$46,$48,$0D,$44,$45
 $79D6 DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $79DE DEFB $0D,$44,$45,$46,$57,$20,$38,$33
 $79E6 DEFB $39,$42,$48,$3B,$37,$39,$0D,$44
 $79EE DEFB $45,$46,$57,$20,$46,$30,$46,$30
 $79F6 DEFB $48,$0D,$44,$45,$46,$57,$20,$45
 $79FE DEFB $30,$45,$30,$48,$0D,$44,$45,$46
 $7A06 DEFB $57,$20,$46,$30,$46,$30,$48,$0D
 $7A0E DEFB $44,$45,$46,$57,$20,$43,$30,$38
 $7A16 DEFB $30,$48,$3B,$37,$41,$0D,$44,$45
 $7A1E DEFB $46,$57,$20,$45,$30,$43,$30,$48
 $7A26 DEFB $0D,$44,$45,$46,$57,$20,$43,$37
 $7A2E DEFB $45,$30,$48,$0D,$44,$45,$46,$57
 $7A36 DEFB $20,$38,$30,$30,$48,$0D,$44,$45
 $7A3E DEFB $46,$57,$20,$33,$30,$33,$30,$48
 $7A46 DEFB $3B,$37,$42,$0D,$44,$45,$46,$57
 $7A4E DEFB $20,$37,$30,$33,$30,$48,$0D,$44
 $7A56 DEFB $45,$46,$57,$20,$45,$30,$46,$30
 $7A5E DEFB $48,$0D,$44,$45,$46,$57,$20,$30
 $7A66 DEFB $48,$0D,$44,$45,$46,$57,$20,$46
 $7A6E DEFB $31,$46,$48,$3B,$37,$43,$0D,$44
 $7A76 DEFB $45,$46,$57,$20,$35,$30,$46,$48
 $7A7E DEFB $0D,$44,$45,$46,$57,$20,$32,$30
 $7A86 DEFB $36,$48,$0D,$44,$45,$46,$57,$20
 $7A8E DEFB $37,$30,$32,$48,$0D,$44,$45,$46
 $7A96 DEFB $57,$20,$46,$46,$46,$46,$48,$3B
 $7A9E DEFB $37,$44,$0D,$44,$45,$46,$57,$20
 $7AA6 DEFB $46,$46,$46,$46,$48,$0D,$44,$45
 $7AAE DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $7AB6 DEFB $0D,$44,$45,$46,$57,$20,$33,$46
 $7ABE DEFB $37,$46,$48,$0D,$44,$45,$46,$57
 $7AC6 DEFB $20,$46,$46,$46,$46,$48,$3B,$37
 $7ACE DEFB $45,$0D,$44,$45,$46,$57,$20,$46
 $7AD6 DEFB $46,$46,$46,$48,$0D,$44,$45,$46
 $7ADE DEFB $57,$20,$46,$38,$46,$46,$48,$0D
 $7AE6 DEFB $44,$45,$46,$57,$20,$46,$30,$46
 $7AEE DEFB $30,$48,$0D,$44,$45,$46,$57,$20
 $7AF6 DEFB $46,$46,$46,$46,$48,$3B,$37,$46
 $7AFE DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7B06 DEFB $46,$46,$48,$0D,$44,$45,$46,$57
 $7B0E DEFB $20,$32,$30,$45,$31,$48,$0D,$44
 $7B16 DEFB $45,$46,$57,$20,$30,$48,$0D,$44
 $7B1E DEFB $45,$46,$57,$20,$43,$30,$45,$30
 $7B26 DEFB $48,$3B,$38,$30,$0D,$44,$45,$46
 $7B2E DEFB $57,$20,$43,$30,$43,$30,$48,$0D
 $7B36 DEFB $44,$45,$46,$57,$20,$43,$30,$43
 $7B3E DEFB $30,$48,$0D,$44,$45,$46,$57,$20
 $7B46 DEFB $43,$30,$43,$30,$48,$0D,$44,$45
 $7B4E DEFB $46,$57,$20,$37,$30,$37,$48,$3B
 $7B56 DEFB $38,$31,$0D,$44,$45,$46,$57,$20
 $7B5E DEFB $46,$30,$37,$48,$0D,$44,$45,$46
 $7B66 DEFB $57,$20,$33,$46,$31,$46,$48,$0D
 $7B6E DEFB $44,$45,$46,$57,$20,$46,$46,$37
 $7B76 DEFB $46,$48,$0D,$44,$45,$46,$57,$20
 $7B7E DEFB $31,$46,$31,$46,$48,$3B,$38,$32
 $7B86 DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7B8E DEFB $46,$46,$48,$0D,$44,$45,$46,$57
 $7B96 DEFB $20,$46,$46,$46,$46,$48,$0D,$44
 $7B9E DEFB $45,$46,$57,$20,$46,$46,$46,$46
 $7BA6 DEFB $48,$0D,$44,$45,$46,$57,$20,$46
 $7BAE DEFB $33,$30,$31,$48,$3B,$38,$33,$0D
 $7BB6 DEFB $44,$45,$46,$57,$20,$46,$46,$46
 $7BBE DEFB $46,$48,$0D,$44,$45,$46,$57,$20
 $7BC6 DEFB $46,$39,$46,$42,$48,$0D,$44,$45
 $7BCE DEFB $46,$57,$20,$46,$43,$46,$43,$48
 $7BD6 DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7BDE DEFB $46,$46,$48,$3B,$38,$34,$0D,$44
 $7BE6 DEFB $45,$46,$57,$20,$39,$46,$46,$46
 $7BEE DEFB $48,$0D,$44,$45,$46,$57,$20,$45
 $7BF6 DEFB $37,$38,$46,$48,$0D,$44,$45,$46
 $7BFE DEFB $57,$20,$46,$31,$46,$30,$48,$0D
 $7C06 DEFB $44,$45,$46,$57,$20,$46,$46,$46
 $7C0E DEFB $46,$48,$3B,$38,$35,$0D,$44,$45
 $7C16 DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $7C1E DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7C26 DEFB $46,$46,$48,$0D,$44,$45,$46,$57
 $7C2E DEFB $20,$33,$37,$46,$48,$0D,$44,$45
 $7C36 DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $7C3E DEFB $3B,$38,$36,$0D,$44,$45,$46,$57
 $7C46 DEFB $20,$46,$46,$46,$46,$48,$0D,$44
 $7C4E DEFB $45,$46,$57,$20,$46,$46,$46,$46
 $7C56 DEFB $48,$0D,$44,$45,$46,$57,$20,$37
 $7C5E DEFB $46,$46,$46,$48,$0D,$44,$45,$46
 $7C66 DEFB $57,$20,$46,$38,$46,$38,$48,$3B
 $7C6E DEFB $38,$37,$0D,$44,$45,$46,$57,$20
 $7C76 DEFB $46,$38,$46,$38,$48,$0D,$44,$45
 $7C7E DEFB $46,$57,$20,$46,$30,$46,$38,$48
 $7C86 DEFB $0D,$44,$45,$46,$57,$20,$46,$34
 $7C8E DEFB $46,$30,$48,$0D,$44,$45,$46,$57
 $7C96 DEFB $20,$38,$48,$3B,$38,$38,$0D,$44
 $7C9E DEFB $45,$46,$53,$20,$36,$0D,$44,$45
 $7CA6 DEFB $46,$57,$20,$31,$48,$3B,$38,$39
 $7CAE DEFB $0D,$44,$45,$46,$53,$20,$36,$0D
 $7CB6 DEFB $44,$45,$46,$57,$20,$39,$46,$42
 $7CBE DEFB $46,$48,$3B,$38,$41,$0D,$44,$45
 $7CC6 DEFB $46,$57,$20,$46,$35,$46,$48,$0D
 $7CCE DEFB $44,$45,$46,$57,$20,$37,$30,$37
 $7CD6 DEFB $48,$0D,$44,$45,$46,$57,$20,$31
 $7CDE DEFB $30,$37,$48,$0D,$44,$45,$46,$57
 $7CE6 DEFB $20,$46,$30,$46,$30,$48,$3B,$38
 $7CEE DEFB $42,$0D,$44,$45,$46,$57,$20,$46
 $7CF6 DEFB $30,$46,$30,$48,$0D,$44,$45,$46
 $7CFE DEFB $57,$20,$46,$30,$46,$30,$48,$0D
 $7D06 DEFB $44,$45,$46,$57,$20,$46,$38,$46
 $7D0E DEFB $38,$48,$0D,$44,$45,$46,$57,$20
 $7D16 DEFB $30,$48,$3B,$38,$43,$0D,$44,$45
 $7D1E DEFB $46,$57,$20,$31,$30,$30,$48,$0D
 $7D26 DEFB $44,$45,$46,$57,$20,$37,$30,$31
 $7D2E DEFB $30,$48,$0D,$44,$45,$46,$57,$20
 $7D36 DEFB $46,$30,$37,$30,$48,$0D,$44,$45
 $7D3E DEFB $46,$57,$20,$34,$30,$48,$3B,$38
 $7D46 DEFB $44,$0D,$44,$45,$46,$57,$20,$45
 $7D4E DEFB $30,$30,$30,$48,$0D,$44,$45,$46
 $7D56 DEFB $57,$20,$31,$45,$33,$30,$48,$0D
 $7D5E DEFB $44,$45,$46,$57,$20,$31,$30,$43
 $7D66 DEFB $48,$0D,$44,$45,$46,$53,$20,$36
 $7D6E DEFB $3B,$38,$45,$0D,$44,$45,$46,$57
 $7D76 DEFB $20,$46,$30,$45,$30,$48,$0D,$44
 $7D7E DEFB $45,$46,$57,$20,$30,$48,$3B,$38
 $7D86 DEFB $46,$0D,$44,$45,$46,$57,$20,$31
 $7D8E DEFB $30,$31,$48,$0D,$44,$45,$46,$57
 $7D96 DEFB $20,$31,$30,$31,$48,$0D,$44,$45
 $7D9E DEFB $46,$57,$20,$31,$30,$31,$48,$0D
 $7DA6 DEFB $44,$45,$46,$57,$20,$46,$45,$46
 $7DAE DEFB $45,$48,$3B,$39,$30,$0D,$44,$45
 $7DB6 DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $7DBE DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7DC6 DEFB $46,$46,$48,$0D,$44,$45,$46,$57
 $7DCE DEFB $20,$46,$46,$46,$46,$48,$0D,$44
 $7DD6 DEFB $45,$46,$57,$20,$37,$46,$37,$46
 $7DDE DEFB $48,$3B,$39,$31,$0D,$44,$45,$46
 $7DE6 DEFB $57,$20,$42,$46,$33,$46,$48,$0D
 $7DEE DEFB $44,$45,$46,$57,$20,$38,$46,$39
 $7DF6 DEFB $46,$48,$0D,$44,$45,$46,$57,$20
 $7DFE DEFB $43,$37
 $7E00 DEFB $38,$46,$48,$0D,$44,$45,$46,$57
 $7E08 DEFB $20,$46,$46,$46,$31,$48,$3B,$39
 $7E10 DEFB $32,$0D,$44,$45,$46,$57,$20,$46
 $7E18 DEFB $46,$46,$46,$48,$0D,$44,$45,$46
 $7E20 DEFB $57,$20,$46,$46,$46,$46,$48,$0D
 $7E28 DEFB $44,$45,$46,$57,$20,$46,$46,$46
 $7E30 DEFB $46,$48,$0D,$44,$45,$46,$57,$20
 $7E38 DEFB $45,$30,$38,$30,$48,$3B,$39,$33
 $7E40 DEFB $0D,$44,$45,$46,$57,$20,$45,$30
 $7E48 DEFB $45,$30,$48,$0D,$44,$45,$46,$57
 $7E50 DEFB $20,$43,$30,$43,$30,$48,$0D,$44
 $7E58 DEFB $45,$46,$57,$20,$38,$30,$48,$0D
 $7E60 DEFB $44,$45,$46,$57,$20,$31,$46,$33
 $7E68 DEFB $46,$48,$3B,$39,$34,$0D,$44,$45
 $7E70 DEFB $46,$57,$20,$31,$46,$31,$46,$48
 $7E78 DEFB $0D,$44,$45,$46,$57,$20,$33,$30
 $7E80 DEFB $33,$48,$0D,$44,$45,$46,$57,$20
 $7E88 DEFB $33,$30,$33,$48,$0D,$44,$45,$46
 $7E90 DEFB $57,$20,$46,$46,$46,$46,$48,$3B
 $7E98 DEFB $39,$35,$0D,$44,$45,$46,$57,$20
 $7EA0 DEFB $46,$46,$46,$46,$48,$0D,$44,$45
 $7EA8 DEFB $46,$57,$20,$46,$46,$46,$46,$48
 $7EB0 DEFB $0D,$44,$45,$46,$57,$20,$46,$43
 $7EB8 DEFB $46,$45,$48,$0D,$44,$45,$46,$57
 $7EC0 DEFB $20,$46,$46,$46,$46,$48,$3B,$39
 $7EC8 DEFB $36,$0D,$44,$45,$46,$57,$20,$43
 $7ED0 DEFB $33,$46,$33,$48,$0D,$44,$45,$46
 $7ED8 DEFB $57,$20,$31,$38,$31,$48,$0D,$44
 $7EE0 DEFB $45,$46,$57,$20,$31,$30,$31,$48
 $7EE8 DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7EF0 DEFB $46,$46,$48,$3B,$39,$37,$0D,$44
 $7EF8 DEFB $45,$46,$57,$20,$38,$38,$46,$46
 $7F00 DEFB $48,$0D,$44,$45,$46,$57,$20,$38
 $7F08 DEFB $38,$38,$30,$48,$0D,$44,$45,$46
 $7F10 DEFB $57,$20,$43,$30,$38,$30,$48,$0D
 $7F18 DEFB $44,$45,$46,$57,$20,$43,$34,$45
 $7F20 DEFB $34,$48,$3B,$39,$38,$0D,$44,$45
 $7F28 DEFB $46,$53,$20,$34,$0D,$44,$45,$46
 $7F30 DEFB $57,$20,$33,$30,$33,$48,$0D,$44
 $7F38 DEFB $45,$46,$57,$20,$37,$46,$46,$46
 $7F40 DEFB $48,$3B,$39,$39,$0D,$44,$45,$46
 $7F48 DEFB $57,$20,$31,$31,$42,$48,$0D,$44
 $7F50 DEFB $45,$46,$53,$20,$34,$0D,$44,$45
 $7F58 DEFB $46,$57,$20,$45,$30,$45,$30,$48
 $7F60 DEFB $3B,$39,$41,$0D,$44,$45,$46,$57
 $7F68 DEFB $20,$46,$45,$46,$43,$48,$0D,$44
 $7F70 DEFB $45,$46,$57,$20,$45,$33,$45,$48
 $7F78 DEFB $0D,$44,$45,$46,$57,$20,$46,$30
 $7F80 DEFB $45,$48,$0D,$44,$45,$46,$57,$20
 $7F88 DEFB $38,$48,$3B,$39,$42,$0D,$44,$45
 $7F90 DEFB $46,$53,$20,$34,$0D,$44,$45,$46
 $7F98 DEFB $57,$20,$37,$30,$30,$48,$0D,$44
 $7FA0 DEFB $45,$46,$57,$20,$34,$48,$3B,$39
 $7FA8 DEFB $43,$0D,$44,$45,$46,$53,$20,$34
 $7FB0 DEFB $0D,$44,$45,$46,$57,$20,$46,$46
 $7FB8 DEFB $45,$30,$48,$0D,$44,$45,$46,$57
 $7FC0 DEFB $20,$30,$48,$3B,$39,$44,$0D,$44
 $7FC8 DEFB $45,$46,$57,$20,$34,$30,$48,$0D
 $7FD0 DEFB $44,$45,$46,$53,$20,$34,$0D,$44
 $7FD8 DEFB $45,$46,$57,$20,$31,$30,$31,$48
 $7FE0 DEFB $3B,$39,$45,$0D,$44,$45,$46,$57
 $7FE8 DEFB $20,$31,$30,$31,$48,$0D,$44,$45
 $7FF0 DEFB $46,$57,$20,$31,$48,$0D,$44,$45
 $7FF8 DEFB $46,$57,$20,$30,$48,$0D,$44,$45
 $8000 DEFB $CD,$00,$00

; Game Loop
;
; Used by the routine at #R$5C92.
@label=GameInitialise
c$8003 CALL $8146    ; Call #R$8146.
 $8006 LD HL,$EFFF   ; {Write #N$01 to *#R$EFFF.
 $8009 LD (HL),$01   ; }
; This entry point is used by the routine at #R$813C.
@label=RestartGame
*$800B LD SP,($5C4B) ; #HTML(#REGsp=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C4B.html">VARS</a>.)
; This entry point is used by the routine at #R$883C.
@label=ShowMenu
*$800F CALL $8A61    ; Call #R$8A61.
 $8012 LD HL,($8E84) ; {Write *#R$8E84 to *#R$7805.
 $8015 LD ($7805),HL ; }
 $8018 LD A,$00      ; {Write #N$00 to: #LIST { *#R$EFFA } { *#R$EFFB } LIST#
 $801A LD ($EFFA),A  ;
 $801D LD ($EFFB),A  ; }
 $8020 CALL $83AA    ; Call #R$83AA.
 $8023 CALL $84D5    ; Call #R$84D5.
; This entry point is used by the routine at #R$883C.
@label=NewGame
*$8026 CALL $849D    ; Call #R$849D.
 $8029 CALL $803A    ; Call #R$803A.
; This entry point is used by the routine at #R$883C.
@label=GameLoop
*$802C CALL $8600    ; Call #R$8600.
 $802F CALL $8666    ; Call #R$8666.
 $8032 CALL $8749    ; Call #R$8749.
 $8035 CALL $899C    ; Call #R$899C.
 $8038 JR $802C      ; Jump to #R$802C.

; Initialise Location States
;
; Used by the routine at #R$8003.
;
; .
;
; Start with Madrid, as it's the first location in the table Trashman can
; travel to (London doesn't count, that's the first game!)
@label=Initialise_LocationStates
c$803A LD HL,$8EAA   ; Set a pointer in #REGhl for the first location state:
                     ; #R$8EAA.
 $803D LD DE,$0011   ; Set #N($0011,$04,$04) in #REGde, which is the count of data before
                     ; the location name starts. The location names vary in length but the data for
                     ; them does not.
 $8040 LD B,$0D      ; Set a counter in #REGb of the number of locations which have a
                     ; playable level for Trashman (#N$0D - one less than the total which includes
                     ; London).
@label=Initialise_LocationState
*$8042 LD (HL),$00   ; Mark this location as: "#STATE$00".
; Keep moving forward one byte until the termination bit is found,
; signifying the final character of the location name.
@label=FindEndCharacter_Loop
*$8044 INC HL        ; Increment #REGhl by one.
 $8045 BIT 7,(HL)    ; {Jump to #R$8044 if the terminator bit is not set.
 $8047 JR Z,$8044    ; }
 $8049 ADD HL,DE     ; Move #REGhl to point to the next location state.
 $804A DJNZ $8042    ; Decrease the location counter by one and loop back to #R$8042 until
                     ; all of the location states have been processeed.
 $804C LD A,($EFFB)  ; {Reset all the bits in *#R$EFFB except for the 1UP/ 2UP
 $804F AND %00100000 ; choice.
 $8051 LD ($EFFB),A  ; }
 $8054 RET           ; Return.

; Routine at 8055
;
; Used by the routines at #R$83AA, #R$8479, #R$8519, #R$8548, #R$8666, #R$8749,
; #R$883C, #R$899C and #R$8A84.
c$8055 PUSH BC       ; Stash #REGbc on the stack.
 $8056 CALL $8079    ; Call #R$8079.
 $8059 CALL $81D4    ; Call #R$81D4.
 $805C CALL $813C    ; Call #R$813C.
 $805F LD A,($EFFC)  ; #REGa=*#R$EFFC.
 $8062 AND %00000111 ; Keep only bits 0-2.
 $8064 JR Z,$8072    ; Jump to #R$8072 if the result is zero.
 $8066 CP $04        ; {Jump to #R$8075 if #REGa is not equal to #N$04.
 $8068 JR NZ,$8075   ; }
 $806A LD HL,($7805) ; #REGhl=*#R$7805.
 $806D CALL $8A07    ; Call #R$8A07.
 $8070 JR $8075      ; Jump to #R$8075.
*$8072 CALL $81B3    ; Call #R$81B3.
*$8075 POP BC        ; Restore #REGbc from the stack.
 $8076 DJNZ $8055    ; Decrease counter by one and loop back to #R$8055 until
                     ; counter is zero.
 $8078 RET           ; Return.

; Routine at 8079
;
; Used by the routines at #R$8055 and #R$9270.
c$8079 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow" rel="noopener
                     ; nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $807C LD ($EFFC),A  ; Write #REGa to *#R$EFFC.
 $807F LD E,$10      ; #REGe=#N$10.
 $8081 LD C,A        ; #REGc=#REGa.
 $8082 LD A,($EFFF)  ; #REGa=*#R$EFFF.
 $8085 BIT 1,A       ; Test bit 1 of #REGa.
 $8087 JR NZ,$80D5   ; Jump to #R$80D5 if  is not zero.
 $8089 BIT 0,A       ; Test bit 0 of #REGa.
 $808B JR NZ,$80CB   ; Jump to #R$80CB if  is not zero.
 $808D BIT 2,A       ; Test bit 2 of #REGa.
 $808F JR Z,$8096    ; Jump to #R$8096 if  is zero.
 $8091 LD B,$7F      ; #REGb=#N$7F.
 $8093 JP $811C      ; Jump to #R$811C.
*$8096 BIT 3,A       ; Test bit 3 of #REGa.
 $8098 JR Z,$809F    ; Jump to #R$809F if  is zero.
 $809A LD B,$3F      ; #REGb=#N$3F.
 $809C JP $811C      ; Jump to #R$811C.
*$809F BIT 4,A       ; Test bit 4 of #REGa.
 $80A1 JR Z,$80A7    ; Jump to #R$80A7 if  is zero.
 $80A3 LD A,$C8      ; #REGa=#N$C8.
 $80A5 JR $80C1      ; Jump to #R$80C1.
*$80A7 BIT 5,A       ; Test bit 5 of #REGa.
 $80A9 JR Z,$80AF    ; Jump to #R$80AF if  is zero.
 $80AB LD A,$78      ; #REGa=#N$78.
 $80AD JR $80C1      ; Jump to #R$80C1.
*$80AF BIT 6,A       ; Test bit 6 of #REGa.
 $80B1 JR Z,$80B7    ; Jump to #R$80B7 if  is zero.
 $80B3 LD A,$50      ; #REGa=#N$50.
 $80B5 JR $80C1      ; Jump to #R$80C1.
*$80B7 BIT 7,A       ; Test bit 7 of #REGa.
 $80B9 JR Z,$80BF    ; Jump to #R$80BF if  is zero.
 $80BB LD A,$32      ; #REGa=#N$32.
 $80BD JR $80C1      ; Jump to #R$80C1.
*$80BF HALT          ; Halt operation (suspend CPU until the next interrupt).
 $80C0 RET           ; Return.
*$80C1 LD ($EFFE),A  ; Write #REGa to *#R$EFFE.
 $80C4 LD A,$00      ; {Write #N$00 to *#R$EFFF.
 $80C6 LD ($EFFF),A  ; }
 $80C9 JR $8102      ; Jump to #R$8102.
*$80CB SET 1,A       ; Set bit 1 of #REGa.
 $80CD LD ($EFFF),A  ; Write #REGa to *#R$EFFF.
 $80D0 LD HL,$8FEB   ; #REGhl=#R$8FEB.
 $80D3 JR $80E2      ; Jump to #R$80E2.
*$80D5 LD HL,$EFDD   ; #REGhl=#R$EFDD.
 $80D8 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow" rel="noopener
                     ; nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $80DB CP (HL)       ; Compare #REGa with *#REGhl.
 $80DC JP M,$8102    ; Jump to #R$8102 M.
 $80DF LD HL,($EFDE) ; #REGhl=*#R$EFDE.
*$80E2 LD A,(HL)     ; {Jump to #R$80EE if *#REGhl is not equal to #N$00.
 $80E3 CP $00        ;
 $80E5 JR NZ,$80EE   ; }
 $80E7 LD HL,$EFFF   ; #REGhl=#R$EFFF.
 $80EA LD (HL),$00   ; Write #N$00 to *#REGhl.
 $80EC JR $80BF      ; Jump to #R$80BF.
*$80EE INC HL        ; Increment #REGhl by one.
 $80EF LD B,(HL)     ; #REGb=*#REGhl.
 $80F0 INC HL        ; Increment #REGhl by one.
 $80F1 LD ($EFDE),HL ; Write #REGhl to *#R$EFDE.
 $80F4 LD HL,$EFFE   ; #REGhl=#R$EFFE.
 $80F7 CP (HL)       ; Compare #REGa with *#REGhl.
 $80F8 LD (HL),A     ; Write #REGa to *#REGhl.
 $80F9 JR NZ,$80FD   ; Jump to #R$80FD if #REGa is not zero.
 $80FB LD E,$00      ; #REGe=#N$00.
*$80FD LD A,C        ; #REGa=#REGc.
 $80FE ADD A,B       ; #REGa+=#REGb.
 $80FF LD ($EFDD),A  ; Write #REGa to *#R$EFDD.
*$8102 LD HL,$EFFD   ; #REGhl=#R$EFFD.
*$8105 LD A,($5C78)  ; {#HTML(Return if *<a rel="noopener nofollow"
 $8108 CP C          ; rel="noopener nofollow"
 $8109 RET NZ        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; is not equal to #REGc.)}
 $810A DEC (HL)      ; Decrease *#REGhl by one.
 $810B JR NZ,$8105   ; Jump to #R$8105 if *#REGhl is not zero.
 $810D LD A,($EFFE)  ; {Write *#R$EFFE to *#REGhl.
 $8110 LD (HL),A     ; }
 $8111 LD A,($99CC)  ; #REGa=*#R$99CC.
 $8114 XOR E         ; Flip the bits according to #REGe.
 $8115 LD ($99CC),A  ; Write #REGa to *#R$99CC.
 $8118 OUT ($FE),A   ; OUT #N$FE
 $811A JR $8105      ; Jump to #R$8105.
*$811C AND %11110000 ; Keep only bits 4-7.
 $811E LD ($EFFF),A  ; Write #REGa to *#R$EFFF.
 $8121 LD HL,$EFFD   ; #REGhl=#R$EFFD.
*$8124 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow" rel="noopener
                     ; nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $8127 CP C          ; {Return if #REGa is not equal to #REGc.
 $8128 RET NZ        ; }
 $8129 DEC (HL)      ; Decrease *#REGhl by one.
 $812A JR NZ,$8124   ; Jump to #R$8124 if *#REGhl is not zero.
 $812C CALL $9619    ; Call #R$9619.
 $812F AND B         ; Merge the bits from #REGb.
 $8130 LD (HL),A     ; Write #REGa to *#REGhl.
 $8131 LD A,($99CC)  ; #REGa=*#R$99CC.
 $8134 XOR E         ; Flip the bits according to #REGe.
 $8135 LD ($99CC),A  ; Write #REGa to *#R$99CC.
 $8138 OUT ($FE),A   ; OUT #N$FE
 $813A JR $8124      ; Jump to #R$8124.

; Handler: Debounce Space
;
; Used by the routine at #R$8055.
@label=Handler_DebounceSpace
c$813C LD A,$7F      ; {Read from the keyboard;
 $813E IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#}
 $8140 BIT 0,A       ; {Return if "SPACE" is not being pressed.
 $8142 RET NZ        ; }
 $8143 JP $800B      ; Jump to #R$800B.

; Print World Map
;
; Used by the routines at #R$8003 and #R$883C.
;
; .
;
; #PUSHS #POKES$8C28,$50;$8C29,$4F;$8C2A,$42;$8C2B,$53;$8C2C,$54;$8C2D,$45;$8C2E,$52;$EFF2,$28;$EFF3,$8C
; #UDGTABLE { #SIM(start=$8146,stop=$81AB)#SCR$02(world-map) } UDGTABLE# #PUSHS
@label=Print_WorldMap
c$8146 LD IX,$F000   ; #REGix=#R$F000.
 $814A LD HL,$6000   ; #REGhl=#R$6000.
 $814D LD E,$FF      ; #REGe=#N$FF.
 $814F LD D,$80      ; #REGd=#N$80.
 $8151 LD A,$00      ; #REGa=#N$00.
*$8153 INC IX        ; Increment #REGix by one.
 $8155 LD B,(IX-$01) ; #REGb=*#REGix+#N$FF.
 $8158 INC E         ; Increment #REGe by one.
 $8159 JR Z,$815D    ; Jump to #R$815D if #REGe is zero.
 $815B LD E,$FF      ; #REGe=#N$FF.
*$815D RRC E         ; Rotate #REGe right (with carry).
 $815F RL (HL)       ; Rotate *#REGhl left.
 $8161 DEC B         ; Decrease #REGb by one.
 $8162 SRL D         ; Shift #REGd right.
 $8164 JR Z,$816B    ; Jump to #R$816B if #REGb is zero.
 $8166 CP B          ; Compare #REGa with #REGb.
 $8167 JR NZ,$815D   ; Jump to #R$815D if #REGa is not zero.
 $8169 JR $8153      ; Jump to #R$8153.
*$816B INC HL        ; Increment #REGhl by one.
 $816C LD A,$78      ; #REGa=#N$78.
 $816E CP H          ; Compare #REGa with #REGh.
 $816F JR Z,$8186    ; Jump to #R$8186 if #REGa is zero.
 $8171 LD A,B        ; #REGa=#REGb.
 $8172 CP $08        ; Compare #REGa with #N$08.
 $8174 JR NC,$8180   ; Jump to #R$8180 if #REGa is higher.
 $8176 CP $00        ; Compare #REGa with #N$00.
 $8178 LD D,$80      ; #REGd=#N$80.
 $817A JR Z,$8153    ; Jump to #R$8153 if #REGa is zero.
 $817C LD A,$00      ; #REGa=#N$00.
 $817E JR $815D      ; Jump to #R$815D.
*$8180 LD (HL),E     ; Write #REGe to *#REGhl.
 $8181 SUB $08       ; #REGa-=#N$08.
 $8183 LD B,A        ; #REGb=#REGa.
 $8184 JR $816B      ; Jump to #R$816B.
*$8186 LD HL,$601F   ; #REGhl=#R$6000(#N$601F).
 $8189 LD DE,$0020   ; #REGde=#N($0020,$04,$04).
 $818C LD B,$C0      ; #REGb=#N$C0.
*$818E RES 0,(HL)    ; Reset bit 0 of *#REGhl.
 $8190 ADD HL,DE     ; #REGhl+=#REGde.
 $8191 DJNZ $818E    ; Decrease counter by one and loop back to #R$818E until
                     ; counter is zero.
 $8193 LD HL,$6000   ; #REGhl=#R$6000.
 $8196 LD DE,$4000   ; #REGde=#N($4000,$04,$04).
 $8199 LD BC,$1800   ; #REGbc=#N($1800,$04,$04).
 $819C LDIR          ; LDIR.
 $819E LD HL,$5800   ; #REGhl=#N$5800 (screen buffer location).
 $81A1 LD DE,$5801   ; #REGde=#N$5801 (attribute buffer location).
 $81A4 LD BC,$02FF   ; #REGbc=#N($02FF,$04,$04).
 $81A7 LD (HL),$4E   ; Write #COLOUR$4E to *#REGhl.
 $81A9 LDIR          ; LDIR.
 $81AB LD A,$01      ; #REGa=#N$01.
 $81AD LD ($99CC),A  ; Write #REGa to *#R$99CC.
 $81B0 OUT ($FE),A   ; OUT #N$C9FE
 $81B2 RET           ; Return.

; Flash Location Map Points
;
; Used by the routine at #R$8055.
;
; .
;
; Starting with the first location, London.
@label=FlashLocationMapPoints
c$81B3 LD IX,$8E82    ; #REGix=#R$8E82.
 $81B7 LD B,$0E       ; Set a counter in #REGb for the total number of
                      ; locations (#N$0E).
@label=FlashLocationMapPoints_Loop
*$81B9 PUSH BC        ; Stash the locations count on the stack.
 $81BA LD L,(IX+$02)  ; {Load the map co-ordinates for the current location
 $81BD LD H,(IX+$03)  ; into #REGhl.}
 $81C0 CALL $8A07     ; Call #R$8A07.
 $81C3 LD DE,$0016    ; {Add #N($0016,$04,$04) to #REGix which is a safe place to land to
 $81C6 ADD IX,DE      ; find the next location.}
; All locations end with the string for the location name, so now move
; through the string to find the terminating bit. This is necessary as the
; location names have varying lengths.
@label=CheckTerminator_Loop
*$81C8 BIT 7,(IX+$00) ; Test bit 7 of *#REGix+#N$00.
 $81CC INC IX         ; Increment #REGix by one.
 $81CE JR Z,$81C8     ; Keep jumping back to #R$81C8 until the terminating bit
                      ; 7 is found.
 $81D0 POP BC         ; Restore the locations count from the stack.
 $81D1 DJNZ $81B9     ; Decrease the locations count by one and loop back to #R$81B9 until
                      ; locations have been processed.
 $81D3 RET            ; Return.

; Handler: Ticker
;
; Used by the routine at #R$8055.
;
; .
;
; Example messaging (note, this is two frames at a time - the game is
; smoother - plus, in the game the message starts off-screen). #PUSHS
; #POKES($EFFA,$80);$8C30,$82;$8C31,$8E;$EFF8,$01#SIM(start=$823B,stop=$839E)
; #FOR$01,$50||x|#SIM(start=$8059,stop=$805C)||
; #UDGTABLE {
;   #FOR$01,$FF||x|#SIM(start=$8059,stop=$805C)#SIM(start=$8059,stop=$805C)
;     #SCR$02,$00,$16,$20,$01(*ticker-x)#PLOT(0,0,0)(ticker-x)
;   ||
;   #UDGARRAY#(#ANIMATE$08,$FF(ticker))
; } UDGTABLE# #POPS
@label=Handler_Ticker
c$81D4 LD HL,$EFFB   ; {Return if the ticker is not currently enabled.
 $81D7 BIT 0,(HL)    ;
 $81D9 RET Z         ; }
 $81DA LD HL,$7815   ; #REGhl=#R$7815.
 $81DD DEC (HL)      ; Decrease *#REGhl by one.
 $81DE JR NZ,$8220   ; Jump to #R$8220 if *#REGhl is not zero.
 $81E0 LD (HL),$07   ; Write #N$07 to *#REGhl.
 $81E2 LD HL,$7812   ; #REGhl=#R$7812.
 $81E5 DEC (HL)      ; Decrease *#REGhl by one.
 $81E6 JR NZ,$8207   ; Jump to #R$8207 if *#REGhl is not zero.
 $81E8 LD HL,$EFFB   ; {Jump to #R$81FE if bit 1 of *#R$EFFB is set.
 $81EB BIT 1,(HL)    ;
 $81ED JR NZ,$81FE   ; }
 $81EF LD A,($EFFA)  ; {Jump to #R$81FB if *#R$EFFA is equal to #N$00.
 $81F2 CP $00        ;
 $81F4 JR Z,$81FB    ; }
 $81F6 CALL $823B    ; Call #R$823B.
 $81F9 JR $81D4      ; Jump to #R$81D4.
; The ticker animation is complete, so reset the state flag.
@label=TickerAnimation_Complete
*$81FB RES 0,(HL)    ; Set the ticker bit in *#R$EFFB to "ticker OFF".
 $81FD RET           ; Return.
*$81FE LD A,($781E)  ; #REGa=*#N$781E.
 $8201 CALL $8388    ; Call #R$8388.
 $8204 JP $81D4      ; Jump to #R$81D4.
*$8207 LD HL,($7813) ; #REGhl=*#R$7813.
 $820A INC HL        ; {Increment *#R$7813 by one.
 $820B LD ($7813),HL ; }
 $820E LD L,(HL)     ; #REGl=*#REGhl.
 $820F LD H,$00      ; #REGh=#N$00.
 $8211 ADD HL,HL     ; {#REGhl*=#N$08.
 $8212 ADD HL,HL     ;
 $8213 ADD HL,HL     ; }
 $8214 LD DE,$F740   ; {#REGhl+=#R$F840(#N$F740).
 $8217 ADD HL,DE     ; }
 $8218 LD DE,$7816   ; {Copy #N($0008,$04,$04) bytes from *#REGhl to #N$7816.
 $821B LD BC,$0008   ;
 $821E LDIR          ; }
; Rotate the messaging left across the screen.
*$8220 LD C,$08      ; Set a counter in #REGc for the number of bytes in a
                     ; character (#N$08).
 $8222 LD HL,$7816   ; #REGhl=#N$7816.
 $8225 LD DE,$50DF   ; Set #REGde to the screen buffer location #N$50DF.
@label=TickerRotate_Loop
*$8228 RLC (HL)      ; Rotate *#REGhl left (with carry).
 $822A PUSH DE       ; Stash #REGde on the stack.
 $822B EX DE,HL      ; Exchange the #REGde and #REGhl registers.
; Rotate the current line.
 $822C LD B,$20      ; Set a counter in #REGb for the number of characters in a
                     ; line (#N$20).
@label=TickerRotateLine_Loop
*$822E RL (HL)       ; Rotate *#REGhl left.
 $8230 DEC HL        ; Decrease #REGhl by one.
 $8231 DJNZ $822E    ; Decrease counter by one and loop back to #R$822E until
                     ; counter is zero.
 $8233 POP HL        ; Restore #REGhl from the stack.
 $8234 INC H         ; Increment #REGh by one.
 $8235 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $8236 INC HL        ; Increment #REGhl by one.
 $8237 DEC C         ; Decrease #REGc by one.
 $8238 JR NZ,$8228   ; Jump to #R$8228 if #REGc is not zero.
 $823A RET           ; Return.

; Generate Ticker Messaging
;
; Used by the routines at #R$81D4, #R$8666, #R$8749 and #R$883C.
;
; .
;
; These examples are generated with the location being "London" so
; obviously aren't possible to see in the actual game (given London isn't a
; playable level - that's the first game!)
; .
; Note, this isn't a complete list - as some vary with the bonus points
; messaging:
; #PUSHS #POKES$8C30,$82;$8C31,$8E;$EFF8,$01 #UDGTABLE(default) { =h Bit | =h Message }
; #FOR$01,$07(x,{ #Nx | #TICKERx(ticker-#Nx) })
; UDGTABLE# #POPS
@label=Messaging_GenerateTicker
c$823B CALL $835F     ; Call #R$835F.
; Test if the player has been deported from Russia.
 $823E LD HL,$EFFA    ; {Jump to #R$826F if the player hasn't been "deported
 $8241 BIT 2,(HL)     ; from Russia".
 $8243 JR Z,$826F     ; }
; Player has been deported from Russia, so handle displaying the
; messaging in the ticker.
 $8245 RES 2,(HL)     ; Reset bit 2 ("Deported From Russia") in *#R$EFFA.
 $8247 RES 0,(HL)     ; Reset bit 0 of *#R$EFFA.
; Build the string in the ticker buffer.
 $8249 LD HL,$8CF0    ; {Adds ... "#STR($8CF0)" to the ticker buffer.
 $824C CALL $839F     ; }
 $824F LD A,$5A       ; Set the spacing to #N$5A in #REGa.
 $8251 LD HL,$EFFA    ; {Jump to #R$837F if the player has no bonus points.
 $8254 BIT 1,(HL)     ;
 $8256 JP Z,$837F     ; }
 $8259 RES 1,(HL)     ; Reset bit 1 ("Has Bonus Points?") of *#R$EFFA.
 $825B LD HL,$8D17    ; {Adds ... "#STR($8D17)" to the ticker buffer.
 $825E CALL $839F     ; }
 $8261 CALL $8335     ; Adds the players bonus points to the ticker buffer.
 $8264 LD HL,$8DB1    ; {Adds ... "#STR($8DB1)" to the ticker buffer.
 $8267 CALL $839F     ; }
 $826A LD A,$78       ; {Set the spacing to #N$78 and jump to #R$837F.
 $826C JP $837F       ; }
; Test if the player has been hit by the bull in Madrid.
@label=Ticker_CheckKilledInSpain
*$826F BIT 3,(HL)     ; {Jump to #R$829D if the player has not been hit by the
 $8271 JR Z,$829D     ; bull.}
; Player has been hit by the bull, so handle displaying the
; messaging in the ticker.
 $8273 RES 3,(HL)     ; Reset bit 3 ("Hit By The Bull") of *#R$EFFA.
 $8275 RES 0,(HL)     ; Reset bit 0 of *#R$EFFA.
; Build the string in the ticker buffer.
 $8277 LD HL,$8D30    ; {Adds ... "#STR($8D30)" to the ticker buffer.
 $827A CALL $839F     ; }
 $827D LD A,$55       ; Set the spacing to #N$55 in #REGa.
 $827F LD HL,$EFFA    ; {Jump to #R$837F if the player has no bonus points.
 $8282 BIT 1,(HL)     ;
 $8284 JP Z,$837F     ; }
 $8287 RES 1,(HL)     ; Reset bit 1 ("Has Bonus Points?") of *#R$EFFA.
 $8289 LD HL,$8D55    ; {Adds ... "#STR($8D55)" to the ticker buffer.
 $828C CALL $839F     ; }
 $828F CALL $8335     ; Adds the players bonus points to the ticker buffer.
 $8292 LD HL,$8D5A    ; {Adds ... "#STR($8D5A)" to the ticker buffer.
 $8295 CALL $839F     ; }
 $8298 LD A,$8E       ; {Set the spacing to #N$8E and jump to #R$837F.
 $829A JP $837F       ; }
; Did the player manage to complete the sub-game?
@label=Ticker_CheckSubGameWasSuccess
*$829D BIT 0,(HL)     ; {Jump to #R$82B7 if bit 0 of *#R$EFFA is not set.
 $829F JR Z,$82B7     ; }
 $82A1 RES 0,(HL)     ; Reset bit 0 of *#R$EFFA.
; Build the string in the ticker buffer.
 $82A3 LD HL,$8D8B    ; {Adds ... "#STR($8D8B)" to the ticker buffer.
 $82A6 CALL $839F     ; }
 $82A9 CALL $836E     ; Add the current location name to the ticker buffer.
 $82AC LD HL,$8DA3    ; {Adds ... "#STR($8DA3)" to the ticker buffer.
 $82AF CALL $839F     ; }
 $82B2 LD A,$5A       ; {Set the spacing to #N$5A and jump to #R$837F.
 $82B4 JP $837F       ; }
; As above, but also with bonus points.
@label=Ticker_CheckSubGameWasSuccess_WithBonusPoints
*$82B7 BIT 1,(HL)     ; {Jump to #R$82DA if the player has no bonus points.
 $82B9 JR Z,$82DA     ; }
; Player has completed the sub-game and has bonus points, so handle
; displaying the messaging in the ticker.
 $82BB RES 1,(HL)     ; Reset bit 1 ("Has Bonus Points?") of *#R$EFFA.
; Build the string in the ticker buffer.
 $82BD LD HL,$8D8B    ; {Adds ... "#STR($8D8B)" to the ticker buffer.
 $82C0 CALL $839F     ; }
 $82C3 CALL $836E     ; Add the current location name to the ticker buffer.
 $82C6 LD HL,$8DA5    ; {Adds ... "#STR($8DA5)" to the ticker buffer.
 $82C9 CALL $839F     ; }
 $82CC CALL $8335     ; Add the players bonus points to the ticker buffer.
 $82CF LD HL,$8DB1    ; {Adds ... "#STR($8DB1)" to the ticker buffer.
 $82D2 CALL $839F     ; }
 $82D5 LD A,$6E       ; {Set the spacing to #N$6E and jump to #R$837F.
 $82D7 JP $837F       ; }
; Is the player out of money and stranded in their current location?
@label=Ticker_CheckStranded
*$82DA BIT 4,(HL)     ; {Jump to #R$82F4 if the player is not "stranded"
 $82DC JR Z,$82F4     ; (doesn't have enough money to fly).}
; Player is stranded in their current location, so handle displaying the
; messaging in the ticker.
 $82DE RES 4,(HL)     ; Reset bit 4 ("Stranded") of *#R$EFFA.
; Build the string in the ticker buffer.
 $82E0 LD HL,$8CC3    ; {Adds ... "#STR($8CC3)" to the ticker buffer.
 $82E3 CALL $839F     ; }
 $82E6 CALL $836E     ; Add the current location name to the ticker buffer.
 $82E9 LD HL,$8CD0    ; {Adds ... "#STR($8CD0)" to the ticker buffer.
 $82EC CALL $839F     ; }
 $82EF LD A,$50       ; {Set the spacing to #N$50 and jump to #R$837F.
 $82F1 JP $837F       ; }
; Can the player not afford to fly?
@label=Ticker_CheckAffordToFly
*$82F4 BIT 5,(HL)     ; {Jump to #R$830E if the player can afford to fly to
 $82F6 JR Z,$830E     ; someplace else.}
; The player is broke and can't afford to fly to a new destination, so
; handle displaying this in the ticker.
 $82F8 RES 5,(HL)     ; Reset bit 5 ("Can't Afford To Fly") of *#R$EFFA.
; Build the string in the ticker buffer.
 $82FA LD HL,$8CC3    ; {Adds ... "#STR($8CC3)" to the ticker buffer.
 $82FD CALL $839F     ; }
 $8300 CALL $836E     ; Add the current location name to the ticker buffer.
 $8303 LD HL,$8CDC    ; {Adds ... "#STR($8CDC)" to the ticker buffer.
 $8306 CALL $839F     ; }
 $8309 LD A,$5A       ; {Set the spacing to #N$5A and jump to #R$837F.
 $830B JP $837F       ; }
; Has the player completed ALL the sub-games?
@label=Ticker_CheckGameWasCompleted
*$830E BIT 6,(HL)     ; {Jump to #R$8322 if the player hasn't yet completed all the
 $8310 JR Z,$8322     ; sub-games.}
; Player has completed all the sub-games, so handle displaying the
; messaging in the ticker.
 $8312 RES 6,(HL)     ; Reset bit 6 ("Completed All Locations") of *#R$EFFA.
; Build the string in the ticker buffer.
 $8314 LD HL,$8DBC    ; {Adds ... "#STR($8DBC)" to the ticker buffer.
 $8317 CALL $839F     ; }
 $831A CALL $836E     ; Add the current location name to the ticker buffer.
 $831D LD A,$78       ; {Set the spacing to #N$78 and jump to #R$837F.
 $831F JP $837F       ; }
; Is the player flying somewhere new?
@label=Ticker_CheckFlyingToNewDestination
*$8322 BIT 7,(HL)     ; {Just return if the player is not flying somewhere new, there are no
 $8324 RET Z          ; more conditions covered.}
; Player is flying to a new destination, so handle displaying the
; messaging in the ticker.
 $8325 RES 7,(HL)     ; Reset bit 7 ("Flying To New Destination") of *#R$EFFA.
; Build the string in the ticker buffer.
 $8327 LD HL,$8CBA    ; {Adds ... "#STR($8CBA)" to the ticker buffer.
 $832A CALL $839F     ; }
 $832D CALL $836E     ; Add the current location name to the ticker buffer.
 $8330 LD A,$46       ; {Set the spacing to #N$46 and jump to #R$837F.
 $8332 JP $837F       ; }
; Adds the players bonus points count to the ticker.
@label=AddBonusPointsToTicker
*$8335 LD HL,$EFF8    ; #REGhl=#R$EFF8.
 $8338 LD IX,$EFFB    ; #REGix=#R$EFFB.
 $833C SET 4,(IX+$00) ; Set bit 4 ("Used for printing scores/ stripping off leading
                      ; zeroes") of *#REGix+#N$00.
 $8340 LD C,$02       ; Set a counter in #REGc for the number of digits
                      ; (#N$02).
@label=ProcessBonusPointsDigit_Loop
*$8342 LD B,$02       ; Set a counter in #REGb for the count of how many score digits are
                      ; to be processed in each score byte (#N$02).
@label=ProcessBonusPoints_Loop
*$8344 LD A,$30       ; Load #REGa with ASCII "0" (#N$30).
 $8346 RLD            ; Extract the score digit into the accumulator.
; Don't print any zeros while bit 4 is set, it's only unset when a
; printable digit is "found" (i.e. not a zero). Once it is, then the zero
; characters are set freely (e.g. we won't print 001, but we will print 100).
 $8348 BIT 4,(IX+$00) ; {Jump to #R$8356 if bit 4 of *#REGix+#N$00 is not set.
 $834C JR Z,$8356     ; }
; Strip off leading zeros.
 $834E CP $30         ; {Jump to #R$8358 if the current digit is "0".
 $8350 JR Z,$8358     ; }
; The digit is not a zero, so flag and process.
 $8352 RES 4,(IX+$00) ; Reset bit 4 ("Used for printing scores/ stripping off leading
                      ; zeroes") of *#REGix+#N$00.
@label=WriteDigitToTickerBuffer
*$8356 LD (DE),A      ; Write the digit to the ticker buffer.
 $8357 INC DE         ; Increment the ticker buffer pointer by one.
@label=BonusPointsProcessNextNumber
*$8358 DJNZ $8344     ; Decrease counter by one and loop back to #R$8344 until
                      ; counter is zero.
; The score is evaluated backwards.
 $835A DEC HL         ; Decrease the score pointer by one.
 $835B DEC C          ; Decrease the score digit counter by one.
 $835C JR NZ,$8342    ; Jump to #R$8342 until both digits of the score have
                      ; been processed.
 $835E RET            ; Return.

; Initialise Ticker Buffer
;
; Used by the routine at #R$823B.
;
; .
;
; Adds "#STR($8C99)" into the ticker buffer.
@label=InitialiseTickerBuffer
c$835F LD HL,$8C99   ; #REGhl=#R$8C99.
 $8362 LD DE,$7820   ; #REGde=#R$7820.
 $8365 CALL $839F    ; Call #R$839F.
; Adds the active players name into the ticker buffer.
 $8368 LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $836B JP $839F      ; Jump to #R$839F.

; Add Location To Ticker Buffer
;
; Used by the routine at #R$823B.
@label=AddLocationTickerBuffer
c$836E LD IX,($EFF2) ; #REGix=*#R$EFF2.
 $8372 LD L,(IX+$08) ; {Load the current location pointer to #REGhl.
 $8375 LD H,(IX+$09) ; }
; Add #N($0011,$04,$04) to #REGhl, which is the count of data before the
; location name string starts.
; .
; The location names vary in length but the data for them does not.
 $8378 LD BC,$0011   ; {#REGhl+=#N($0011,$04,$04).
 $837B ADD HL,BC     ; }
 $837C JP $839F      ; Jump to #R$839F.

; Add Spacing To Fill Ticker Buffer
;
; Used by the routine at #R$823B.
;
; A Final position for spacing
; DE Starting address in #R$7820
@label=AddSpacingFillTickerBuffer
c$837F EX DE,HL      ; Exchange the #REGde and #REGhl registers.
@label=AddSpacingFillTickerBuffer_Loop
*$8380 CP L          ; {Jump to #R$8388 if #REGa is equal to #REGl.
 $8381 JR Z,$8388    ; }
 $8383 LD (HL),$20   ; Write an ASCII space (#N$20) to *#REGhl.
 $8385 INC HL        ; Increment #REGhl by one.
 $8386 JR $8380      ; Jump to #R$8380.
; This entry point is used by the routine at #R$81D4.
@label=DoneFillingTickerBuffer
*$8388 LD HL,$7815   ; {Write #N$01 to *#R$7815.
 $838B LD (HL),$01   ; }
 $838D LD ($7812),A  ; {Write the final spacing position to: #LIST { *#R$7812 }
 $8390 LD ($781E),A  ; { *#R$781E } LIST#}
 $8393 LD HL,$781F   ; {Write #R$781F to *#R$7813.
 $8396 LD ($7813),HL ; }
 $8399 LD HL,$EFFB   ; {Set bit 0 ("Ticker On/ Off") of *#R$EFFB to turn the
 $839C SET 0,(HL)    ; ticker on.}
 $839E RET           ; Return.

; Add String To Buffer
;
; Used by the routines at #R$823B, #R$835F and #R$836E.
;
; DE Buffer address
; HL Message string
@label=AddStringToBuffer
c$839F LD A,(HL)     ; Fetch a character from the string and store it in #REGa.
 $83A0 AND %01111111 ; Strip off the termination bit.
 $83A2 LD (DE),A     ; Write the character to the buffer.
 $83A3 BIT 7,(HL)    ; Test if bit 7 of the current character is set.
 $83A5 INC HL        ; Increment the message string pointer by one.
 $83A6 INC DE        ; Increment the buffer pointer by one.
 $83A7 JR Z,$839F    ; Jump to #R$839F until the termination bit is set.
 $83A9 RET           ; Return.

; Game Selection Menu
;
; Used by the routine at #R$8003.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$83AA,stop=$83DF)#SCR$02(main-menu) }
; UDGTABLE#
; #POPS
; .
; Prints "#STR($8B31)".
@label=GameMenu
c$83AA LD HL,$8B31   ; #REGhl=#R$8B31.
 $83AD LD DE,$504B   ; #REGde=#N$504B (screen buffer location).
 $83B0 CALL $8A3D    ; Call #R$8A3D.
 $83B3 LD HL,$506B   ; #REGhl=#N$506B (screen buffer location).
 $83B6 LD B,$0F      ; {#R$8A37 the header with #N$0F character blocks of
 $83B8 CALL $8A37    ; #N$FF.}
; Prints "#STR($8B40)".
 $83BB LD HL,$8B40   ; #REGhl=#R$8B40.
 $83BE LD DE,$5089   ; #REGde=#N$5089 (screen buffer location).
 $83C1 CALL $8A3D    ; Call #R$8A3D.
; Prints "#STR($8B53)".
 $83C4 LD HL,$8B53   ; #REGhl=#R$8B53.
 $83C7 LD DE,$50A9   ; #REGde=#N$50A9 (screen buffer location).
 $83CA CALL $8A3D    ; Call #R$8A3D.
; Prints "#STR($8B66)".
 $83CD LD HL,$8B66   ; #REGhl=#R$8B66.
 $83D0 LD DE,$50C9   ; #REGde=#N$50C9 (screen buffer location).
 $83D3 CALL $8A3D    ; Call #R$8A3D.
; Prints "#STR($8B73)".
 $83D6 LD HL,$8B73   ; #REGhl=#R$8B73.
 $83D9 LD DE,$50E9   ; #REGde=#N$50E9 (screen buffer location).
 $83DC CALL $8A3D    ; Call #R$8A3D.
; Handle retrieving the players input.
@label=GameMenu_InputLoop
*$83DF LD BC,$F7FE   ; {Read from the keyboard;
 $83E2 IN A,(C)      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $83E4 OR %11100000  ; Set bits 5-7 (to fill in the extra bits).
 $83E6 CP $FF        ; {Jump to #R$83F1 if any of the keys have been pressed.
 $83E8 JR NZ,$83F1   ; }
 $83EA LD B,$05      ; {Call #R$8055 with a count of #N$05.
 $83EC CALL $8055    ; }
 $83EF JR $83DF      ; Jump to #R$83DF.
; Process the players input.
@label=GameMenu_HandleInput
*$83F1 CP $FE        ; {Jump to #R$841C if #REGa is equal to #N$FE.
 $83F3 JR Z,$841C    ; }
; Was Kempston joystick selected?
 $83F5 LD HL,$8E55   ; #REGhl=#R$8E55.
 $83F8 CP $FD        ; {Jump to #R$8418 if #REGa is equal to #N$FD.
 $83FA JR Z,$8418    ; }
; Was Interface 2 joystick selected?
 $83FC LD HL,$8E64   ; #REGhl=#R$8E64.
 $83FF CP $FB        ; {Jump to #R$840A if #REGa is equal to #N$FB.
 $8401 JR Z,$840A    ; }
; Was the Cursor joystick selected?
 $8403 LD HL,$8E73   ; #REGhl=#R$8E73.
 $8406 CP $F7        ; {Jump back to #R$83DF if the cursor joystick was not
 $8408 JR NZ,$83DF   ; selected.}
; Self-modifying code. See; #R$85F4.
@label=SetNoOperation
*$840A LD A,$00      ; Write #N$00 (NOP) to *#R$85F4.
@label=SetActiveKeyMap
*$840C LD ($85F4),A  ; Write #REGa to *#R$85F4.
 $840F LD DE,$EFE0   ; {Copy #N($000F,$04,$04) bytes from *#REGhl to *#R$EFE0.
 $8412 LD BC,$000F   ;
 $8415 LDIR          ; }
 $8417 RET           ; Return.
; Self-modifying code. See; #R$85F4.
; .
; Invert the bits in the controls routine.
@label=SetKempstonJoystick
*$8418 LD A,$2F      ; #REGa=#N$2F (CPL) to *#R$85F4.
 $841A JR $840C      ; Jump to #R$840C.
; Self-modifying code. See; #R$85F4.
@label=SetUserDefinedKeys
*$841C LD A,$00      ; {Write #N$00 (NOP) to *#R$85F4.
 $841E LD ($85F4),A  ; }
 $8421 CALL $8A71    ; Call #R$8A71.
; Prints "#STR($8B88)".
 $8424 LD HL,$8B88   ; #REGhl=#R$8B88.
 $8427 LD DE,$50A7   ; #REGde=#N$50A7 (screen buffer location).
 $842A CALL $8A3D    ; Call #R$8A3D.
; Cycle through each key/ key messaging to collect the user input:
; .
; Using #FOREACH($8B96,$8B9F,$8BA8,$8BB1,$8BBA)||n|"#STR(n,$01)"|, | and ||
; strings.
 $842D LD HL,$8B96   ; #REGhl=#R$8B96.
 $8430 LD B,$05      ; Store a counter in #REGb of #N$05 for how many strings
                     ; to print.
 $8432 LD IX,$EFE0   ; #REGix=#R$EFE0.
@label=SetKeys_Loop
*$8436 PUSH BC       ; {Stash the string counter and active keymap position on
 $8437 PUSH IX       ; the stack.}
 $8439 LD DE,$50B5   ; #REGde=#N$50B5 (screen buffer location).
 $843C CALL $8A3D    ; Call #R$8A3D.
 $843F PUSH HL       ; Stash the messaging pointer on the stack.
*$8440 CALL $8479    ; Call #R$8479.
*$8443 LD B,$05      ; {Call #R$8055 with a count of #N$05.
 $8445 CALL $8055    ; }
 $8448 LD BC,$FEFE   ; {Read from the keyboard;
*$844B IN A,(C)      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $844D OR %11100000  ; Set bits 5-7 (to fill in the extra bits).
 $844F CP $FF        ; {Jump to #R$8459 if any of the keys have been pressed.
 $8451 JR NZ,$8459   ; }
 $8453 RLC B         ; Rotate #REGb left (with carry).
 $8455 JR C,$844B    ; Jump to #R$844B if #REGa is lower.
 $8457 JR $8443      ; Jump to #R$8443.
*$8459 CPL           ; Invert the bits in #REGa.
 $845A AND %00011111 ; Keep only bits 0-4.
 $845C LD E,A        ; #REGe=#REGa.
*$845D RRA           ; RRA.
 $845E JR NC,$845D   ; Jump to #R$845D if #REGa is higher.
 $8460 CP $00        ; {Jump to #R$8440 if #REGa is not equal to #N$00.
 $8462 JR NZ,$8440   ; }
 $8464 POP HL        ; {Restore the messaging pointer and active keymap
 $8465 POP IX        ; position from the stack.}
 $8467 LD (IX+$00),C ; {Write the keymap data to the current active key.
 $846A LD (IX+$01),B ;
 $846D LD (IX+$02),E ; }
 $8470 LD BC,$0003   ; {Add #N($0003,$04,$04) to #REGix to move to the next
 $8473 ADD IX,BC     ; key.}
 $8475 POP BC        ; Restore the string counter from the stack.
 $8476 DJNZ $8436    ; Decrease the string counter by one and loop back to #R$8436 until
                     ; all keys have been collected.
 $8478 RET           ; Return.

; Pause Check
;
; Used by the routines at #R$83AA, #R$8519, #R$8548, #R$8749 and #R$8A84.
@label=PauseCheck
c$8479 LD B,$01      ; {Call #R$8055 with a count of #N$01.
 $847B CALL $8055    ; }
 $847E CALL $848E    ; Call #R$848E.
 $8481 JR C,$8479    ; Jump to #R$8479 if the carry flag is set.
; Repeat of the above.
 $8483 LD B,$01      ; {Call #R$8055 with a count of #N$01.
 $8485 CALL $8055    ; }
 $8488 CALL $848E    ; Call #R$848E.
 $848B JR C,$8479    ; Jump to #R$8479 if the carry flag is set.
 $848D RET           ; Return.
; Check to see if the SHIFT, Z, X, C, and V keys are being held down.
@label=PauseCheck_Input
*$848E LD BC,$FEFE   ; {Read from the keyboard;
@label=PauseCheck_Loop
*$8491 IN A,(C)      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $8493 AND %00011111 ; Keep only bits 0-4.
 $8495 CP $1F        ; {Return if #REGa is not equal to #N$1F (which is ALL of the keys
 $8497 RET NZ        ; above - #EVAL($1F,$02,$08)).}
 $8498 RLC B         ; Rotate #REGb left (with carry).
 $849A JR C,$8491    ; Jump to #R$8491 if #REGb has the carry flag set.
 $849C RET           ; Return.

; Initialise New Game
;
; Used by the routine at #R$8003.
;
; .
;
; Clears the 1UP/ 2UP game data for:
; #LIST
; { #R$8C30 }
; { #R$8C32 }
; { #R$8C35 }
; { #R$8C37 }
; LIST#
@label=Initialise_NewGame
c$849D LD HL,$8C30   ; Start at #R$8C30 (stored in #REGhl), as the player name is retained
                     ; (probably as it's a pain to enter!)
 $84A0 LD B,$08      ; Set a counter in #REGb for #N$08 bytes (#N$02 for location, #N$03
                     ; for score, #N$02 for cash balance and #N$01 for player state).
; Loop through the player variables and reset them all to #N$00#RAW(,) ready
; for the new game.
@label=Clear1UPStats_Loop
*$84A2 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $84A4 INC HL        ; Increment #REGhl by one.
 $84A5 DJNZ $84A2    ; Decrease counter by one and loop back to #R$84A2 until
                     ; counter is zero.
; Set the initial location for when the game starts.
 $84A7 LD DE,$8E82   ; {Write #R$8E82 to *#R$8C30.
 $84AA LD ($8C30),DE ; }
; Set the starting cash amount.
 $84AE LD HL,$0250   ; {Write #N$0250 to *#R$8C35.
 $84B1 LD ($8C35),HL ; }
; Copy all the same 1UP data to 2UP.
 $84B4 LD HL,$8C30   ; {Copy #N($0008,$04,$04) bytes of data from #R$8C30 to
 $84B7 LD DE,$8C40   ; #R$8C40.
 $84BA LD BC,$0008   ;
 $84BD LDIR          ; }
; Set the active player to 1UP.
 $84BF LD HL,$8C28   ; {Write #R$8C28 to *#R$EFF2.
 $84C2 LD ($EFF2),HL ; }
; Set the 1UP default state (and also 2UP if this is a two player game).
 $84C5 LD A,$81      ; {Write #EVAL($81,$02,$08) to *#R$8C37.
 $84C7 LD ($8C37),A  ; }
 $84CA LD HL,$EFFB   ; {Return if this is not a two player game.
 $84CD BIT 5,(HL)    ;
 $84CF RET Z         ; }
 $84D0 INC A         ; {Write #EVAL($82,$02,$08) to *#R$8C47.
 $84D1 LD ($8C47),A  ; }
 $84D4 RET           ; Return.

; Select 1 Or 2 Player Game
;
; Used by the routine at #R$8003.
@label=Select1Or2PlayerGame
c$84D5 CALL $8A71    ; Call #R$8A71.
; Prints "#STR($8BC3)".
 $84D8 LD HL,$8BC3   ; #REGhl=#R$8BC3.
 $84DB LD DE,$504A   ; #REGde=#N$504A (screen buffer location).
 $84DE CALL $8A3D    ; Call #R$8A3D.
 $84E1 LD HL,$506A   ; #REGhl=#N$506A (screen buffer location).
 $84E4 LD B,$10      ; {#R$8A37 the header with #N$10 character blocks of
 $84E6 CALL $8A37    ; #N$FF.}
; Prints "#STR($8BD3)".
 $84E9 LD HL,$8BD3   ; #REGhl=#R$8BD3.
 $84EC LD DE,$50E7   ; #REGde=#N$50E7 (screen buffer location).
 $84EF CALL $8A3D    ; Call #R$8A3D.
; Get the 1UP players name.
 $84F2 LD HL,$8C28   ; {Write #R$8C28 to *#R$EFF2.
 $84F5 LD ($EFF2),HL ; }
 $84F8 CALL $8548    ; Call #R$8548.
 $84FB LD HL,$EFFB   ; {Write #EVAL($00,$02,$08) to *#R$EFFB to set this as a
 $84FE LD (HL),$00   ; 1UP only game.}
; Prints "#STR($8BFE)".
 $8500 LD HL,$8BFE   ; #REGhl=#R$8BFE.
 $8503 LD DE,$5088   ; #REGde=#N$5088 (screen buffer location).
 $8506 CALL $8A3D    ; Call #R$8A3D.
 $8509 CALL $8519    ; Call #R$8519.
 $850C RET NC        ; Return if this is only a 1 player game.
; There is a 2UP player! Get their name and set *#R$EFFB accordingly.
 $850D CALL $85CE    ; Call #R$85CE.
 $8510 CALL $8548    ; Call #R$8548.
 $8513 LD HL,$EFFB   ; {Write #EVAL($20,$02,$08) to *#R$EFFB to set this as a 2
 $8516 LD (HL),$20   ; player game.}
 $8518 RET           ; Return.

; Select Yes/ No
;
; Used by the routines at #R$84D5 and #R$883C.
@label=Select_Yes/No
c$8519 CALL $8479    ; Call #R$8479.
; Set up to print "#STR($8C10,$03)".
@label=Select_No
*$851C LD HL,$8C10   ; #REGhl=#R$8C10.
 $851F CALL $852F    ; Call #R$852F.
 $8522 JR Z,$8526    ; Jump to #R$8526 if "Yes" was selected.
 $8524 AND A         ; Set flags.
 $8525 RET           ; Return.
; Set up to print "#STR($8C23)".
@label=Select_Yes
*$8526 LD HL,$8C23   ; #REGhl=#R$8C23.
 $8529 CALL $852F    ; Call #R$852F.
 $852C JR Z,$851C    ; Jump to #R$851C if "No" was selected".
 $852E RET           ; Return.
; Prints the current choice, and handles the player input.
@label=Select_GetInput
*$852F LD DE,$509B   ; #REGde=#N$509B (screen buffer location).
 $8532 CALL $8A3D    ; Call #R$8A3D.
; Keep looping round until the player either chooses, or changes their
; choice.
@label=Select_Yes/No_Loop
*$8535 LD B,$0A      ; {Call #R$8055 with a count of #N$0A.
 $8537 CALL $8055    ; }
 $853A CALL $85E7    ; Call #R$85E7.
 $853D LD A,E        ; #REGa=the control byte.
 $853E AND %00101000 ; Keep only bits 3 ("down") and 5 ("fire").
 $8540 CP $08        ; {Return if "down" was pressed.
 $8542 RET Z         ; }
 $8543 CP $28        ; {Jump to #R$8535 if there was no input from the player.
 $8545 JR Z,$8535    ; }
 $8547 RET           ; Else, "fire" was pressed - just return.

; Player Name Input
;
; Used by the routine at #R$84D5.
;
; .
;
; Prints "#STR($8BE8,$05)".
@label=PlayerNameInput
c$8548 LD HL,$8BE8   ; #REGhl=#R$8BE8.
 $854B LD DE,$5088   ; #REGde=#N$5088 (screen buffer location).
 $854E CALL $8A3D    ; Call #R$8A3D.
; Prints the name of the current player.
 $8551 LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $8554 LD DE,$5091   ; #REGde=#N$5091 (screen buffer location).
 $8557 CALL $8A3D    ; Call #R$8A3D.
; Draw an underline to show the "cursor".
 $855A LD HL,$50B1   ; #REGhl=#N$50B1 (screen buffer location).
 $855D LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $855F PUSH HL       ; Stash the cursor position on the stack.
 $8560 LD HL,($EFF2) ; {Stash *#R$EFF2 on the stack.
 $8563 PUSH HL       ; }
 $8564 CALL $8479    ; Call #R$8479.
@label=PlayerNameInput_Fire
*$8567 LD B,$0A      ; #REGb=#N$0A.
@label=PlayerNameInput_Loop
*$8569 CALL $8055    ; Call #R$8055.
 $856C CALL $85E7    ; Call #R$85E7.
 $856F LD A,E        ; {Jump to #R$8597 if #REGe is equal to #N$18.
 $8570 CP $18        ;
 $8572 JR Z,$8597    ; }
 $8574 CP $08        ; {Jump to #R$85AB if #REGe is equal to #N$08.
 $8576 JR Z,$85AB    ; }
 $8578 CP $20        ; {Jump to #R$8567 if #REGe is not equal to #N$20.
 $857A JR NZ,$8567   ; }
 $857C POP HL        ; {Restore #REGhl and #REGde from the stack.
 $857D POP DE        ; }
 $857E LD A,$00      ; {Write #N$00 to *#REGde.
 $8580 LD (DE),A     ; }
 $8581 BIT 7,(HL)    ; {Return if bit 7 of *#REGhl is set.
 $8583 RET NZ        ; }
 $8584 INC DE        ; Increment #REGde by one.
 $8585 CPL           ; Invert the bits in #REGa.
 $8586 LD (DE),A     ; Write #REGa to *#REGde.
 $8587 PUSH DE       ; Stash #REGde on the stack.
 $8588 INC HL        ; Increment #REGhl by one.
 $8589 PUSH HL       ; Stash #REGhl on the stack.
 $858A LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $858D LD DE,$5091   ; #REGde=#N$5091 (screen buffer location).
 $8590 CALL $8A3D    ; Call #R$8A3D.
 $8593 LD B,$14      ; #REGb=#N$14.
 $8595 JR $8569      ; Jump to #R$8569.
@label=PlayerNameInput_Up
*$8597 POP HL        ; Restore #REGhl from the stack.
 $8598 LD A,(HL)     ; #REGa=*#REGhl.
 $8599 AND %01111111 ; Keep only bits 0-6.
 $859B CP $20        ; Compare #REGa with #N$20.
 $859D LD C,$41      ; #REGc=#N$41.
 $859F JR Z,$85BD    ; Jump to #R$85BD if #REGa is zero.
 $85A1 CP $5A        ; Compare #REGa with #N$5A.
 $85A3 LD C,$20      ; #REGc=#N$20.
 $85A5 JR Z,$85BD    ; Jump to #R$85BD if #REGa is zero.
 $85A7 INC A         ; Increment #REGa by one.
 $85A8 LD C,A        ; #REGc=#REGa.
 $85A9 JR $85BD      ; Jump to #R$85BD.
@label=PlayerNameInput_Down
*$85AB POP HL        ; Restore #REGhl from the stack.
 $85AC LD A,(HL)     ; #REGa=*#REGhl.
 $85AD AND %01111111 ; Keep only bits 0-6.
 $85AF CP $41        ; Compare #REGa with #N$41.
 $85B1 LD C,$20      ; #REGc=#N$20.
 $85B3 JR Z,$85BD    ; Jump to #R$85BD if #REGa is zero.
 $85B5 CP $20        ; Compare #REGa with #N$20.
 $85B7 LD C,$5A      ; #REGc=#N$5A.
 $85B9 JR Z,$85BD    ; Jump to #R$85BD if #REGa is zero.
 $85BB DEC A         ; Decrease #REGa by one.
 $85BC LD C,A        ; #REGc=#REGa.
*$85BD LD A,$80      ; #REGa=#N$80.
 $85BF AND (HL)      ; Merge the bits from *#REGhl.
 $85C0 OR C          ; Set the bits from #REGc.
 $85C1 LD (HL),A     ; Write #REGa to *#REGhl.
 $85C2 PUSH HL       ; Stash #REGhl on the stack.
 $85C3 LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $85C6 LD DE,$5091   ; #REGde=#N$5091 (screen buffer location).
 $85C9 CALL $8A3D    ; Call #R$8A3D.
 $85CC JR $8567      ; Jump to #R$8567.

; Toggle Players
;
; Used by the routines at #R$84D5 and #R$883C.
;
; .
;
; Switch the active player.
@label=Toggle_Players
c$85CE LD HL,($EFF2) ; Store *#R$EFF2 in #REGhl for the comparison.
; Start with comparing against 1UP.
 $85D1 LD DE,$8C28   ; #REGde=#R$8C28.
 $85D4 AND A         ; {If the currently active player is not 1UP then jump to #R$85DC
 $85D5 SBC HL,DE     ; (which will then set it to 1UP).
 $85D7 JR NZ,$85DC   ; }
; Else, set the active player to 2UP.
 $85D9 LD DE,$8C38   ; #REGde=#R$8C38.
; Sets the active player to *#R$EFF2.
@label=Set_Active_Player
*$85DC LD ($EFF2),DE ; Write #REGde to *#R$EFF2.
 $85E0 LD HL,$000F   ; {Move #REGhl #N($000F,$04,$04) bytes to point to the
 $85E3 ADD HL,DE     ; active player state.}
 $85E4 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $85E6 RET           ; Return.

; Handler: Controls
;
; Used by the routines at #R$8519, #R$8548, #R$8749, #R$8A84 and #R$92C5.
;
; O:E The control code
;
; #TABLE(default,centre,centre,centre)
; { =h Byte | =h Bits | =h Meaning }
; { #N$00 | #EVAL($00,$02,$08) | Right }
; { #N$08 | #EVAL($08,$02,$08) | Down }
; { #N$10 | #EVAL($10,$02,$08) | Left }
; { #N$18 | #EVAL($18,$02,$08) | Up }
; { #N$20 | #EVAL($20,$02,$08) | Fire }
; { #N$28 | #EVAL($28,$02,$08) | No input }
; TABLE#
@label=Handler_Controls
c$85E7 LD E,$00      ; #REGe=#N$00.
 $85E9 LD HL,$EFE0   ; #REGhl=#R$EFE0.
@label=Handler_Controls_Loop
*$85EC LD C,(HL)     ; Load the port into #REGc.
 $85ED INC HL        ; Increment #REGhl by one.
 $85EE LD B,(HL)     ; #REGb=*#REGhl.
 $85EF INC HL        ; Increment #REGhl by one.
 $85F0 LD D,(HL)     ; #REGd=*#REGhl.
 $85F1 INC HL        ; Increment #REGhl by one.
 $85F2 IN A,(C)      ; #REGa=byte from port held by *#REGc.
; Self-modifying code. See; #R$840A, #R$840C and #R$8418.
@label=HandleControlBits
 $85F4 NOP           ; Will be either "no operation" or "invert the bits".
 $85F5 AND D         ; Merge the bits from #REGd.
 $85F6 RET Z         ; Return if the result is zero.
 $85F7 LD A,$08      ; {#REGe+=#N$08.
 $85F9 ADD A,E       ;
 $85FA LD E,A        ; }
 $85FB CP $28        ; {Return if there was no input.
 $85FD RET Z         ; }
 $85FE JR $85EC      ; Jump to #R$85EC.

; Print Header
;
; Used by the routines at #R$8003 and #R$883C.
;
; .
;
; #POPS #SIM(start=$8006,stop=$8020)#POKES($8C33,$10)
; #UDGTABLE { #SIM(start=$8026,stop=$8665)#SCR$02{$00,$00,$200,$20}(game-header) } UDGTABLE#
; .
; Prints "#STR($8C48)".
@label=Print_Header
c$8600 LD HL,$8C48   ; #REGhl=#R$8C48.
 $8603 LD DE,$4001   ; #REGde=#N$4001 (screen buffer location).
 $8606 CALL $8A3D    ; Call #R$8A3D.
; Prints the name of the current player.
 $8609 LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $860C LD DE,$4011   ; #REGde=#N$4011 (screen buffer location).
 $860F CALL $8A3D    ; Call #R$8A3D.
; Prints the players score.
 $8612 LD DE,$0004   ; {#REGhl+=#N($0004,$04,$04).
 $8615 ADD HL,DE     ; }
 $8616 LD DE,$4021   ; #REGde=#N$4021 (screen buffer location).
 $8619 LD BC,$0203   ; #REGbc=#N($0203,$04,$04).
 $861C CALL $9712    ; Call #R$9712.
; Prints "#STR($8C66)".
 $861F LD HL,$8C66   ; #REGhl=#R$8C66.
 $8622 LD DE,$4029   ; #REGde=#N$4029 (screen buffer location).
 $8625 CALL $8A3D    ; Call #R$8A3D.
; Prepare to fetch and print the location name.
 $8628 LD IX,($EFF2) ; #REGix=#R$EFF2.
 $862C LD L,(IX+$08) ; #REGl=*#REGix+#N$08.
 $862F LD H,(IX+$09) ; #REGh=*#REGix+#N$09.
 $8632 INC HL        ; {Increment #REGhl by two.
 $8633 INC HL        ; }
 $8634 LD E,(HL)     ; #REGe=*#REGhl.
 $8635 INC HL        ; Increment #REGhl by one.
 $8636 LD D,(HL)     ; #REGd=*#REGhl.
 $8637 LD ($7805),DE ; Write #REGde to *#R$7805.
; Point #REGhl to the location name, and print it.
 $863B LD DE,$000E   ; {#REGhl+=#N($000E,$04,$04).
 $863E ADD HL,DE     ; }
 $863F LD DE,$402B   ; #REGde=#N$402B (screen buffer location).
 $8642 CALL $8A3D    ; Call #R$8A3D.
 $8645 LD A,$3A      ; #REGa=#N$3A.
 $8647 SUB E         ; #REGa-=#REGe.
 $8648 JR Z,$864F    ; Jump to #R$864F if #REGhl is zero.
 $864A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $864B LD C,A        ; #REGc=#REGa.
 $864C CALL $8A76    ; Call #R$8A76.
; Prints "#STR($8C26)".
@label=Print_CashRemaining
*$864F LD DE,$403A   ; #REGde=#N$403A (screen buffer location).
 $8652 LD HL,$8C26   ; #REGhl=#R$8C26.
 $8655 CALL $8A3D    ; Call #R$8A3D.
; Prints the amount of cash remaining for the active player.
 $8658 LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $865B LD BC,$000E   ; {#REGhl+=#N($000E,$04,$04).
 $865E ADD HL,BC     ; }
 $865F LD BC,$0202   ; #REGbc=#N($0202,$04,$04).
 $8662 CALL $9712    ; Call #R$9712.
 $8665 RET           ; Return.

; Choose Location Or Take Job
;
; Used by the routine at #R$8003.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$8672,stop=$872A)#SCR$02(choose-location) }
; UDGTABLE#
; #POPS
@label=ChooseLocationOrTakeJob
c$8666 LD B,$01       ; {Call #R$8055 with a count of #N$01.
 $8668 CALL $8055     ; }
 $866B LD HL,$EFFB    ; {Jump to #R$8666 if bit 0 ("Ticker On/ Off") of
 $866E BIT 0,(HL)     ; *#R$EFFB is set.
 $8670 JR NZ,$8666    ; }
 $8672 CALL $8A61     ; Call #R$8A61.
; Prints "#STR($8C68)".
 $8675 LD HL,$8C68    ; #REGhl=#R$8C68.
 $8678 LD DE,$504A    ; #REGde=#N$504A (screen buffer location).
 $867B CALL $8A3D     ; Call #R$8A3D.
 $867E LD HL,$506A    ; #REGhl=#N$506A (screen buffer location).
 $8681 LD B,$0B       ; {#R$8A37 the header with #N$0B character blocks of
 $8683 CALL $8A37     ; #N$FF.}
 $8686 LD HL,$5078    ; #REGhl=#N$5078 (screen buffer location).
 $8689 LD B,$04       ; {#R$8A37 the header with #N$04 character blocks of
 $868B CALL $8A37     ; #N$FF.}
 $868E LD A,$80       ; {Initialise *#R$7811 to #N$80.
 $8690 LD ($7811),A   ; }
 $8693 LD IX,($EFF2)  ; {Loads the active players current location into #REGbc (using either
 $8697 LD C,(IX+$08)  ; *#R$8C30 or *#R$8C40).
 $869A LD B,(IX+$09)  ; }
 $869D PUSH BC        ; Stash the active players current location on the stack.
 $869E LD IX,$0002    ; {Move the pointer in #REGix by #N($0002,$04,$04).
 $86A2 ADD IX,BC      ; }
 $86A4 LD L,(IX+$00)  ; {Load the current locations map co-ordinates into
 $86A7 LD H,(IX+$01)  ; #REGhl.}
 $86AA LD ($7805),HL  ; Write the current locations map co-ordinates to
                      ; *#R$7805.
; Prints each destination (and cost) to the screen.
 $86AD LD BC,$0002    ; Set the increment value in #REGbc so #REGix will point to the first
                      ; flight destination from where the player is located.
@label=PrintDestinations_Loop
*$86B0 ADD IX,BC      ; Move the pointer in #REGix by the increment value in
                      ; #REGbc.
 $86B2 LD L,(IX+$00)  ; {Fetch the destination and store it in #REGhl.
 $86B5 LD H,(IX+$01)  ; }
 $86B8 LD A,$60       ; {Jump to #R$86F9 if all destinations have been printed.
 $86BA CP H           ;
 $86BB JR NC,$86F9    ; }
 $86BD LD DE,$0011    ; {Move the pointer in #REGhl to the destination name, the data before
 $86C0 ADD HL,DE      ; the name string is always #N($0011,$04,$04) bytes.}
; Load the screen position for printing into #REGde.
 $86C1 LD D,$50       ; #REGd=#N$50.
 $86C3 LD A,($7811)   ; #REGa=*#R$7811.
 $86C6 OR %00001001   ; Set bits 0 and 3.
 $86C8 LD E,A         ; #REGe=#REGa.
; Print the destination location name to the screen.
 $86C9 CALL $8A3D     ; Call #R$8A3D.
; Calculate where to print the cost.
 $86CC LD A,E         ; #REGa=#REGe.
 $86CD AND %11100000  ; Keep only bits 5-7.
 $86CF OR %00011000   ; Set bits 3-4.
 $86D1 LD E,A         ; #REGe=#REGa.
 $86D2 AND %11100000  ; Keep only bits 5-7.
 $86D4 ADD A,$20      ; #REGa+=#N$20.
 $86D6 LD ($7811),A   ; Write #REGa to *#R$7811.
 $86D9 PUSH IX        ; Stash #REGix on the stack.
 $86DB PUSH IX        ; {#REGhl=#REGix (using the stack).
 $86DD POP HL         ; }
 $86DE INC HL         ; {Move #REGhl to the last digit of the cost, ready for
 $86DF INC HL         ; printing.
 $86E0 INC HL         ; }
 $86E1 LD BC,$0202    ; Set the number format in #REGbc.
 $86E4 CALL $9712     ; Call #R$9712.
 $86E7 POP IX         ; Restore #REGix from the stack.
 $86E9 LD HL,$FFFC    ; {Move the printing position in #REGde back to the start
 $86EC ADD HL,DE      ; of the cost.
 $86ED EX DE,HL       ; }
; Now print "#STR($8C26)".
 $86EE LD HL,$8C26    ; #REGhl=#R$8C26.
 $86F1 CALL $8A3D     ; Call #R$8A3D.
 $86F4 LD BC,$0004    ; Set the increment in #REGbc to point to the next
                      ; destination.
 $86F7 JR $86B0       ; Jump to #R$86B0.
; Now deduce if the current location has a playable game or not.
@label=AllDestinationsPrinted
*$86F9 POP HL         ; Restore the current location into #REGhl (from the
                      ; stack).
 $86FA LD DE,$0010    ; {Move #REGhl to this locations "state" and load the
 $86FD ADD HL,DE      ; state into #REGa.
 $86FE LD A,(HL)      ; }
 $86FF AND A          ; {Jump to #R$870B if *#R$EFF2 is pointing to #R$8C28 (is this player
 $8700 LD HL,($EFF2)  ; one?)
 $8703 LD DE,$8C28    ;
 $8706 SBC HL,DE      ;
 $8708 JR Z,$870B     ; }
; This is player two, so shift the location state right through two
; positions.
 $870A RRCA           ; Set the carry flag if 2UP has completed the sub-game at this
                      ; location.
@label=ShiftLocationState
*$870B RRCA           ; Set the carry flag if 1UP has completed the sub-game at this
                      ; destination).
 $870C LD B,$E0       ; #REGb=#N$E0.
; Decide which message to print; "#STR($8C7A)" or "#STR($8C87)".
 $870E LD HL,$8C7A    ; #REGhl=#R$8C7A.
 $8711 JR C,$8718     ; Jump to #R$8718 if the game at this location has already been
                      ; completed.
 $8713 LD B,$00       ; #REGb=#N$00.
 $8715 LD HL,$8C87    ; #REGhl=#R$8C87.
; Calculate where to print the messaging.
@label=PrintJobMessaging
*$8718 LD A,($7811)   ; #REGa=*#R$7811.
 $871B OR %00001010   ; Set bits 1 and 3.
 $871D LD E,A         ; #REGe=#REGa.
 $871E LD D,$50       ; #REGd=#N$50.
 $8720 AND %11100000  ; Keep only bits 5-7.
 $8722 ADD A,B        ; #REGa+=#REGb.
 $8723 LD ($7811),A   ; Write #REGa to *#R$7811.
 $8726 PUSH BC        ; Stash #REGbc on the stack.
; Print either "#STR($8C7A)" or "#STR($8C87)" to the screen.
 $8727 CALL $8A3D     ; Call #R$8A3D.
 $872A POP AF         ; Restore #REGaf from the stack.
 $872B CP $00         ; {Return if #REGa is equal to #N$00.
 $872D RET Z          ; }
 $872E LD IX,($EFF2)  ; #REGix=#R$EFF2.
 $8732 CALL $894F     ; Call #R$894F.
 $8735 RET NC         ; Return if the player can afford the "cheapest"
                      ; destination.
; The active player can't afford to fly anywhere.
 $8736 RES 7,(IX+$0F) ; Reset bit 7 of *#REGix+#N$0F.
 $873A LD B,$64       ; {Call #R$8055 with a count of #N$64.
 $873C CALL $8055     ; }
 $873F CALL $8A61     ; Call #R$8A61.
 $8742 CALL $823B     ; Call #R$823B.
 $8745 POP HL         ; Restore #REGhl from the stack.
 $8746 JP $8903       ; Jump to #R$8903.

; Handler: Location Choice
;
; Used by the routine at #R$8003.
@label=Handler_LocationChoice
c$8749 LD A,($7811)  ; #REGa=*#R$7811.
 $874C OR %00001000  ; Set bit 3.
 $874E LD C,A        ; #REGc=#REGa.
 $874F LD A,$88      ; {Write #N$88 to *#R$7811.
 $8751 LD ($7811),A  ; }
 $8754 PUSH BC       ; Stash #REGbc on the stack.
 $8755 CALL $8830    ; Call #R$8830.
 $8758 CALL $8479    ; Call #R$8479.
@label=Handler_LocationChoice_InputLoop
*$875B LD B,$0A      ; {Call #R$8055 with a count of #N$0A.
 $875D CALL $8055    ; }
 $8760 CALL $85E7    ; Call #R$85E7.
 $8763 LD A,E        ; {Jump to #R$87F8 if "up" was pressed.
 $8764 CP $18        ;
 $8766 JP Z,$87F8    ; }
 $8769 CP $08        ; {Jump to #R$880F if "down" was pressed.
 $876B JP Z,$880F    ; }
 $876E CP $20        ; {Jump to #R$875B if anything other than "fire" was
 $8770 JR NZ,$875B   ; pressed.}
; Process the player pressing "fire".
 $8772 LD IX,($EFF2) ; #REGix=*#R$EFF2.
 $8776 LD L,(IX+$08) ; {Fetch the players current location and store it in
 $8779 LD H,(IX+$09) ; #REGhl.}
 $877C LD BC,$0004   ; Set the increment between destinations in #REGbc.
 $877F LD A,($7811)  ; {Set the selected position from *#R$7811 in #REGe.
 $8782 LD E,A        ; }
 $8783 LD A,$88      ; Set the position of the top destination in #REGa.
; Keep looping until the selected destination matches #REGa.
@label=CalculateSelectedDestination_Loop
*$8785 ADD HL,BC     ; Move #REGhl to the next destination.
 $8786 CP E          ; {Jump to #R$878D if #REGa is equal to #REGe.
 $8787 JR Z,$878D    ; }
 $8789 ADD A,$20     ; Move down one line.
 $878B JR $8785      ; Jump to #R$8785.
@label=FoundSelectedDestination
*$878D LD C,(HL)     ; #REGc=*#REGhl.
 $878E INC HL        ; Increment #REGhl by one.
 $878F LD A,$60      ; #REGa=#N$60.
 $8791 CP (HL)       ; Compare #REGa with *#REGhl.
 $8792 JP NC,$883C   ; Jump to #R$883C if #REGa is higher.
 $8795 LD B,(HL)     ; #REGb=*#REGhl.
 $8796 INC HL        ; Increment #REGhl by one.
 $8797 LD E,(HL)     ; #REGe=*#REGhl.
 $8798 PUSH HL       ; Stash #REGhl on the stack.
 $8799 INC HL        ; Increment #REGhl by one.
 $879A LD D,(HL)     ; #REGd=*#REGhl.
 $879B LD L,(IX+$0D) ; #REGl=*#REGix+#N$0D.
 $879E LD H,(IX+$0E) ; #REGh=*#REGix+#N$0E.
 $87A1 AND A         ; Set flags.
 $87A2 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $87A4 JR C,$87DF    ; Jump to #R$87DF if #REGhl is lower.
 $87A6 LD (IX+$08),C ; Write #REGc to *#REGix+#N$08.
 $87A9 LD (IX+$09),B ; Write #REGb to *#REGix+#N$09.
 $87AC LD HL,$0002   ; #REGhl=#N($0002,$04,$04).
 $87AF ADD HL,BC     ; #REGhl+=#REGbc.
 $87B0 LD C,(HL)     ; #REGc=*#REGhl.
 $87B1 INC HL        ; Increment #REGhl by one.
 $87B2 LD B,(HL)     ; #REGb=*#REGhl.
 $87B3 LD ($7807),BC ; Write #REGbc to *#R$7807.
 $87B7 LD HL,($EFF2) ; {#REGhl=*#R$EFF2+#N($000D,$04,$04).
 $87BA LD DE,$000D   ;
 $87BD ADD HL,DE     ; }
 $87BE EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $87BF POP HL        ; Restore #REGhl from the stack.
 $87C0 LD B,$02      ; #REGb=#N$02.
 $87C2 CALL $96FE    ; Call #R$96FE.
 $87C5 DEC DE        ; Decrease #REGde by one.
 $87C6 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $87C7 LD DE,$403B   ; #REGde=#N$403B (screen buffer location).
 $87CA LD BC,$0202   ; #REGbc=#N($0202,$04,$04).
 $87CD CALL $9712    ; Call #R$9712.
 $87D0 POP HL        ; Restore #REGhl from the stack.
 $87D1 LD HL,$EFFA   ; #REGhl=#R$EFFA.
 $87D4 SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $87D6 CALL $823B    ; Call #R$823B.
 $87D9 CALL $8A61    ; Call #R$8A61.
 $87DC JP $896C      ; Jump to #R$896C.
; Prints "#STR($8C10)#STR($8C13)#STR($8C1C)".
@label=NotEnoughMoneyToFly
*$87DF POP DE        ; Restore #REGde from the stack.
; Prints "#STR($8C10)".
 $87E0 LD HL,$8C10   ; #REGhl=#R$8C10.
 $87E3 LD DE,$50A3   ; #REGde=#N$50A3 (screen buffer location).
 $87E6 CALL $8A3D    ; Call #R$8A3D.
; Prints "#STR($8C13)".
 $87E9 LD DE,$50C0   ; #REGde=#N$50C0 (screen buffer location).
 $87EC CALL $8A3D    ; Call #R$8A3D.
; Prints "#STR($8C1C)".
 $87EF LD DE,$50E1   ; #REGde=#N$50E1 (screen buffer location).
 $87F2 CALL $8A3D    ; Call #R$8A3D.
 $87F5 JP $875B      ; Jump to #R$875B.
; Process the player pressing "up".
@label=ProcessLocationChoiceInput_Up
*$87F8 CALL $8824    ; Call #R$8824.
 $87FB POP BC        ; Restore #REGbc from the stack.
 $87FC LD A,($7811)  ; #REGa=*#R$7811.
 $87FF CP $88        ; Compare #REGa with #N$88.
 $8801 JR Z,$8821    ; Jump to #R$8821 if #REGa is zero.
 $8803 SUB $20       ; #REGa-=#N$20.
@label=UpdateDestinationChoice
*$8805 LD ($7811),A  ; Write #REGa to *#R$7811.
 $8808 PUSH BC       ; Stash #REGbc on the stack.
 $8809 CALL $8830    ; Call #R$8830.
 $880C JP $875B      ; Jump to #R$875B.
; Process the player pressing "down".
@label=ProcessLocationChoiceInput_Down
*$880F CALL $8824    ; Call #R$8824.
 $8812 POP BC        ; Restore #REGbc from the stack.
 $8813 LD A,($7811)  ; #REGa=*#R$7811.
 $8816 CP C          ; Compare #REGa with #REGc.
 $8817 JR Z,$881D    ; Jump to #R$881D if #REGa is zero.
 $8819 ADD A,$20     ; #REGa+=#N$20.
 $881B JR $8805      ; Jump to #R$8805.
*$881D LD A,$88      ; #REGa=#N$88.
 $881F JR $8805      ; Jump to #R$8805.
*$8821 LD A,C        ; #REGa=#REGc.
 $8822 JR $8805      ; Jump to #R$8805.

; Erase Arrow Symbol
;
; Used by the routine at #R$8749.
;
; .
;
; Converts the value in *#R$7811 to a usable screen value and prints a
; "SPACE" over the current arrow symbol in that position.
@label=Erase_ArrowSymbol
c$8824 LD A,($7811)  ; {Utilising *#R$7811 set the screen position for the
 $8827 LD D,$50      ; space in #REGde.
 $8829 LD E,A        ; }
 $882A LD HL,$8BB9   ; Using the empty space/ terminator at the end of #R$8BB1, point
                     ; #REGhl to #R$8BB1(#N$8BB9).
 $882D JP $8A3D      ; Jump to #R$8A3D.

; Print Arrow Symbol
;
; Used by the routine at #R$8749.
;
; .
;
; Converts the value in *#R$7811 to a usable screen value and prints an
; arrow symbol in that position.
@label=Print_ArrowSymbol
c$8830 LD A,($7811)  ; {Utilising *#R$7811 set the screen position for the
 $8833 LD D,$50      ; arrow in #REGde.
 $8835 LD E,A        ; }
 $8836 LD HL,$8C27   ; #REGhl=#R$8C27.
 $8839 JP $8A3D      ; Jump to #R$8A3D.

; Handler: Sub-Game
;
; Used by the routine at #R$8749.
@label=Handler_SubGame
c$883C POP DE         ; Discard the last entry on the stack.
 $883D LD HL,($EFF2)  ; {Loads a pointer to the current players score and cash balance into
 $8840 LD DE,$000A    ; #REGhl. The active player reference is via *#R$EFF2.
 $8843 ADD HL,DE      ; }
 $8844 LD DE,$EFF4    ; {Copy the #N($0005,$04,$04) bytes of data for the score and cash
 $8847 LD BC,$0005    ; balance from *#REGhl to *#R$EFF4/ *#R$EFF7.
 $884A LDIR           ; }
 $884C EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $884D LD (HL),$00    ; Write #N$00 to *#REGhl.
 $884F LD HL,$EFFF    ; {Write #N$00 to *#R$EFFF.
 $8852 LD (HL),$00    ; }
 $8854 CALL $9052     ; Call #R$9052.
 $8857 LD HL,$EFFF    ; {Write #N$01 to *#R$EFFF.
 $885A LD (HL),$01    ; }
 $885C LD IX,($EFF2)  ; #REGix=#R$EFF2.
 $8860 LD A,($EFF4)   ; {Copy the three bytes of *#R$EFF4 to the current players score
 $8863 LD (IX+$0A),A  ; storage.
 $8866 LD A,($EFF5)   ;
 $8869 LD (IX+$0B),A  ;
 $886C LD A,($EFF6)   ;
 $886F LD (IX+$0C),A  ; }
 $8872 LD HL,($EFF2)  ; {Loads a pointer to the current players cash balance
 $8875 LD DE,$000D    ; into #REGhl.
 $8878 ADD HL,DE      ; }
 $8879 LD DE,$EFF7    ; #REGde=#R$EFF7.
 $887C LD BC,($EFF7)  ; {Stash *#R$EFF7 on the stack.
 $8880 PUSH BC        ; }
 $8881 LD B,$02       ; #REGb=#N$02.
 $8883 CALL $96FE     ; Call #R$96FE.
 $8886 POP BC         ; Restore #REGbc from the stack.
 $8887 LD (IX+$0D),C  ; Write #REGc to *#REGix+#N$0D.
 $888A LD (IX+$0E),B  ; Write #REGb to *#REGix+#N$0E.
 $888D JR C,$88AB     ; Jump to #R$88AB if #REGa is lower.
 $888F LD BC,($EFF7)  ; {Jump to #R$88AB if *#R$EFF7 is zero.
 $8893 LD A,B         ;
 $8894 OR C           ;
 $8895 JR Z,$88AB     ; }
 $8897 LD DE,$FFFB    ; {#REGhl+=#R$FFFB.
 $889A ADD HL,DE      ; }
 $889B LD DE,$EFF7    ; #REGde=#R$EFF7.
 $889E EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $889F LD B,$03       ; #REGb=#N$03.
 $88A1 CALL $9708     ; Call #R$9708.
 $88A4 LD HL,$EFFA    ; #REGhl=#R$EFFA.
 $88A7 SET 1,(HL)     ; Set bit 1 ("Has Bonus Points?") of *#REGhl.
 $88A9 RES 0,(HL)     ; Reset bit 0 of *#REGhl.
*$88AB LD HL,$EFFA    ; #REGhl=#R$EFFA.
 $88AE BIT 4,(HL)     ; Test bit 4 of *#REGhl.
 $88B0 CALL Z,$894F   ; Call #R$894F zero.
 $88B3 LD A,(HL)      ; #REGa=*#REGhl.
 $88B4 AND %00111100  ; Keep only bits 2-5.
 $88B6 JR Z,$88CD     ; Jump to #R$88CD if #REGa is zero.
 $88B8 AND %00000100  ; Keep only bits 2.
 $88BA JR NZ,$88C2    ; Jump to #R$88C2 if #REGa is not zero.
 $88BC RES 7,(IX+$0F) ; Reset bit 7 of *#REGix+#N$0F.
 $88C0 JR $88FC       ; Jump to #R$88FC.
*$88C2 LD BC,$8E82    ; #REGbc=#R$8E82.
 $88C5 LD (IX+$08),C  ; Write #REGc to *#REGix+#N$08.
 $88C8 LD (IX+$09),B  ; Write #REGb to *#REGix+#N$09.
 $88CB JR $88FC       ; Jump to #R$88FC.
*$88CD LD A,(IX+$0F)  ; #REGa=*#REGix+#N$0F.
 $88D0 AND %00000011  ; Keep only bits 0-1.
 $88D2 LD L,(IX+$08)  ; #REGl=*#REGix+#N$08.
 $88D5 LD H,(IX+$09)  ; #REGh=*#REGix+#N$09.
 $88D8 LD BC,$0010    ; {#REGhl+=#N($0010,$04,$04).
 $88DB ADD HL,BC      ; }
 $88DC LD C,A         ; #REGc=#REGa.
 $88DD XOR (HL)       ; Flip the bits according to *#REGhl.
 $88DE LD (HL),A      ; Write #REGa to *#REGhl.
 $88DF LD HL,$8E92    ; #REGhl=#R$8E92.
 $88E2 LD DE,$0011    ; #REGde=#N($0011,$04,$04).
 $88E5 LD B,$0E       ; #REGb=#N$0E.
*$88E7 LD A,C         ; #REGa=#REGc.
 $88E8 AND (HL)       ; Merge the bits from *#REGhl.
 $88E9 JR Z,$88FC     ; Jump to #R$88FC if #REGa is zero.
*$88EB INC HL         ; Increment #REGhl by one.
 $88EC BIT 7,(HL)     ; Test bit 7 of *#REGhl.
 $88EE JR Z,$88EB     ; Jump to #R$88EB if #REGhl is zero.
 $88F0 ADD HL,DE      ; #REGhl+=#REGde.
 $88F1 DJNZ $88E7     ; Decrease counter by one and loop back to #R$88E7 until
                      ; counter is zero.
 $88F3 LD HL,$EFFA    ; #REGhl=#R$EFFA.
 $88F6 SET 6,(HL)     ; Set bit 6 of *#REGhl.
 $88F8 RES 7,(IX+$0F) ; Reset bit 7 of *#REGix+#N$0F.
*$88FC POP HL         ; Restore #REGhl from the stack.
 $88FD CALL $8146     ; Call #R$8146.
 $8900 CALL $8600     ; Call #R$8600.
; This entry point is used by the routine at #R$8666.
*$8903 CALL $823B     ; Call #R$823B.
*$8906 LD B,$01       ; {Call #R$8055 with a count of #N$01.
 $8908 CALL $8055     ; }
 $890B LD HL,$EFFB    ; #REGhl=#R$EFFB.
 $890E BIT 0,(HL)     ; Test bit 0 ("Ticker On/ Off") of *#REGhl.
 $8910 JR NZ,$8906    ; Jump to #R$8906 if #REGhl is not zero.
 $8912 LD IX,($EFF2)  ; #REGix=#R$EFF2.
 $8916 BIT 7,(IX+$0F) ; {Call #R$8A84 if bit 7 of *#REGix+#N$0F is zero.
 $891A CALL Z,$8A84   ; }
 $891D CALL $85CE     ; Call #R$85CE.
 $8920 JP NZ,$802C    ; Jump to #R$802C if #REGhl is not zero.
 $8923 CALL $85CE     ; Call #R$85CE.
 $8926 JP NZ,$802C    ; Jump to #R$802C if #REGhl is not zero.
 $8929 LD HL,$EFFB    ; #REGhl=#R$EFFB.
 $892C BIT 6,(HL)     ; Test bit 6 of *#REGhl.
 $892E CALL Z,$8AE1   ; Call #R$8AE1 zero.
 $8931 CALL $8A61     ; Call #R$8A61.
; Prints "#STR($8E34)".
 $8934 LD HL,$8E34    ; #REGhl=#R$8E34.
 $8937 LD DE,$5069    ; #REGde=#N$5069 (screen buffer location).
 $893A CALL $8A3D     ; Call #R$8A3D.
; Prints "#STR($8E45)".
 $893D LD HL,$8E45    ; #REGhl=#R$8E45.
 $8940 LD DE,$5089    ; #REGde=#N$5089 (screen buffer location).
 $8943 CALL $8A3D     ; Call #R$8A3D.
 $8946 CALL $8519     ; Call #R$8519.
 $8949 JP C,$800F     ; Jump to #R$800F if #REGhl is lower.
 $894C JP $8026       ; Jump to #R$8026.

; Afford To Fly Check
;
; Used by the routines at #R$8666 and #R$883C.
;
; IX The active player; either #R$8C28 or #R$8C38
@label=Check_AffordToFly
c$894F LD L,(IX+$08) ; {Fetch the players current location and store it in
 $8952 LD H,(IX+$09) ; #REGhl.}
 $8955 LD DE,$0006   ; {Move #REGhl by #N($0006,$04,$04) to point to the
 $8958 ADD HL,DE     ; destination cost.}
 $8959 LD E,(HL)     ; {Load the cost of this destination into #REGde.
 $895A INC HL        ;
 $895B LD D,(HL)     ; }
 $895C LD L,(IX+$0D) ; {Loads the active players cash balance into #REGhl.
 $895F LD H,(IX+$0E) ; }
 $8962 AND A         ; {Subtract the cost of the destination from the active players cash
 $8963 SBC HL,DE     ; balance.}
 $8965 LD HL,$EFFA   ; {Return if the player can afford the "cheapest"
 $8968 RET NC        ; destination.}
; Else, the player is stuck in their current destination. Set the flag
; for this.
 $8969 SET 5,(HL)    ; Set bit 5 ("Can't Afford To Fly") of *#R$EFFA.
 $896B RET           ; Return.

; Routine at 896C
;
; Used by the routine at #R$8749.
c$896C LD HL,($7805) ; #REGhl=*#R$7805.
 $896F LD DE,($7807) ; #REGde=*#R$7807.
 $8973 LD A,L        ; #REGa=#REGl.
 $8974 SUB E         ; #REGa-=#REGe.
 $8975 LD E,$FF      ; #REGe=#N$FF.
 $8977 JP P,$897E    ; Jump to #R$897E P.
 $897A NEG           ; NEG.
 $897C LD E,$01      ; #REGe=#N$01.
*$897E LD C,A        ; #REGc=#REGa.
 $897F LD A,H        ; #REGa=#REGh.
 $8980 SUB D         ; #REGa-=#REGd.
 $8981 LD D,$FF      ; #REGd=#N$FF.
 $8983 JR NC,$8989   ; Jump to #R$8989 if #REGhl is higher.
 $8985 NEG           ; NEG.
 $8987 LD D,$01      ; #REGd=#N$01.
*$8989 LD B,A        ; #REGb=#REGa.
 $898A LD ($7801),BC ; Write #REGbc to *#R$7801.
 $898E LD ($7809),BC ; Write #REGbc to *#R$7809.
 $8992 LD ($7803),DE ; Write #REGde to *#R$7803.
 $8996 LD HL,$EFFB   ; #REGhl=#R$EFFB.
 $8999 SET 1,(HL)    ; Set bit 1 of *#REGhl.
 $899B RET           ; Return.

; Handler: Flight Path
;
; Used by the routine at #R$8003.
@label=Handler_FlightPath
c$899C LD B,$01      ; #REGb=#N$01.
 $899E LD HL,$EFFF   ; #REGhl=#R$EFFF.
 $89A1 SET 0,(HL)    ; Set bit 0 of *#REGhl.
 $89A3 CALL $8055    ; Call #R$8055.
 $89A6 LD A,($EFFC)  ; #REGa=*#R$EFFC.
 $89A9 AND %00001111 ; Keep only bits 0-3.
 $89AB CP $08        ; {Jump to #R$899C if #REGa is not equal to #N$08.
 $89AD JR NZ,$899C   ; }
 $89AF LD BC,($7801) ; #REGbc=*#R$7801.
 $89B3 LD DE,($7803) ; #REGde=*#R$7803.
 $89B7 LD HL,($7805) ; #REGhl=*#R$7805.
 $89BA LD A,C        ; #REGa=#REGc.
 $89BB CP B          ; {Jump to #R$89D7 if #REGa is lower than #REGb.
 $89BC JR C,$89D7    ; }
 $89BE SUB B         ; #REGa-=#REGb.
 $89BF LD C,A        ; #REGc=#REGa.
 $89C0 LD A,E        ; #REGa=#REGe.
 $89C1 ADD A,L       ; #REGa+=#REGl.
 $89C2 LD L,A        ; #REGl=#REGa.
 $89C3 LD A,($780A)  ; {#REGb=*#R$780A.
 $89C6 LD B,A        ; }
 $89C7 CP C          ; {Jump to #R$89F1 if *#R$780A is lower than #REGc.
 $89C8 JR C,$89F1    ; }
 $89CA SUB C         ; #REGa-=#REGc.
 $89CB LD B,A        ; #REGb=#REGa.
 $89CC LD A,($7809)  ; {#REGc=*#R$7809.
 $89CF LD C,A        ; }
 $89D0 LD A,($7804)  ; {#REGh+=*#R$7804.
 $89D3 ADD A,H       ;
 $89D4 LD H,A        ; }
 $89D5 JR $89F1      ; Jump to #R$89F1.
*$89D7 LD A,B        ; {#REGb-=#REGc.
 $89D8 SUB C         ;
 $89D9 LD B,A        ; }
 $89DA LD A,D        ; #REGa=#REGd.
 $89DB ADD A,H       ; #REGa+=#REGh.
 $89DC LD H,A        ; #REGh=#REGa.
 $89DD LD A,($7809)  ; {#REGc=*#R$7809.
 $89E0 LD C,A        ; }
 $89E1 CP B          ; {Jump to #R$89F1 if #REGc is lower than #REGb.
 $89E2 JR C,$89F1    ; }
 $89E4 SUB B         ; #REGa-=#REGb.
 $89E5 LD C,A        ; #REGc=#REGa.
 $89E6 LD A,($780A)  ; {#REGb=*#R$780A.
 $89E9 LD B,A        ; }
 $89EA LD A,($7803)  ; {#REGl+=*#R$7803.
 $89ED ADD A,L       ;
 $89EE LD L,A        ; }
 $89EF JR $89F1      ; Jump to #R$89F1.
*$89F1 LD ($7805),HL ; Write #REGhl to *#R$7805.
 $89F4 LD ($7801),BC ; Write #REGbc to *#R$7801.
 $89F8 AND A         ; Set flags.
 $89F9 LD DE,($7807) ; #REGde=*#R$7807.
 $89FD SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $89FF JR NZ,$899C   ; Jump to #R$899C if #REGa is not zero.
 $8A01 LD HL,$EFFB   ; #REGhl=#R$EFFB.
 $8A04 RES 1,(HL)    ; Reset bit 1 of *#REGhl.
 $8A06 RET           ; Return.

; Toggle Map Point
;
; Used by the routines at #R$8055 and #R$81B3.
;
; HL Map co-ordinates
@label=ToggleMapPoint
c$8A07 LD A,L        ; #REGa=#REGl.
 $8A08 AND %00000111 ; Keep only bits 0-2.
 $8A0A LD B,A        ; #REGb=#REGa.
 $8A0B LD A,$80      ; #REGa=#N$80.
 $8A0D JR Z,$8A12    ; Jump to #R$8A12 if #REGa is zero.
*$8A0F RRCA          ; RRCA.
 $8A10 DJNZ $8A0F    ; Decrease counter by one and loop back to #R$8A0F until
                     ; counter is zero.
*$8A12 LD E,A        ; #REGe=#REGa.
 $8A13 LD A,H        ; #REGa=#REGh.
 $8A14 AND %00000111 ; Keep only bits 0-2.
 $8A16 LD D,A        ; #REGd=#REGa.
 $8A17 RRC H         ; {Rotate #REGh right three positions (with carry).
 $8A19 RRC H         ;
 $8A1B RRC H         ; }
 $8A1D LD A,H        ; #REGa=#REGh.
 $8A1E AND %00011000 ; Keep only bits 3-4.
 $8A20 OR %01000000  ; Set bits 6.
 $8A22 OR D          ; Set the bits from #REGd.
 $8A23 RR H          ; Rotate #REGh right.
 $8A25 RR L          ; Rotate #REGl right.
 $8A27 RR H          ; Rotate #REGh right.
 $8A29 RR L          ; Rotate #REGl right.
 $8A2B RR H          ; Rotate #REGh right.
 $8A2D RR L          ; Rotate #REGl right.
 $8A2F LD H,A        ; #REGh=#REGa.
 $8A30 LD A,(HL)     ; #REGa=*#REGhl.
 $8A31 XOR E         ; Flip the bits according to #REGe.
 $8A32 LD (HL),A     ; Write #REGa to *#REGhl.
 $8A33 LD A,$00      ; #REGa=#N$00.
 $8A35 INC A         ; Increment #REGa by one.
 $8A36 RET           ; Return.

; Underline
;
; Used by the routines at #R$83AA, #R$84D5, #R$8666 and #R$8A84.
;
; B Number of locations to write #N$FF to
; HL Screen buffer address
@label=Underline
c$8A37 LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $8A39 INC HL        ; Increment #REGhl by one.
 $8A3A DJNZ $8A37    ; Decrease counter by one and loop back to #R$8A37 until
                     ; counter is zero.
 $8A3C RET           ; Return.

; Print String
;
; Used by the routines at #R$83AA, #R$84D5, #R$8519, #R$8548, #R$8600, #R$8666,
; #R$8749, #R$8824, #R$8830, #R$883C, #R$8A84 and #R$9754.
;
; HL Pointer to string
; DE Screen buffer location
@label=Print_String
c$8A3D LD A,(HL)     ; Fetch a character from the string pointer and store it
                     ; in #REGa.
 $8A3E PUSH HL       ; Stash the string pointer on the stack.
 $8A3F AND %01111111 ; Strip off the termination bit.
; Fetch the font UDG for the current character.
 $8A41 LD L,A        ; {Create an offset in #REGhl.
 $8A42 LD H,$00      ; }
 $8A44 ADD HL,HL     ; {Letter UDGs are #N$08 bytes, so multiply #REGhl by
 $8A45 ADD HL,HL     ; #N$08.
 $8A46 ADD HL,HL     ; }
 $8A47 LD BC,$F740   ; {Add #R$F840 to #REGhl to reference the UDG for the current letter
 $8A4A ADD HL,BC     ; in the string.}
; Now print it to the screen buffer.
 $8A4B CALL $8A56    ; Call #R$8A56.
 $8A4E POP HL        ; Restore the string pointer from the stack.
 $8A4F INC DE        ; Increment the screen buffer pointer by one.
 $8A50 BIT 7,(HL)    ; Test for the termination bit in the current letter
                     ; *#REGhl.
 $8A52 INC HL        ; Increment the string pointer by one.
 $8A53 JR Z,$8A3D    ; Jump to #R$8A3D until the terminator bit is found.
 $8A55 RET           ; Return.
; Printing routine.
@label=Print_Character
*$8A56 LD B,$08      ; Set a counter in #REGb of #N$08, for the number of bytes in a
                     ; letter UDG.
 $8A58 PUSH DE       ; Stash the screen buffer pointer on the stack.
@label=Print_Character_Loop
*$8A59 LD A,(HL)     ; Fetch the letter UDG byte from *#REGhl...
 $8A5A LD (DE),A     ; ...and write it to the screen buffer using the position stored in
                     ; *#REGde.
 $8A5B INC HL        ; Increment the string pointer by one.
 $8A5C INC D         ; Move right one byte to the next screen buffer position.
 $8A5D DJNZ $8A59    ; Decrease the UDG byte counter by one and loop back to #R$8A59 until
                     ; the letter has been printed to the screen.
 $8A5F POP DE        ; Restore the screen buffer pointer from the stack.
 $8A60 RET           ; Return.

; Clear Menu Screen Areas
;
; Used by the routines at #R$8003, #R$8666, #R$8749, #R$883C and #R$8A84.
;
; .
;
; #PUSHS #FOR$4000,$57FF||n|#POKESn,$FF||#FOR$5800,$5AFF||n|#POKESn,$47||
; #SIM(start=$800F,stop=$8012)
; #UDGTABLE { #SCR$02(clear-screen-01) } UDGTABLE#
; #POPS
@label=ClearMenuScreenAreas
c$8A61 LD HL,$5049   ; #REGhl=#N$5049 (screen buffer location).
 $8A64 LD C,$13      ; #REGc=#N$13.
 $8A66 CALL $8A76    ; Call #R$8A76.
 $8A69 LD HL,$5069   ; #REGhl=#N$5069 (screen buffer location).
 $8A6C LD C,$13      ; #REGc=#N$13.
 $8A6E CALL $8A76    ; Call #R$8A76.
; #PUSHS #FOR$4000,$57FF||n|#POKESn,$FF||#FOR$5800,$5AFF||n|#POKESn,$47||
; #SIM(start=$8A71,stop=$8A83)
; #UDGTABLE { #SCR$02(clear-screen-02) } UDGTABLE#
; #POPS
@label=ClearBottomScreenArea
*$8A71 LD HL,$5088   ; #REGhl=#N$5088 (screen buffer location).
 $8A74 LD C,$77      ; #REGc=#N$77.
; This entry point is used by the routines at #R$8600, #R$9134, #R$9634 and
; #R$9754.
@label=ClearScreenArea
*$8A76 LD B,$08      ; #REGb=#N$08.
 $8A78 PUSH HL       ; Stash #REGhl on the stack.
@label=ClearScreenArea_Loop
*$8A79 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $8A7B INC H         ; Increment #REGh by one.
 $8A7C DJNZ $8A79    ; Decrease counter by one and loop back to #R$8A79 until
                     ; counter is zero.
 $8A7E POP HL        ; Restore #REGhl from the stack.
 $8A7F INC HL        ; Increment #REGhl by one.
 $8A80 DEC C         ; Decrease #REGc by one.
 $8A81 JR NZ,$8A76   ; Jump to #R$8A76 until #REGc is zero.
 $8A83 RET           ; Return.

; High Score Table
;
; Used by the routine at #R$883C.
;
; .
;
; #PUSHS
; #POKES$8E08,$50;$8E09,$4F;$8E0A,$42;$8E11,$02
; #POKES$8E13,$52;$8E14,$41;$8E15,$4E;$8E1C,$01
; #UDGTABLE { #SIM(start=$8AE1,stop=$8B1B)#SCR$02(high-scores) } UDGTABLE# #POPS
@label=HighScoreTable
c$8A84 LD B,$04      ; #REGb=#N$04.
 $8A86 LD IX,$8E08   ; #REGix=#R$8E08.
*$8A8A LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $8A8D LD DE,$000C   ; {#REGhl+=#N($000C,$04,$04).
 $8A90 ADD HL,DE     ; }
 $8A91 LD A,(HL)     ; {Jump to #R$8AA4 if *#REGhl is higher than
 $8A92 CP (IX+$0A)   ; *#REGix+#N$0A.
 $8A95 JR NC,$8AA4   ; }
*$8A97 LD DE,$000B   ; {#REGix+=#N($000B,$04,$04).
 $8A9A ADD IX,DE     ; }
 $8A9C DJNZ $8A8A    ; Decrease counter by one and loop back to #R$8A8A until
                     ; counter is zero.
 $8A9E LD HL,$EFFB   ; #REGhl=#R$EFFB.
 $8AA1 RES 6,(HL)    ; Reset bit 6 of *#REGhl.
 $8AA3 RET           ; Return.
*$8AA4 JR NZ,$8AB8   ; Jump to #R$8AB8 if  is not zero.
 $8AA6 DEC HL        ; Decrease #REGhl by one.
 $8AA7 LD A,(HL)     ; {Jump to #R$8A97 if *#REGhl is lower than *#REGix+#N$09.
 $8AA8 CP (IX+$09)   ;
 $8AAB JR C,$8A97    ; }
 $8AAD JR NZ,$8AB8   ; Jump to #R$8AB8 if *#REGhl is not equal to
                     ; *#REGix+#N$09.
 $8AAF DEC HL        ; Decrease #REGhl by one.
 $8AB0 LD A,(HL)     ; {Jump to #R$8A97 if *#REGhl is lower than *#REGix+#N$08.
 $8AB1 CP (IX+$08)   ;
 $8AB4 JR C,$8A97    ; }
 $8AB6 JR Z,$8A97    ; Jump to #R$8A97 if *#REGhl is equal to *#REGix+#N$08.
*$8AB8 DEC B         ; Decrease #REGb by one.
 $8AB9 JR Z,$8ACA    ; Jump to #R$8ACA if #REGb is zero.
 $8ABB LD A,$00      ; #REGa=#N$00.
*$8ABD ADD A,$0B     ; #REGa+=#N$0B.
 $8ABF DJNZ $8ABD    ; Decrease counter by one and loop back to #R$8ABD until
                     ; counter is zero.
 $8AC1 LD C,A        ; #REGc=#REGa.
 $8AC2 LD HL,$8E28   ; #REGhl=#R$8E1E(#N$8E28).
 $8AC5 LD DE,$8E33   ; #REGde=#R$8E29(#N$8E33).
 $8AC8 LDDR          ; LDDR.
*$8ACA PUSH IX       ; {#REGde=#REGix (using the stack).
 $8ACC POP DE        ; }
 $8ACD LD HL,($EFF2) ; #REGhl=*#R$EFF2.
 $8AD0 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $8AD3 LDIR          ; LDIR.
 $8AD5 INC HL        ; {Increment #REGhl by two.
 $8AD6 INC HL        ; }
 $8AD7 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $8ADA LDIR          ; LDIR.
 $8ADC LD HL,$EFFB   ; #REGhl=#R$EFFB.
 $8ADF SET 6,(HL)    ; Set bit 6 of *#REGhl.
; This entry point is used by the routine at #R$883C.
*$8AE1 CALL $8A61    ; Call #R$8A61.
; Prints "#STR($8DF9)".
 $8AE4 LD HL,$8DF9   ; #REGhl=#R$8DF9.
 $8AE7 LD DE,$5049   ; #REGde=#N$5049 (screen buffer location).
 $8AEA CALL $8A3D    ; Call #R$8A3D.
 $8AED LD HL,$5069   ; #REGhl=#N$5069 (screen buffer location).
 $8AF0 LD B,$0F      ; {#R$8A37 the header with #N$0F character blocks of
 $8AF2 CALL $8A37    ; #N$FF.}
 $8AF5 LD B,$04      ; #REGb=#N$04.
; Cycle through each high score and print the details.
 $8AF7 LD HL,$8E08   ; #REGhl=#R$8E08.
 $8AFA LD DE,$5089   ; #REGde=#N$5089 (screen buffer location).
@label=PrintHighScore_Loop
*$8AFD PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $8AFE PUSH HL       ;
 $8AFF PUSH DE       ; }
 $8B00 CALL $8A3D    ; Call #R$8A3D.
 $8B03 INC DE        ; {Increment #REGde by two.
 $8B04 INC DE        ; }
 $8B05 INC HL        ; {Increment #REGhl by two.
 $8B06 INC HL        ; }
 $8B07 LD BC,$0203   ; #REGbc=#N($0203,$04,$04).
 $8B0A CALL $9712    ; Call #R$9712.
 $8B0D POP DE        ; Restore #REGde from the stack.
 $8B0E LD HL,$0020   ; {#REGde+=#N($0020,$04,$04).
 $8B11 ADD HL,DE     ;
 $8B12 EX DE,HL      ; }
 $8B13 POP HL        ; Restore #REGhl from the stack.
 $8B14 LD BC,$000B   ; {#REGhl+=#N($000B,$04,$04).
 $8B17 ADD HL,BC     ; }
 $8B18 POP BC        ; Restore #REGbc from the stack.
 $8B19 DJNZ $8AFD    ; Decrease counter by one and loop back to #R$8AFD until
                     ; counter is zero.
 $8B1B LD B,$64      ; {Call #R$8055 with a count of #N$64.
 $8B1D CALL $8055    ; }
 $8B20 CALL $8479    ; Call #R$8479.
*$8B23 LD B,$01      ; {Call #R$8055 with a count of #N$01.
 $8B25 CALL $8055    ; }
 $8B28 CALL $85E7    ; Call #R$85E7.
 $8B2B LD A,E        ; {Jump to #R$8B23 if #REGe is not equal to #N$20.
 $8B2C CP $20        ;
 $8B2E JR NZ,$8B23   ; }
 $8B30 RET           ; Return.

; Messaging: Menu
;
; .
;
; .
;
; Used by the routine at #R$83AA.
@label=Messaging_SelectControls
t$8B31 DEFM "Select control","s"+$80       ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(select-01)
@label=Messaging_UserDefinedKeys
 $8B40 DEFM "1 User defined key","s"+$80   ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(select-02)
@label=Messaging_KempstonJoystick
 $8B53 DEFM "2 Kempston joystic","k"+$80   ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(select-03)
@label=Messaging_Interface2
 $8B66 DEFM "3 Interface ","2"+$80         ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(select-04)
@label=Messaging_CursorKeys
 $8B73 DEFM "4 Cursor key type J/","S"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(select-05)

; Messaging: Redefine Keys
;
; .
;
; .
;
; Used by the routine at #R$83AA.
@label=Messaging_PleaseSelectKeys
t$8B88 DEFM "Please select"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-01)
@label=Messaging_RedefineKeys_Right
 $8B96 DEFM "right ke","y"+$80      ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-02)
@label=Messaging_RedefineKeys_Down
 $8B9F DEFM "down key"," "+$80      ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-03)
@label=Messaging_RedefineKeys_Left
 $8BA8 DEFM "left key"," "+$80      ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-04)
@label=Messaging_RedefineKeys_Up
 $8BB1 DEFM "up key  "," "+$80      ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-05)
@label=Messaging_RedefineKeys_Fire
 $8BBA DEFM "fire key"," "+$80      ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(redefine-keys-06)

; Messaging: Visa Application
;
; .
;
; .
;
; Used by the routine at #R$84D5.
@label=Messaging_VisaApplication
t$8BC3 DEFM "Visa Applicatio","n"+$80       ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(visa-application-01)
@label=Messaging_FormNo
 $8BD3 DEFM "form no. 594/627Y/60","X"+$80  ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(visa-application-02)
; Used by the routine at #R$8548.
@label=Messaging_Name
 $8BE8 DEFM "Name....(        )   "," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(visa-application-03)
; Used by the routine at #R$84D5.
@label=Messaging_AnotherForm
 $8BFE DEFM "Another form reqd","?"+$80     ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(visa-application-04)

; Messaging: No
@label=Messaging_No
t$8C10 DEFM "No"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(no)

; Messaging: Discounts
@label=Messaging_Discounts
t$8C13 DEFM "Discount","s"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(discounts)

; Messaging: Allowed
@label=Messaging_Allowed
t$8C1C DEFM "Allowe","d"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(allowed)

; Messaging: Yes
@label=Messaging_Yes
t$8C23 DEFM "Ye","s"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(yes)

; Messaging: Pound Symbol
@label=Messaging_£
t$8C26 DEFM $E0      ; #FONT:(`)$F840,attr=$4E(pound)

; Messaging: Arrow Symbol
@label=Messaging_Arrow
t$8C27 DEFM "*"+$80  ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(arrow)

; 1UP/ 2UP Player Details
;
; .
;
; .
;
; See #POKE#9999(£9999).
; .
; 1UP variables.
@label=1UP_Name
t$8C28 DEFM "       ",$A0 ; 1UP Player name.
@label=1UP_Location
 $8C30 DEFW $0000         ; 1UP Location pointer.
@label=1UP_Score
 $8C32 DEFB $00,$00,$00   ; 1UP Score.
@label=1UP_Cash
 $8C35 DEFM $00,$00       ; 1UP Cash.
@label=1UP_State
 $8C37 DEFB $00           ; 1UP State.
; 2UP variables.
@label=2UP_Name
 $8C38 DEFM "       ",$A0 ; 2UP Player name.
@label=2UP_Location
 $8C40 DEFW $0000         ; 2UP Location pointer.
@label=2UP_Score
 $8C42 DEFB $00,$00,$00   ; 2UP Score.
@label=2UP_Cash
 $8C45 DEFM $00,$00       ; 2UP Cash.
@label=2UP_State
 $8C47 DEFB $00           ; 2UP State.

; Messaging: Header
@label=Messaging_Header
t$8C48 DEFM "Score  Trashman           Cas","h"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(header)

; Messaging: In
@label=Messaging_In
t$8C66 DEFM "i","n"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(in)

; Messaging: Travel Header
@label=Messaging_TravelHeader
t$8C68 DEFM "Destination   Far","e"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(travel-header)

; Messaging: Job Complete
@label=Messaging_JobComplete
t$8C7A DEFM "Job complete","d"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(job-complete)

; Messaging: Accept Job Offered
@label=Messaging_AcceptJobOffered
t$8C87 DEFM "Accept job offere","d"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(accept-job)

; Messaging: Stop Press
@label=Messaging_StopPress
t$8C99 DEFM " ....  STOP PRESS  .... Trashman"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(stop-press)

; Messaging: Flies To
@label=Messaging_FliesTo
t$8CBA DEFM " flies t","o"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(flies-to)

; Messaging: Stranded In
@label=Messaging_StrandedIn
t$8CC3 DEFM " stranded in"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(stranded-in)

; Messaging: Penniless
@label=Messaging_Penniless
t$8CD0 DEFM ", penniless","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(penniless)

; Messaging: Without Fare Home
@label=Messaging_WithoutFareHome
t$8CDC DEFM ", without fare home","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(without-fare-home)

; Messaging: Deported Russia
@label=Messaging_DeportedRussia
t$8CF0 DEFM " deported from Russia, FO says rubbish","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(deported-russia)

; Messaging: Denies Smuggling
@label=Messaging_DeniesSmuggling
t$8D17 DEFM " He denies smuggling out"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(denies-smuggling)

; Messaging: Killed In Spain
@label=Messaging_KilledInSpain
t$8D30 DEFM " killed in Spain, while crowd cheers","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(killed-in-spain)

; Messaging: His
@label=Messaging_His
t$8D55 DEFM " His"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(his)

; Messaging: Flown Back To UK
@label=Messaging_FlownBackToUK
t$8D5A DEFM " Bonus pts. will be flown back to the U.K. today","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(flown-back-to-uk)

; Messaging: Successful Clean Up
@label=Messaging_SuccessfulCleanUp
t$8D8B DEFM " successfully cleans up"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(successful-clean-up)

; Messaging: Full Stop
@label=Messaging_FullStop
t$8DA3 DEFM " ","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(full-stop)

; Messaging: And Gains
@label=Messaging_AndGains
t$8DA5 DEFM "  and gains"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(and-gains)

; Messaging: Bonus Pts
@label=Messaging_BonusPts
t$8DB1 DEFM " bonus pts","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(bonus-pts)

; Messaging: Game Complete
@label=Messaging_GameComplete
t$8DBC DEFM " completes round world trip........... time machine found in"," "+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(game-complete)

; Messaging: Famous Trashmen
@label=Messaging_FamousTrashmen
t$8DF9 DEFM "FAMOUS TRASHME","N"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(famous-trashmen)

; Messaging: High Scores
;
; .
;
; .
;
; High score position: #N($01+(#PC-$8E08)/$0B).
@label=Messaging_HighScores
t$8E08 DEFM "       ",$A0 ; Name.
 $8E10 DEFB $00,$00,$00   ; Score.
; High score position: #N($01+(#PC-$8E08)/$0B).
 $8E13 DEFM "       ",$A0 ; Name.
 $8E1B DEFB $00,$00,$00   ; Score.
; High score position: #N($01+(#PC-$8E08)/$0B).
 $8E1E DEFM "       ",$A0 ; Name.
 $8E26 DEFB $00,$00,$00   ; Score.
; High score position: #N($01+(#PC-$8E08)/$0B).
 $8E29 DEFM "       ",$A0 ; Name.
 $8E31 DEFB $00,$00,$00   ; Score.

; Messaging: Change Controls
@label=Messaging_ChangeControls
t$8E34 DEFM "Change of contro","l"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(change-controls)

; Messaging: Change Players
@label=Messaging_ChangePlayers
t$8E45 DEFM "or players reqd","."+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(change-players)

; Key Map: Kempston Joystick
;
; .
;
; .
;
; Right.
@label=KeyMap_Kempston
b$8E55 DEFB $1F      ; Port.
 $8E56 DEFB $00,$01
; Down.
 $8E58 DEFB $1F      ; Port.
 $8E59 DEFB $00,$04
; Left.
 $8E5B DEFB $1F      ; Port.
 $8E5C DEFB $00,$02
; Up.
 $8E5E DEFB $1F      ; Port.
 $8E5F DEFB $00,$08
; Fire.
 $8E61 DEFB $1F      ; Port.
 $8E62 DEFB $00,$10

; Key Map: Interface 2 Joystick
@label=KeyMap_Interface2
b$8E64 DEFB $FE      ; Port.
 $8E65 DEFB $EF,$08
 $8E67 DEFB $FE      ; Port.
 $8E68 DEFB $EF,$04
 $8E6A DEFB $FE      ; Port.
 $8E6B DEFB $EF,$10
 $8E6D DEFB $FE      ; Port.
 $8E6E DEFB $EF,$02
 $8E70 DEFB $FE      ; Port.
 $8E71 DEFB $EF,$01

; Key Map: Cursor Keys
@label=KeyMap_CursorKeys
b$8E73 DEFB $FE      ; Port.
 $8E74 DEFB $EF,$04
 $8E76 DEFB $FE      ; Port.
 $8E77 DEFB $EF,$10
 $8E79 DEFB $FE      ; Port.
 $8E7A DEFB $F7,$10
 $8E7C DEFB $FE      ; Port.
 $8E7D DEFB $EF,$08
 $8E7F DEFB $FE      ; Port.
 $8E80 DEFB $EF,$01

; Table: Locations
;
; .
;
; .
;
; Location #N$01: London (not a "real" location).
@label=London_Location
b$8E82 DEFW $0000                   ; Data:
                                    ; #N((#PEEK(#PC+$01)*$0100)+#PEEK(#PC),$04,$04)
                                    ; (not a level).
@label=London_MapCoordinates
 $8E84 DEFB $6B,$33                 ; Map co-ordinates.
@label=London_Destinations_1
 $8E86 DEFW $8EB2                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8E88 DEFB $00,$01                 ; Cost: "#MONEY".
@label=London_Destinations_2
 $8E8A DEFW $8EC9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8E8C DEFB $50,$01                 ; Cost: "#MONEY".
@label=London_Destinations_3
 $8E8E DEFW $8E9A                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8E90 DEFB $50,$01                 ; Cost: "#MONEY".
@label=London_State
 $8E92 DEFB $03                     ; State: #STATE(#PEEK(#PC)).
@label=London_Name
 $8E93 DEFM " Londo","n"+$80        ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-london)
; Location #N$02: Madrid.
@label=Madrid_Location
 $8E9A DEFW $B496                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Madrid_MapCoordinates
 $8E9C DEFB $68,$3F                 ; Map co-ordinates.
@label=Madrid_Destinations_1
 $8E9E DEFW $8EB2                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EA0 DEFB $00,$01                 ; Cost: "#MONEY".
@label=Madrid_Destinations_2
 $8EA2 DEFW $8F9C                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EA4 DEFB $00,$06                 ; Cost: "#MONEY".
@label=Madrid_Destinations_3
 $8EA6 DEFW $8FB9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EA8 DEFB $00,$07                 ; Cost: "#MONEY".
@label=Madrid_State
 $8EAA DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Madrid_Name
 $8EAB DEFM " Madri","d"+$80        ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-madrid)
; Location #N$03: Paris.
@label=Paris_Location
 $8EB2 DEFW $AAAE                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Paris_MapCoordinates
 $8EB4 DEFB $6D,$38                 ; Map co-ordinates.
@label=Paris_Destinations_1
 $8EB6 DEFW $8E9A                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EB8 DEFB $00,$01                 ; Cost: "#MONEY".
@label=Paris_Destinations_2
 $8EBA DEFW $8EC9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EBC DEFB $00,$01                 ; Cost: "#MONEY".
@label=Paris_Destinations_3
 $8EBE DEFW $8EF9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EC0 DEFB $00,$03                 ; Cost: "#MONEY".
@label=Paris_State
 $8EC2 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Paris_Name
 $8EC3 DEFM " Pari","s"+$80         ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-paris)
; Location #N$04: Munich.
@label=Munich_Location
 $8EC9 DEFW $BA76                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Munich_MapCoordinates
 $8ECB DEFB $74,$37                 ; Map co-ordinates.
@label=Munich_Destinations_1
 $8ECD DEFW $8EB2                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8ECF DEFB $00,$01                 ; Cost: "#MONEY".
@label=Munich_Destinations_2
 $8ED1 DEFW $8EE1                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8ED3 DEFB $50,$02                 ; Cost: "#MONEY".
@label=Munich_Destinations_3
 $8ED5 DEFW $8EF9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8ED7 DEFB $00,$03                 ; Cost: "#MONEY".
@label=Munich_State
 $8ED9 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Munich_Name
 $8EDA DEFM " Munic","h"+$80        ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-munich)
; Location #N$05: Moscow.
@label=Moscow_Location
 $8EE1 DEFW $C753                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Moscow_MapCoordinates
 $8EE3 DEFB $85,$2E                 ; Map co-ordinates.
@label=Moscow_Destinations_1
 $8EE5 DEFW $8EF9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EE7 DEFB $00,$03                 ; Cost: "#MONEY".
@label=Moscow_Destinations_2
 $8EE9 DEFW $8F14                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EEB DEFB $50,$04                 ; Cost: "#MONEY".
@label=Moscow_Destinations_3
 $8EED DEFW $8F2D                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EEF DEFB $00,$06                 ; Cost: "#MONEY".
@label=Moscow_State
 $8EF1 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Moscow_Name
 $8EF2 DEFM " Mosco","w"+$80        ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-moscow)
; Location #N$06: Jerusalem.
@label=Jerusalem_Location
 $8EF9 DEFW $B0CA                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Jerusalem_MapCoordinates
 $8EFB DEFB $88,$47                 ; Map co-ordinates.
@label=Jerusalem_Destinations_1
 $8EFD DEFW $8EC9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8EFF DEFB $00,$03                 ; Cost: "#MONEY".
@label=Jerusalem_Destinations_2
 $8F01 DEFW $8F14                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F03 DEFB $00,$04                 ; Cost: "#MONEY".
@label=Jerusalem_Destinations_3
 $8F05 DEFW $8FB9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F07 DEFB $00,$07                 ; Cost: "#MONEY".
@label=Jerusalem_State
 $8F09 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Jerusalem_Name
 $8F0A DEFM " Jerusale","m"+$80     ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-jerusalem)
; Location #N$07: Benares.
@label=Benares_Location
 $8F14 DEFW $D67D                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Benares_MapCoordinates
 $8F16 DEFB $AD,$52                 ; Map co-ordinates.
@label=Benares_Destinations_1
 $8F18 DEFW $8F2D                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F1A DEFB $00,$03                 ; Cost: "#MONEY".
@label=Benares_Destinations_2
 $8F1C DEFW $8EF9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F1E DEFB $00,$04                 ; Cost: "#MONEY".
@label=Benares_Destinations_3
 $8F20 DEFW $8FB9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F22 DEFB $00,$06                 ; Cost: "#MONEY".
@label=Benares_State
 $8F24 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Benares_Name
 $8F25 DEFM " Benare","s"+$80       ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-benares)
; Location #N$08: Hong Kong.
@label=HongKong_Location
 $8F2D DEFW $C146                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=HongKong_MapCoordinates
 $8F2F DEFB $C7,$51                 ; Map co-ordinates.
@label=HongKong_Destinations_1
 $8F31 DEFW $8F14                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F33 DEFB $00,$03                 ; Cost: "#MONEY".
@label=HongKong_Destinations_2
 $8F35 DEFW $8F48                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F37 DEFB $00,$04                 ; Cost: "#MONEY".
@label=HongKong_Destinations_3
 $8F39 DEFW $8F7E                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F3B DEFB $00,$06                 ; Cost: "#MONEY".
@label=HongKong_State
 $8F3D DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=HongKong_Name
 $8F3E DEFM " Hong Kon","g"+$80     ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-hong-kong)
; Location #N$09: Alice Springs.
@label=AliceSprings_Location
 $8F48 DEFW $C9DD                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=AliceSprings_MapCoordinates
 $8F4A DEFB $D7,$7E                 ; Map co-ordinates.
@label=AliceSprings_Destinations_1
 $8F4C DEFW $8F2D                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F4E DEFB $00,$04                 ; Cost: "#MONEY".
@label=AliceSprings_Destinations_2
 $8F50 DEFW $8F67                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F52 DEFB $00,$04                 ; Cost: "#MONEY".
@label=AliceSprings_Destinations_3
 $8F54 DEFW $8FB9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F56 DEFB $00,$07                 ; Cost: "#MONEY".
@label=AliceSprings_State
 $8F58 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=AliceSprings_Name
 $8F59 DEFM " Alice Spring","s"+$80 ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-alice-springs)
; Location #N$0A: Samoa.
@label=Samoa_Location
 $8F67 DEFW $D1E8                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Samoa_MapCoordinates
 $8F69 DEFB $03,$79                 ; Map co-ordinates.
@label=Samoa_Destinations_1
 $8F6B DEFW $8F48                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F6D DEFB $00,$04                 ; Cost: "#MONEY".
@label=Samoa_Destinations_2
 $8F6F DEFW $8F7E                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F71 DEFB $00,$05                 ; Cost: "#MONEY".
@label=Samoa_Destinations_3
 $8F73 DEFW $8FD0                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F75 DEFB $00,$07                 ; Cost: "#MONEY".
@label=Samoa_State
 $8F77 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Samoa_Name
 $8F78 DEFM " Samo","a"+$80         ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-samoa)
; Location #N$0B: Chichen Itza.
@label=ChichenItza_Location
 $8F7E DEFW $DA90                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=ChichenItza_MapCoordinates
 $8F80 DEFB $22,$57                 ; Map co-ordinates.
@label=ChichenItza_Destinations_1
 $8F82 DEFW $8F9C                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F84 DEFB $50,$01                 ; Cost: "#MONEY".
@label=ChichenItza_Destinations_2
 $8F86 DEFW $8F67                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F88 DEFB $00,$05                 ; Cost: "#MONEY".
@label=ChichenItza_Destinations_3
 $8F8A DEFW $8FD0                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8F8C DEFB $00,$06                 ; Cost: "#MONEY".
@label=ChichenItza_State
 $8F8E DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=ChichenItza_Name
 $8F8F DEFM " Chichen Itz","a"+$80  ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-chichen-itza)
; Location #N$0C: New Orleans.
@label=NewOrleans_Location
 $8F9C DEFW $DE4C                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=NewOrleans_MapCoordinates
 $8F9E DEFB $22,$4C                 ; Map co-ordinates.
@label=NewOrleans_Destinations_1
 $8FA0 DEFW $8F7E                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FA2 DEFB $50,$01                 ; Cost: "#MONEY".
@label=NewOrleans_Destinations_2
 $8FA4 DEFW $8E9A                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FA6 DEFB $00,$06                 ; Cost: "#MONEY".
@label=NewOrleans_Destinations_3
 $8FA8 DEFW $8F67                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FAA DEFB $00,$06                 ; Cost: "#MONEY".
@label=NewOrleans_State
 $8FAC DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=NewOrleans_Name
 $8FAD DEFM " New Orlean","s"+$80   ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-new-orleans)
; Location #N$0D: Kanyu.
@label=Kanyu_Location
 $8FB9 DEFW $E10B                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=Kanyu_MapCoordinates
 $8FBB DEFB $7E,$7A                 ; Map co-ordinates.
@label=Kanyu_Destinations_1
 $8FBD DEFW $8F14                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FBF DEFB $00,$06                 ; Cost: "#MONEY".
@label=Kanyu_Destinations_2
 $8FC1 DEFW $8FD0                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FC3 DEFB $00,$06                 ; Cost: "#MONEY".
@label=Kanyu_Destinations_3
 $8FC5 DEFW $8EF9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FC7 DEFB $00,$07                 ; Cost: "#MONEY".
@label=Kanyu_State
 $8FC9 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=Kanyu_Name
 $8FCA DEFM " Kany","u"+$80         ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-kanyu)
; Location #N$0E: Sao Paulo.
@label=SaoPaulo_Location
 $8FD0 DEFW $E716                   ; Data:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
@label=SaoPaulo_MapCoordinates
 $8FD2 DEFB $46,$7E                 ; Map co-ordinates.
@label=SaoPaulo_Destinations_1
 $8FD4 DEFW $8FB9                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FD6 DEFB $00,$06                 ; Cost: "#MONEY".
@label=SaoPaulo_Destinations_2
 $8FD8 DEFW $8F7E                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FDA DEFB $00,$06                 ; Cost: "#MONEY".
@label=SaoPaulo_Destinations_3
 $8FDC DEFW $8F67                   ; Location:
                                    ; #R((#PEEK(#PC+$01)*$0100)+#PEEK(#PC)).
 $8FDE DEFB $00,$07                 ; Cost: "#MONEY".
@label=SaoPaulo_State
 $8FE0 DEFB $00                     ; State: #STATE(#PEEK(#PC)).
@label=SaoPaulo_Name
 $8FE1 DEFM " Sao Paul","o"+$80     ; #FONT#(:(#STR(#PC)))$F840,attr=$4E(location-sao-paulo)

; Data block at 8FEB
b$8FEB DEFB $7E,$0E,$54,$07,$3F,$07,$38,$0E
 $8FF3 DEFB $29,$0E,$2C,$0E,$32,$07,$3F,$15
 $8FFB DEFB $7E,$0E,$7E,$0E,$7E,$0E,$7E,$0E
 $9003 DEFB $7E,$0E,$7E,$0E,$54,$07,$3F,$07
 $900B DEFB $38,$0E,$29,$0E,$2C,$0E,$20,$07
 $9013 DEFB $2C,$15,$E4,$0E,$E4,$0E,$E4,$0E
 $901B DEFB $E4,$0E,$E4,$0E,$E4,$0E,$1B,$07
 $9023 DEFB $1F,$07,$20,$0E,$29,$0E,$38,$0E
 $902B DEFB $4A,$0E,$58,$0E,$E4,$0E,$E4,$0E
 $9033 DEFB $E4,$0E,$E4,$0E,$E4,$0E,$E4,$0E
 $903B DEFB $54,$0E,$3F,$0E,$29,$0E,$2C,$0E
 $9043 DEFB $2C,$0E,$29,$0E,$A8,$0E,$A8,$0E
 $904B DEFB $A8,$0E,$A8,$0E,$A8,$0E,$00

; Initialise Sub-Game
;
; Used by the routine at #R$883C.
@label=Initialise_SubGame
c$9052 CALL $908B    ; Call #R$908B.
 $9055 CALL $9126    ; Call #R$9126.
 $9058 CALL $90A2    ; Call #R$90A2.
 $905B CALL $90FC    ; Call #R$90FC.
 $905E CALL $9194    ; Call #R$9194.
 $9061 LD HL,($99D1) ; {Write *#R$99D1 to *#R$92BD(#N$92BE).
 $9064 LD ($92BE),HL ; }
 $9067 LD HL,($99D5) ; {Write *#R$99D5 to *#R$7204.
 $906A LD ($7204),HL ; }
 $906D LD HL,$9A32   ; {Write #R$9A32 to *#R$99BA.
 $9070 LD ($99BA),HL ; }
 $9073 LD HL,$99F0   ; {Write #R$99F0 to *#R$99A7.
 $9076 LD ($99A7),HL ; }
; #HTML(Self-modifying code; alters the <code>CALL</code> location target
; below.)
 $9079 LD HL,($99D3) ; {Call the routine pointed to by *#R$99D3.
 $907C LD ($9080),HL ;
 $907F CALL $0000    ; }
 $9082 CALL $9134    ; Call #R$9134.
 $9085 CALL $9163    ; Call #R$9163.
 $9088 JP $9270      ; Jump to #R$9270.

; Copy Sub-Game Data
;
; Used by the routine at #R$9052.
@label=CopySubGameData
c$908B LD IX,($EFF2) ; #REGix=*#R$EFF2.
 $908F LD L,(IX+$08) ; {Fetch the players current location and store it in
 $9092 LD H,(IX+$09) ; #REGhl.}
 $9095 LD A,(HL)     ; {Store a pointer to the current locations game data in
 $9096 INC HL        ; #REGhl.
 $9097 LD H,(HL)     ;
 $9098 LD L,A        ; }
 $9099 LD DE,$99C4   ; {Copy #N($002F,$04,$04) bytes from *#REGhl to *#R$99C4.
 $909C LD BC,$002F   ;
 $909F LDIR          ; }
 $90A1 RET           ; Return.

; Routine at 90A2
;
; Used by the routine at #R$9052.
c$90A2 LD IX,$6240   ; #REGix=#R$6240.
 $90A6 LD HL,($99C4) ; #REGhl=*#R$99C4.
*$90A9 LD A,(HL)     ; #REGa=*#REGhl.
 $90AA CP $00        ; {Jump to #R$90CA if *#REGa is equal to #N$00.
 $90AC JR Z,$90CA    ; }
 $90AE LD B,A        ; {Split *#REGhl in half, the upper four bits into #REGa
 $90AF SRL B         ; and the lower four bits into #REGb.
 $90B1 SRL B         ;
 $90B3 SRL B         ;
 $90B5 SRL B         ;
 $90B7 AND %00001111 ;
 $90B9 RLCA          ;
 $90BA RLCA          ;
 $90BB RLCA          ; }
 $90BC PUSH HL       ; {Stash #REGhl, #REGbc and #REGaf on the stack.
*$90BD PUSH BC       ;
 $90BE PUSH AF       ; }
 $90BF CALL $90E8    ; Call #R$90E8.
 $90C2 POP AF        ; {Restore #REGaf and #REGbc from the stack.
 $90C3 POP BC        ; }
 $90C4 DJNZ $90BD    ; Decrease counter by one and loop back to #R$90BD until
                     ; counter is zero.
 $90C6 POP HL        ; Restore #REGhl from the stack.
 $90C7 INC HL        ; Increment #REGhl by one.
 $90C8 JR $90A9      ; Jump to #R$90A9.
*$90CA LD IX,$7800   ; #REGix=#R$7800.
 $90CE LD HL,$6000   ; #REGhl=#R$6000.
 $90D1 LD BC,$0300   ; #REGbc=#N($0300,$04,$04).
 $90D4 LD DE,$0006   ; Set an increment count in #REGde for below.
*$90D7 LD (IX+$01),L ; Write #REGl to *#REGix+#N$01.
 $90DA LD (IX+$00),H ; Write #REGh to *#REGix+#N$00.
 $90DD INC IX        ; {Increment #REGix by two.
 $90DF INC IX        ; }
 $90E1 ADD HL,DE     ; #REGhl+=#N($0006,$04,$04).
 $90E2 DEC BC        ; Decrease #REGbc by one.
 $90E3 LD A,C        ; {Jump back to #R$90D7 until #REGbc is zero.
 $90E4 OR B          ;
 $90E5 JR NZ,$90D7   ; }
 $90E7 RET           ; Return.
*$90E8 LD DE,($99C6) ; #REGde=*#R$99C6.
 $90EC ADD A,E       ; #REGa+=#REGe.
 $90ED JR NC,$90F0   ; Jump to #R$90F0 if #REGbc is higher.
 $90EF INC D         ; Increment #REGd by one.
*$90F0 LD (IX+$02),A ; Write #REGa to *#REGix+#N$02.
 $90F3 LD (IX+$03),D ; Write #REGd to *#REGix+#N$03.
 $90F6 LD DE,$0006   ; {#REGix+=#N($0006,$04,$04).
 $90F9 ADD IX,DE     ; }
 $90FB RET           ; Return.

; Routine at 90FC
;
; Used by the routine at #R$9052.
c$90FC LD HL,($99C8) ; #REGhl=*#R$99C8.
 $90FF LD IX,$6240   ; #REGix=#R$6240.
*$9103 LD A,$00      ; #REGa=#N$00.
 $9105 RLD           ; RLD.
 $9107 RET Z         ; Return if {} is zero.
 $9108 LD B,A        ; #REGb=#REGa.
 $9109 RLD           ; RLD.
 $910B LD C,A        ; #REGc=#REGa.
 $910C RLD           ; RLD.
 $910E LD DE,($99CA) ; #REGde=*#R$99CA.
 $9112 LD A,C        ; #REGa=#REGc.
 $9113 ADD A,E       ; #REGa+=#REGe.
 $9114 JR NC,$9117   ; Jump to #R$9117 if #REGd is higher.
 $9116 INC D         ; Increment #REGd by one.
*$9117 LD E,A        ; #REGe=#REGa.
 $9118 LD A,(DE)     ; #REGa=*#REGde.
 $9119 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
*$911C LD (IX+$04),A ; Write #REGa to *#REGix+#N$04.
 $911F ADD IX,DE     ; #REGix+=#REGde.
 $9121 DJNZ $911C    ; Decrease counter by one and loop back to #R$911C until
                     ; counter is zero.
 $9123 INC HL        ; Increment #REGhl by one.
 $9124 JR $9103      ; Jump to #R$9103.

; Clear Shadow Buffer
;
; Used by the routine at #R$9052.
@label=ClearShadowBuffer
c$9126 LD HL,$6000   ; {Write #N$00 to #N($2000,$04,$04) bytes starting from
 $9129 LD DE,$6001   ; #R$6000.
 $912C LD BC,$1FFF   ;
 $912F LD (HL),$00   ;
 $9131 LDIR          ; }
 $9133 RET           ; Return.

; Copy Buffer To Screen
;
; Used by the routine at #R$9052.
@label=CopyBufferToScreen
c$9134 LD BC,$2012   ; Set the size of the playarea in #REGbc (width #N$20,
                     ; height #N$12).
 $9137 LD HL,$78C0   ; #REGhl=#R$78C0.
@label=CopyBufferToScreen_Loop
*$913A PUSH BC       ; {Stash the playarea size and #REGhl on the stack.
 $913B PUSH HL       ; }
 $913C CALL $9562    ; Call #R$9562.
 $913F POP HL        ; Restore #REGhl from the stack.
 $9140 INC HL        ; {Increment #REGhl by two.
 $9141 INC HL        ; }
 $9142 POP BC        ; Restore the playarea size from the stack.
 $9143 DJNZ $913A    ; Decrease the playarea width counter by one and loop back to #R$913A
                     ; the whole width has been drawn for this line.
 $9145 LD B,$20      ; Reset the playarea width in #REGb back to #N$20.
 $9147 DEC C         ; Decrease the playarea height counter by one.
 $9148 JR NZ,$913A   ; Jump to #R$913A until all the playarea lines have been
                     ; drawn.
 $914A LD HL,$4040   ; #REGhl=#N$4040 (screen buffer location).
 $914D LD C,$20      ; #REGc=#N$20.
 $914F CALL $8A76    ; Call #R$8A76.
 $9152 LD HL,$50A0   ; #REGhl=#N$50A0 (screen buffer location).
 $9155 LD C,$60      ; #REGc=#N$60.
 $9157 JP $8A76      ; Jump to #R$8A76.

; Copy UDG To Screen
;
; Used by the routines at #R$9562 and #R$9712.
;
; DE Destination screen buffer address
; HL Source UDG address
@label=CopyUDGToScreen
c$915A LD B,$08      ; #REGb=#N$08.
@label=CopyUDGToScreen_Loop
*$915C LD A,(HL)     ; #REGa=*#REGhl.
 $915D LD (DE),A     ; Write #REGa to *#REGde.
 $915E INC HL        ; Increment #REGhl by one.
 $915F INC D         ; Increment #REGd by one.
 $9160 DJNZ $915C    ; Decrease counter by one and loop back to #R$915C until
                     ; counter is zero.
 $9162 RET           ; Return.

; Paint Header And Footer
;
; Used by the routine at #R$9052.
@label=PaintHeaderFooter
c$9163 LD A,($99CC)  ; #REGa=*#R$99CC.
 $9166 LD C,A        ; Stash this value temporarily in #REGc.
 $9167 AND %00111000 ; Keep only bits 3-5.
 $9169 RRCA          ; {RRCA.
 $916A RRCA          ;
 $916B RRCA          ; }
 $916C OUT ($FE),A   ; Set border to the colour held by #REGa.
 $916E LD ($99CC),A  ; Write #REGa to *#R$99CC.
 $9171 LD A,C        ; Restore the original value of #REGa.
 $9172 LD HL,$5800   ; #REGhl=#N$5800 (screen buffer location).
 $9175 CALL $918D    ; Call #R$918D.
 $9178 LD HL,$5AA0   ; #REGhl=#N$5AA0 (attribute buffer location).
 $917B CALL $918D    ; Call #R$918D.
 $917E LD B,$12      ; Set a counter in #REGb for the playarea height: #N$12.
 $9180 LD DE,$001F   ; #REGde=#N($001F,$04,$04).
 $9183 LD HL,$5860   ; #REGhl=#N$5860 (attribute buffer location).
@label=PaintRightHandSide_Loop
*$9186 LD (HL),A     ; Write #REGa to *#REGhl.
 $9187 ADD HL,DE     ; #REGhl+=#REGde.
 $9188 LD (HL),A     ; Write #REGa to *#REGhl.
 $9189 INC HL        ; Increment #REGhl by one.
 $918A DJNZ $9186    ; Decrease counter by one and loop back to #R$9186 until
                     ; counter is zero.
 $918C RET           ; Return.

; Handler: Paint Header And Footer
;
; Used by the routine at #R$9163.
;
; A Attribute value to write
; HL Screen buffer address
@label=Handler_PaintHeaderFooter
c$918D LD B,$60      ; Set a counter in #REGb for #N$03 whole lines.
@label=Handler_PaintHeaderFooter_Loop
*$918F LD (HL),A     ; Write the attribute byte to *#REGhl.
 $9190 INC HL        ; Increment #REGhl by one.
 $9191 DJNZ $918F    ; Decrease the counter by one and loop back to #R$918F
                     ; until the counter is zero.
 $9193 RET           ; Return.

; Routine at 9194
;
; Used by the routine at #R$9052.
c$9194 LD DE,$0006     ; #REGde=#N($0006,$04,$04).
 $9197 LD HL,($99CD)   ; #REGhl=*#R$99CD.
 $919A LD IX,$6240     ; #REGix=#R$6240.
*$919E LD A,(HL)       ; #REGa=*#REGhl.
 $919F LD B,A          ; #REGb=#REGa.
 $91A0 SRL B           ; {Shift #REGb right two positions.
 $91A2 SRL B           ; }
 $91A4 JR Z,$91B6      ; Jump to #R$91B6 if #REGhl is zero.
 $91A6 AND %00000011   ; Keep only bits 0-1.
 $91A8 LD C,A          ; #REGc=#REGa.
 $91A9 SRL C           ; Shift #REGc right.
 $91AB RLA             ; RLA.
 $91AC AND %00000011   ; Keep only bits 0-1.
 $91AE OR %00000100    ; Set bits 2.
 $91B0 CALL $921B      ; Call #R$921B.
 $91B3 INC HL          ; Increment #REGhl by one.
 $91B4 JR $919E        ; Jump to #R$919E.
*$91B6 LD IX,$6000     ; #REGix=#R$6000.
 $91BA LD C,$07        ; #REGc=#N$07.
 $91BC LD A,$01        ; #REGa=#N$01.
 $91BE LD B,$60        ; #REGb=#N$60.
 $91C0 CALL $921B      ; Call #R$921B.
 $91C3 LD IX,$6FC0     ; #REGix=#R$6FC0.
 $91C7 LD B,$60        ; #REGb=#N$60.
 $91C9 CALL $921B      ; Call #R$921B.
 $91CC LD B,$12        ; #REGb=#N$12.
 $91CE LD IX,$6240     ; #REGix=#R$6240.
 $91D2 LD DE,$00C0     ; #REGde=#N($00C0,$04,$04).
*$91D5 LD (IX+$00),$05 ; Write #N$05 to *#REGix+#N$00.
 $91D9 LD (IX+$01),$07 ; Write #N$07 to *#REGix+#N$01.
 $91DD ADD IX,DE       ; #REGix+=#REGde.
 $91DF LD (IX-$06),$05 ; Write #N$05 to *#REGix+#N$FA.
 $91E3 LD (IX-$05),$07 ; Write #N$07 to *#REGix+#N$FB.
 $91E7 DJNZ $91D5      ; Decrease counter by one and loop back to #R$91D5 until
                       ; counter is zero.
 $91E9 LD IX,$6F06     ; #REGix=#N$6F06.
 $91ED LD BC,$121E     ; #REGbc=#N$121E.
 $91F0 LD DE,$FF40     ; #REGde=#R$FF40.
*$91F3 PUSH BC         ; Stash #REGbc on the stack.
 $91F4 PUSH IX         ; Stash #REGix on the stack.
 $91F6 LD A,$06        ; #REGa=#N$06.
*$91F8 BIT 0,(IX+$01)  ; Test bit 0 of *#REGix+#N$01.
 $91FC JR NZ,$9213     ; Jump to #R$9213 if #REGhl is not zero.
 $91FE LD A,$00        ; #REGa=#N$00.
*$9200 LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $9203 ADD IX,DE       ; #REGix+=#REGde.
 $9205 DJNZ $91F8      ; Decrease counter by one and loop back to #R$91F8 until
                       ; counter is zero.
 $9207 POP IX          ; Restore #REGix from the stack.
 $9209 LD BC,$0006     ; #REGbc=#N($0006,$04,$04).
 $920C ADD IX,BC       ; #REGix+=#REGbc.
 $920E POP BC          ; Restore #REGbc from the stack.
 $920F DEC C           ; Decrease #REGc by one.
 $9210 JR NZ,$91F3     ; Jump to #R$91F3 if #REGc is not zero.
 $9212 RET             ; Return.
*$9213 CP $06          ; Compare #REGa with #N$06.
 $9215 JR Z,$9200      ; Jump to #R$9200 if #REGa is zero.
 $9217 ADD A,$01       ; #REGa+=#N$01.
 $9219 JR $9200        ; Jump to #R$9200.
*$921B LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $921E LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $9221 ADD IX,DE       ; #REGix+=#REGde.
 $9223 DJNZ $921B      ; Decrease counter by one and loop back to #R$921B until
                       ; counter is zero.
 $9225 RET             ; Return.

; Routine at 9226
;
; Used by the routines at #R$AADA, #R$B5A7, #R$BAB5 and #R$E137.
c$9226 PUSH BC       ; Stash #REGbc on the stack.
 $9227 LD A,(IX+$04) ; {Write *#REGix+#N$04 to *#R$99AA.
 $922A LD ($99AA),A  ; }
 $922D LD A,$00      ; #REGa=#N$00.
 $922F LD E,(IX+$00) ; #REGe=*#REGix+#N$00.
 $9232 LD D,(IX+$01) ; #REGd=*#REGix+#N$01.
 $9235 PUSH IX       ; Stash #REGix on the stack.
 $9237 PUSH DE       ; Stash #REGde on the stack.
 $9238 POP IX        ; Restore #REGix from the stack.
 $923A CALL $95C6    ; Call #R$95C6.
 $923D POP IX        ; Restore #REGix from the stack.
 $923F LD L,(IX+$02) ; #REGl=*#REGix+#N$02.
 $9242 LD H,(IX+$03) ; #REGh=*#REGix+#N$03.
 $9245 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $9248 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $924B LD A,$00      ; #REGa=#N$00.
 $924D PUSH IX       ; Stash #REGix on the stack.
 $924F CALL $9427    ; Call #R$9427.
 $9252 POP IX        ; Restore #REGix from the stack.
 $9254 LD DE,$0005   ; #REGde=#N($0005,$04,$04).
 $9257 ADD IX,DE     ; #REGix+=#REGde.
 $9259 LD DE,($926E) ; #REGde=*#R$926E.
 $925D LD HL,$99F0   ; #REGhl=#R$99F0.
 $9260 LD ($99A7),HL ; Write #REGhl to *#R$99A7.
 $9263 LD HL,($99B8) ; #REGhl=*#R$99B8.
 $9266 ADD HL,DE     ; #REGhl+=#REGde.
 $9267 LD ($99B8),HL ; Write #REGhl to *#R$99B8.
 $926A POP BC        ; Restore #REGbc from the stack.
 $926B DJNZ $9226    ; Decrease counter by one and loop back to #R$9226 until
                     ; counter is zero.
 $926D RET           ; Return.
 $926E NOP           ; No operation.
 $926F NOP           ; No operation.

; Routine at 9270
;
; Used by the routine at #R$9052.
c$9270 LD ($99AE),SP ; Write #REGsp to *#R$99AE.
 $9274 LD A,($99E2)  ; #REGa=*#R$99E2.
 $9277 LD ($99AC),A  ; Write #REGa to *#R$99AC.
 $927A LD ($99AD),A  ; Write #REGa to *#R$99AD.
 $927D LD A,($99EE)  ; #REGa=*#R$99EE.
 $9280 LD ($99AA),A  ; Write #REGa to *#R$99AA.
 $9283 LD HL,($99E7) ; #REGhl=*#R$99E7.
 $9286 LD DE,$0007   ; #REGde=#N($0007,$04,$04).
 $9289 ADD HL,DE     ; #REGhl+=#REGde.
 $928A LD (HL),$01   ; Write #N$01 to *#REGhl.
 $928C LD HL,$7208   ; #REGhl=#N$7208.
 $928F LD ($99B8),HL ; Write #REGhl to *#R$99B8.
 $9292 CALL $9346    ; Call #R$9346.
 $9295 LD A,$00      ; #REGa=#N$00.
 $9297 LD ($99AB),A  ; Write #REGa to *#R$99AB.
 $929A LD A,($99EF)  ; #REGa=*#R$99EF.
 $929D LD ($7207),A  ; Write #REGa to *#N$7207.
*$92A0 CALL $8079    ; Call #R$8079.
 $92A3 LD HL,$7207   ; #REGhl=#N$7207.
 $92A6 DEC (HL)      ; Decrease *#REGhl by one.
 $92A7 JP P,$92B0    ; Jump to #R$92B0 P.
 $92AA LD A,($99EF)  ; #REGa=*#R$99EF.
 $92AD LD ($7207),A  ; Write #REGa to *#N$7207.
*$92B0 CALL $953F    ; Call #R$953F.
 $92B3 LD DE,$99F0   ; #REGde=#R$99F0.
 $92B6 LD ($99A7),DE ; Write #REGde to *#R$99A7.
 $92BA CALL $92C5    ; Call #R$92C5.
; Self-modifying code. See; #R$9052.
 $92BD CALL $92C5    ; Call #R$92C5.
 $92C0 CALL $9634    ; Call #R$9634.
 $92C3 JR $92A0      ; Jump to #R$92A0.

; Routine at 92C5
;
; Used by the routine at #R$9270.
c$92C5 LD A,($7207)   ; {Return if *#N$7207 is not equal to #N$00.
 $92C8 CP $00         ;
 $92CA RET NZ         ; }
 $92CB LD A,($99EE)   ; {Write *#R$99EE to *#R$99AA.
 $92CE LD ($99AA),A   ; }
 $92D1 LD HL,$7200    ; #REGhl=#R$7200.
 $92D4 CALL $9439     ; Call #R$9439.
 $92D7 LD IX,$7200    ; #REGix=#R$7200.
 $92DB BIT 6,(IX+$06) ; Test bit 6 of *#REGix+#N$06.
 $92DF JR NZ,$931E    ; Jump to #R$931E if #REGa is not zero.
 $92E1 LD A,($7238)   ; {Jump to #R$9303 if *#N$7238 is equal to #N$00.
 $92E4 CP $00         ;
 $92E6 JR Z,$9303     ; }
 $92E8 DEC A          ; Decrease #REGa by one.
 $92E9 LD ($7238),A   ; Write #REGa to *#N$7238.
 $92EC BIT 2,A        ; Test bit 2 of #REGa.
 $92EE JR NZ,$9303    ; Jump to #R$9303 if #REGa is not zero.
 $92F0 AND %00000011  ; Keep only bits 0-1.
 $92F2 CP $03         ; Compare #REGa with #N$03.
 $92F4 LD A,($7206)   ; #REGa=*#N$7206.
 $92F7 CALL Z,$9619   ; Call #R$9619 zero.
 $92FA AND %00011000  ; Keep only bits 3-4.
 $92FC LD E,A         ; #REGe=#REGa.
 $92FD LD IX,$7200    ; #REGix=#R$7200.
 $9301 JR $9309       ; Jump to #R$9309.
*$9303 CALL $936C     ; Call #R$936C.
 $9306 CP $20         ; {Return if #REGa is equal to #N$20.
 $9308 RET Z          ; }
*$9309 LD A,($7206)   ; #REGa=*#N$7206.
 $930C AND %00011000  ; Keep only bits 3-4.
 $930E CP E           ; {Jump to #R$9316 if #REGa is equal to #REGe.
 $930F JR Z,$9316     ; }
*$9311 LD (IX+$06),E  ; Write #REGe to *#REGix+#N$06.
 $9314 JR $933B       ; Jump to #R$933B.
*$9316 BIT 5,(IX+$06) ; Test bit 5 of *#REGix+#N$06.
 $931A JR Z,$9324     ; Jump to #R$9324 if #REGa is zero.
 $931C JR $9311       ; Jump to #R$9311.
*$931E RES 6,(IX+$06) ; Reset bit 6 of *#REGix+#N$06.
 $9322 JR $933B       ; Jump to #R$933B.
*$9324 LD HL,($7201)  ; #REGhl=*#N$7201.
 $9327 CALL $9375     ; Call #R$9375.
 $932A BIT 5,A        ; Test bit 5 of #REGa.
 $932C RET NZ         ; Return if {} is not zero.
 $932D BIT 4,A        ; Test bit 4 of #REGa.
 $932F JR NZ,$935C    ; Jump to #R$935C if #REGa is not zero.
 $9331 BIT 0,A        ; Test bit 0 of #REGa.
 $9333 RET NZ         ; Return if {} is not zero.
 $9334 LD ($7204),HL  ; Write #REGhl to *#N$7204.
 $9337 SET 5,(IX+$06) ; Set bit 5 of *#REGix+#N$06.
*$933B LD IX,$7200    ; #REGix=#R$7200.
 $933F LD BC,($99BA)  ; #REGbc=*#R$99BA.
 $9343 CALL $9403     ; Call #R$9403.
; This entry point is used by the routine at #R$9270.
*$9346 LD A,($7206)   ; #REGa=*#N$7206.
 $9349 LD IX,($99BA)  ; #REGix=#R$99BA.
 $934D CALL $95C6     ; Call #R$95C6.
 $9350 LD IX,$7200    ; #REGix=#R$7200.
 $9354 LD BC,($99BA)  ; #REGbc=*#R$99BA.
 $9358 CALL $941E     ; Call #R$941E.
 $935B RET            ; Return.
*$935C SET 6,(IX+$06) ; Set bit 6 of *#REGix+#N$06.
 $9360 CALL $939D     ; Call #R$939D.
 $9363 LD DE,$7208    ; {Write #N$7208 to *#R$99B8.
 $9366 LD ($99B8),DE  ; }
 $936A JR $933B       ; Jump to #R$933B.
*$936C CALL $85E7     ; Call #R$85E7.
 $936F LD A,E         ; {Return if #REGe is not equal to #N$28.
 $9370 CP $28         ;
 $9372 RET NZ         ; }
 $9373 POP HL         ; Restore #REGhl from the stack.
 $9374 RET            ; Return.

; Routine at 9375
;
; Used by the routines at #R$92C5, #R$AB17, #R$B113, #R$B6BC, #R$BB05, #R$C7B6
; and #R$CA09.
c$9375 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
; This entry point is used by the routines at #R$AB17, #R$C36B, #R$CA09,
; #R$E194 and #R$E7C3.
*$9378 AND %00011000 ; Keep only bits 3-4.
 $937A RRCA          ; RRCA.
 $937B RRCA          ; RRCA.
 $937C LD C,A        ; #REGc=#REGa.
 $937D LD B,$00      ; #REGb=#N$00.
 $937F PUSH IX       ; Stash #REGix on the stack.
 $9381 LD IX,$99B0   ; #REGix=#R$99B0.
 $9385 ADD IX,BC     ; #REGix+=#REGbc.
 $9387 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $938A LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $938D ADD HL,BC     ; #REGhl+=#REGbc.
 $938E PUSH HL       ; Stash #REGhl on the stack.
 $938F PUSH HL       ; {#REGix=#REGhl (using the stack).
 $9390 POP IX        ; }
 $9392 LD H,(IX+$00) ; #REGh=*#REGix+#N$00.
 $9395 LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $9398 LD A,(HL)     ; #REGa=*#REGhl.
 $9399 POP HL        ; Restore #REGhl from the stack.
 $939A POP IX        ; Restore #REGix from the stack.
 $939C RET           ; Return.

; Routine at 939D
;
; Used by the routines at #R$92C5 and #R$E7C3.
c$939D LD B,H          ; #REGb=#REGh.
 $939E LD C,L          ; #REGc=#REGl.
 $939F LD DE,$000A     ; #REGde=#N($000A,$04,$04).
 $93A2 LD IX,$7E00     ; #REGix=#R$7E00.
*$93A6 BIT 0,(IX+$00)  ; Test bit 0 of *#REGix+#N$00.
 $93AA JR Z,$93B7      ; Jump to #R$93B7 if #REGa is zero.
 $93AC LD L,(IX+$01)   ; #REGl=*#REGix+#N$01.
 $93AF LD H,(IX+$02)   ; #REGh=*#REGix+#N$02.
 $93B2 AND A           ; Set flags.
 $93B3 SBC HL,BC       ; #REGhl-=#REGbc.
 $93B5 JR Z,$93BB      ; Jump to #R$93BB if #REGa is zero.
*$93B7 ADD IX,DE       ; #REGix+=#REGde.
 $93B9 JR $93A6        ; Jump to #R$93A6.
*$93BB LD L,(IX+$05)   ; #REGl=*#REGix+#N$05.
 $93BE LD H,(IX+$06)   ; #REGh=*#REGix+#N$06.
 $93C1 LD DE,($99C6)   ; #REGde=*#R$99C6.
 $93C5 SBC HL,DE       ; #REGhl-=#REGde (with carry).
 $93C7 JR NZ,$93CE     ; Jump to #R$93CE if #REGa is not zero.
 $93C9 LD HL,$7238     ; {Write #N$80 to *#N$7238.
 $93CC LD (HL),$80     ; }
*$93CE LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $93D2 CALL $93E9      ; Call #R$93E9.
 $93D5 LD A,($99AB)    ; #REGa=*#R$99AB.
 $93D8 SUB $01         ; #REGa-=#N$01.
 $93DA DAA             ; DAA.
 $93DB LD ($99AB),A    ; Write #REGa to *#R$99AB.
 $93DE LD HL,$7200     ; {Write #N$01 to *#R$7200.
 $93E1 LD (HL),$01     ; }
 $93E3 LD HL,$EFFF     ; #REGhl=#R$EFFF.
 $93E6 SET 3,(HL)      ; Set bit 3 of *#REGhl.
 $93E8 RET             ; Return.

; Routine at 93E9
;
; Used by the routines at #R$939D and #R$AB17.
c$93E9 LD DE,$0003   ; {#REGix+=#N($0003,$04,$04).
 $93EC ADD IX,DE     ; }
 $93EE PUSH IX       ; {#REGde=#REGix (using the stack).
 $93F0 POP DE        ; }
 $93F1 LD HL,$9478   ; {Write #R$9478 to *#R$9462(#N$9463).
 $93F4 LD ($9463),HL ; }
 $93F7 LD L,C        ; #REGl=#REGc.
 $93F8 LD H,B        ; #REGh=#REGb.
 $93F9 LD IX,($99CF) ; #REGix=*#R$99CF.
 $93FD LD A,$00      ; #REGa=#N$00.
 $93FF CALL $9447    ; Call #R$9447.
 $9402 RET           ; Return.

; Routine at 9403
;
; Used by the routines at #R$92C5, #R$97D7, #R$9942 and #R$C172.
c$9403 LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $9406 LD H,(IX+$02) ; #REGh=*#REGix+#N$02.
 $9409 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $940C LD DE,$9478   ; {Write #R$9478 to *#R$9462(#N$9463).
 $940F LD ($9463),DE ; }
 $9413 LD DE,($99B8) ; #REGde=*#R$99B8.
 $9417 PUSH BC       ; {#REGix=#REGbc (using the stack).
 $9418 POP IX        ; }
 $941A CALL $9447    ; Call #R$9447.
 $941D RET           ; Return.

; Routine at 941E
;
; Used by the routines at #R$92C5, #R$97D7, #R$9926 and #R$C172.
c$941E LD L,(IX+$04) ; #REGl=*#REGix+#N$04.
 $9421 LD H,(IX+$05) ; #REGh=*#REGix+#N$05.
 $9424 LD A,(IX+$06) ; #REGa=*#REGix+#N$06.
; This entry point is used by the routine at #R$9226.
*$9427 LD DE,$94CC   ; {Write #R$94CC to *#R$9462(#N$9463).
 $942A LD ($9463),DE ; }
 $942E LD DE,($99B8) ; #REGde=*#R$99B8.
 $9432 PUSH BC       ; {#REGix=#REGbc (using the stack).
 $9433 POP IX        ; }
 $9435 CALL $9447    ; Call #R$9447.
 $9438 RET           ; Return.

; Routine at 9439
;
; Used by the routines at #R$92C5, #R$97D7, #R$98F2, #R$AB17, #R$B113, #R$B6BC,
; #R$BB05, #R$C172, #R$C36B, #R$C77F, #R$C7B6, #R$CA09, #R$E137, #R$E194 and
; #R$E7C3.
c$9439 INC HL        ; Increment #REGhl by one.
 $943A LD E,L        ; #REGe=#REGl.
 $943B LD D,H        ; #REGd=#REGh.
 $943C LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $943F ADD HL,BC     ; #REGhl+=#REGbc.
 $9440 LDIR          ; LDIR.
 $9442 INC HL        ; Increment #REGhl by one.
 $9443 LD ($99B8),HL ; Write #REGhl to *#R$99B8.
 $9446 RET           ; Return.

; Routine at 9447
;
; Used by the routines at #R$93E9, #R$9403, #R$941E and #R$9762.
c$9447 LD C,A        ; #REGc=#REGa.
 $9448 LD B,$00      ; #REGb=#N$00.
 $944A ADD IX,BC     ; #REGix+=#REGbc.
 $944C LD C,(IX+$06) ; #REGc=*#REGix+#N$06.
 $944F LD B,(IX+$07) ; #REGb=*#REGix+#N$07.
 $9452 ADD HL,BC     ; #REGhl+=#REGbc.
 $9453 LD C,(IX+$02) ; #REGc=*#REGix+#N$02.
 $9456 LD B,(IX+$03) ; #REGb=*#REGix+#N$03.
 $9459 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $945A POP IX        ; }
; This entry point is used by the routine at #R$9465.
*$945C PUSH BC       ; {Stash #REGbc and #REGix on the stack.
 $945D PUSH IX       ; }
; This entry point is used by the routine at #R$9465.
*$945F PUSH BC       ; {Stash #REGbc and #REGix on the stack.
 $9460 PUSH IX       ; }
 $9462 JP $94CC      ; Jump to #R$94CC.

; Routine at 9465
;
; Used by the routines at #R$9478 and #R$94CC.
c$9465 LD HL,$0008   ; #REGhl=#N($0008,$04,$04).
 $9468 ADD HL,DE     ; #REGhl+=#REGde.
 $9469 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $946A POP BC        ; Restore #REGbc from the stack.
 $946B DJNZ $945F    ; Decrease counter by one and loop back to #R$945F until
                     ; counter is zero.
 $946D POP IX        ; Restore #REGix from the stack.
 $946F INC IX        ; Increment #REGix by one.
 $9471 INC IX        ; Increment #REGix by one.
 $9473 POP BC        ; Restore #REGbc from the stack.
 $9474 DEC C         ; Decrease #REGc by one.
 $9475 JR NZ,$945C   ; Jump to #R$945C if #REGc is not zero.
 $9477 RET           ; Return.

; Routine at 9478
c$9478 INC DE        ; Increment #REGde by one.
 $9479 LD A,(DE)     ; #REGa=*#REGde.
 $947A DEC DE        ; Decrease #REGde by one.
 $947B AND %11111000 ; Keep only bits 3-7.
 $947D LD ($99A9),A  ; Write #REGa to *#R$99A9.
 $9480 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
*$9483 LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $9486 LD H,(IX+$00) ; #REGh=*#REGix+#N$00.
 $9489 SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $948B PUSH HL       ; Stash #REGhl on the stack.
 $948C AND A         ; Set flags.
 $948D SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $948F JR Z,$94AA    ; Jump to #R$94AA if #REGde is zero.
 $9491 POP IX        ; Restore #REGix from the stack.
 $9493 LD A,($99A9)  ; #REGa=*#R$99A9.
 $9496 XOR (IX+$00)  ;
 $9499 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $949C LD A,(IX+$05) ; {Jump to #R$94A7 if *#REGix+#N$05 is equal to #N$00.
 $949F CP $00        ;
 $94A1 JR Z,$94A7    ; }
 $94A3 ADD IX,BC     ; #REGix+=#REGbc.
 $94A5 JR $9483      ; Jump to #R$9483.
*$94A7 POP BC        ; Restore #REGbc from the stack.
 $94A8 JR $94C3      ; Jump to #R$94C3.
*$94AA POP HL        ; Restore #REGhl from the stack.
 $94AB ADD HL,BC     ; #REGhl+=#REGbc.
 $94AC LD A,(HL)     ; #REGa=*#REGhl.
 $94AD INC HL        ; Increment #REGhl by one.
 $94AE LD L,(HL)     ; #REGl=*#REGhl.
 $94AF LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $94B2 LD (IX+$01),L ; Write #REGl to *#REGix+#N$01.
 $94B5 LD H,A        ; #REGh=#REGa.
 $94B6 SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $94B8 POP BC        ; Restore #REGbc from the stack.
 $94B9 LD HL,($99A7) ; #REGhl=*#R$99A7.
 $94BC LD (HL),C     ; Write #REGc to *#REGhl.
 $94BD INC HL        ; Increment #REGhl by one.
 $94BE LD (HL),B     ; Write #REGb to *#REGhl.
 $94BF INC HL        ; Increment #REGhl by one.
 $94C0 LD ($99A7),HL ; Write #REGhl to *#R$99A7.
*$94C3 LD IX,$0040   ; #REGix=#N($0040,$04,$04).
 $94C7 ADD IX,BC     ; #REGix+=#REGbc.
 $94C9 JP $9465      ; Jump to #R$9465.

; Routine at 94CC
;
; Used by the routine at #R$9447.
c$94CC INC DE        ; Increment #REGde by one.
 $94CD LD A,(DE)     ; #REGa=*#REGde.
 $94CE AND %00000111 ; Keep only bits 0-2.
 $94D0 LD ($99A9),A  ; Write #REGa to *#R$99A9.
*$94D3 LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $94D6 LD H,(IX+$00) ; #REGh=*#REGix+#N$00.
 $94D9 PUSH IX       ; Stash #REGix on the stack.
 $94DB PUSH HL       ; Stash #REGhl on the stack.
 $94DC SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $94DE INC HL        ; Increment #REGhl by one.
 $94DF LD A,(HL)     ; #REGa=*#REGhl.
 $94E0 AND %00000111 ; Keep only bits 0-2.
 $94E2 LD HL,$99A9   ; #REGhl=#R$99A9.
 $94E5 CP (HL)       ; Compare #REGa with *#REGhl.
 $94E6 POP HL        ; Restore #REGhl from the stack.
 $94E7 JR NC,$9526   ; Jump to #R$9526 if #REGa is higher.
 $94E9 DEC DE        ; Decrease #REGde by one.
 $94EA LD (IX+$01),E ; Write #REGe to *#REGix+#N$01.
 $94ED LD (IX+$00),D ; Write #REGd to *#REGix+#N$00.
 $94F0 PUSH DE       ; Stash #REGde on the stack.
 $94F1 POP IX        ; Restore #REGix from the stack.
 $94F3 LD (IX+$06),L ; Write #REGl to *#REGix+#N$06.
 $94F6 LD (IX+$05),H ; Write #REGh to *#REGix+#N$05.
 $94F9 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $94FC AND %11111000 ; Keep only bits 3-7.
 $94FE SET 2,A       ; Set bit 2 of #REGa.
 $9500 OR (HL)       ; Set the bits from *#REGhl.
 $9501 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $9504 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $9507 ADD HL,BC     ; #REGhl+=#REGbc.
 $9508 LD A,(HL)     ; #REGa=*#REGhl.
 $9509 AND %11111000 ; Keep only bits 3-7.
 $950B OR (IX+$04)   ; Set the bits of #REGa with *#REGix+#N$04.
 $950E LD (IX+$04),A ; Write #REGa to *#REGix+#N$04.
 $9511 POP BC        ; {Restore #REGbc and #REGbc from the stack.
 $9512 POP BC        ; }
 $9513 LD HL,($99A7) ; #REGhl=*#R$99A7.
 $9516 LD (HL),C     ; Write #REGc to *#REGhl.
 $9517 INC HL        ; Increment #REGhl by one.
 $9518 LD (HL),B     ; Write #REGb to *#REGhl.
 $9519 INC HL        ; Increment #REGhl by one.
 $951A LD ($99A7),HL ; Write #REGhl to *#R$99A7.
*$951D LD IX,$0040   ; #REGix=#N($0040,$04,$04).
 $9521 ADD IX,BC     ; #REGix+=#REGbc.
 $9523 JP $9465      ; Jump to #R$9465.
*$9526 LD A,(DE)     ; #REGa=*#REGde.
 $9527 AND %11111000 ; Keep only bits 3-7.
 $9529 OR (HL)       ; Set the bits from *#REGhl.
 $952A LD (HL),A     ; Write #REGa to *#REGhl.
 $952B LD BC,$0005   ; {#REGhl+=#N($0005,$04,$04).
 $952E ADD HL,BC     ; }
 $952F LD A,(HL)     ; #REGa=*#REGhl.
 $9530 CP $00        ; Compare #REGa with #N$00.
 $9532 POP IX        ; Restore #REGix from the stack.
 $9534 JR Z,$953B    ; Jump to #R$953B if #REGa is zero.
 $9536 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $9537 POP IX        ; }
 $9539 JR $94D3      ; Jump to #R$94D3.
*$953B DEC DE        ; Decrease #REGde by one.
 $953C POP BC        ; Restore #REGbc from the stack.
 $953D JR $951D      ; Jump to #R$951D.

; Routine at 953F
;
; Used by the routine at #R$9270.
c$953F LD BC,$99F0   ; #REGbc=#R$99F0.
 $9542 LD HL,($99A7) ; #REGhl=*#R$99A7.
 $9545 AND A         ; Set flags.
 $9546 SBC HL,BC     ; #REGhl-=#REGbc.
 $9548 RET Z         ; Return if {} is zero.
 $9549 SRL L         ; Shift #REGl right.
 $954B LD B,L        ; #REGb=#REGl.
 $954C LD HL,$99F0   ; #REGhl=#R$99F0.
*$954F PUSH BC       ; Stash #REGbc on the stack.
 $9550 LD E,(HL)     ; #REGe=*#REGhl.
 $9551 INC HL        ; Increment #REGhl by one.
 $9552 LD D,(HL)     ; #REGd=*#REGhl.
 $9553 INC HL        ; Increment #REGhl by one.
 $9554 LD ($99A7),HL ; Write #REGhl to *#R$99A7.
 $9557 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9558 CALL $9562    ; Call #R$9562.
 $955B LD HL,($99A7) ; #REGhl=*#R$99A7.
 $955E POP BC        ; Restore #REGbc from the stack.
 $955F DJNZ $954F    ; Decrease counter by one and loop back to #R$954F until
                     ; counter is zero.
 $9561 RET           ; Return.

; Routine at 9562
;
; Used by the routines at #R$9134 and #R$953F.
c$9562 PUSH HL       ; Stash #REGhl on the stack.
 $9563 LD D,(HL)     ; #REGd=*#REGhl.
 $9564 INC HL        ; Increment #REGhl by one.
 $9565 LD E,(HL)     ; #REGe=*#REGhl.
 $9566 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9567 BIT 2,(HL)    ; Test bit 2 of *#REGhl.
 $9569 JR Z,$95A5    ; Jump to #R$95A5 if #REGhl is zero.
 $956B RES 2,(HL)    ; Reset bit 2 of *#REGhl.
 $956D INC HL        ; {Increment #REGhl by two.
 $956E INC HL        ; }
 $956F LD E,(HL)     ; #REGe=*#REGhl.
 $9570 INC HL        ; Increment #REGhl by one.
 $9571 LD D,(HL)     ; #REGd=*#REGhl.
 $9572 INC HL        ; Increment #REGhl by one.
 $9573 LD A,(HL)     ; #REGa=*#REGhl.
 $9574 LD ($99A9),A  ; Write #REGa to *#R$99A9.
 $9577 INC HL        ; Increment #REGhl by one.
 $9578 PUSH HL       ; Stash #REGhl on the stack.
 $9579 LD HL,$99BC   ; #REGhl=#R$99BC.
 $957C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $957D LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $9580 LDIR          ; LDIR.
*$9582 POP IX        ; Restore #REGix from the stack.
 $9584 LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $9587 CP $00        ; Compare #REGa with #N$00.
 $9589 JR Z,$95A7    ; Jump to #R$95A7 if #REGa is zero.
 $958B LD H,A        ; #REGh=#REGa.
 $958C LD L,(IX+$01) ; #REGl=*#REGix+#N$01.
 $958F INC HL        ; {Increment #REGhl by two.
 $9590 INC HL        ; }
 $9591 LD E,(HL)     ; #REGe=*#REGhl.
 $9592 INC HL        ; Increment #REGhl by one.
 $9593 LD D,(HL)     ; #REGd=*#REGhl.
 $9594 INC HL        ; {Increment #REGhl by two.
 $9595 INC HL        ; }
 $9596 PUSH HL       ; Stash #REGhl on the stack.
 $9597 LD B,$08      ; #REGb=#N$08.
 $9599 LD HL,$99BC   ; #REGhl=#R$99BC.
*$959C LD A,(DE)     ; #REGa=*#REGde.
 $959D OR (HL)       ; Set the bits from *#REGhl.
 $959E LD (HL),A     ; Write #REGa to *#REGhl.
 $959F INC HL        ; Increment #REGhl by one.
 $95A0 INC DE        ; Increment #REGde by one.
 $95A1 DJNZ $959C    ; Decrease counter by one and loop back to #R$959C until
                     ; counter is zero.
 $95A3 JR $9582      ; Jump to #R$9582.
*$95A5 POP HL        ; Restore #REGhl from the stack.
 $95A6 RET           ; Return.
*$95A7 LD DE,$99BC   ; #REGde=#R$99BC.
 $95AA POP HL        ; Restore #REGhl from the stack.
 $95AB SRL H         ; Shift #REGh right.
 $95AD RR L          ; Rotate #REGl right.
 $95AF LD A,H        ; #REGa=#REGh.
 $95B0 AND %11011011 ; Keep only bits 0-1, 3-4, 6-7.
 $95B2 OR %01000000  ; Set bit 6.
 $95B4 LD H,A        ; #REGh=#REGa.
 $95B5 LD A,($99A9)  ; #REGa=*#R$99A9.
 $95B8 LD (HL),A     ; Write #REGa to *#REGhl.
 $95B9 SLA H         ; {Shift #REGh left three positions (with carry).
 $95BB SLA H         ;
 $95BD SLA H         ; }
 $95BF RES 7,H       ; Reset bit 7 of #REGh.
 $95C1 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $95C2 CALL $915A    ; Call #R$915A.
 $95C5 RET           ; Return.

; Routine at 95C6
;
; Used by the routines at #R$9226, #R$92C5, #R$9762, #R$97D7 and #R$9926.
c$95C6 LD E,A        ; #REGe=#REGa.
 $95C7 LD D,$00      ; #REGd=#N$00.
 $95C9 ADD IX,DE     ; #REGix+=#REGde.
 $95CB LD B,(IX+$02) ; #REGb=*#REGix+#N$02.
 $95CE LD C,(IX+$03) ; #REGc=*#REGix+#N$03.
 $95D1 LD A,$00      ; #REGa=#N$00.
*$95D3 ADD A,C       ; #REGa+=#REGc.
 $95D4 DJNZ $95D3    ; Decrease counter by one and loop back to #R$95D3 until
                     ; counter is zero.
 $95D6 LD B,A        ; #REGb=#REGa.
 $95D7 LD A,($99AA)  ; {#REGc=*#R$99AA.
 $95DA LD C,A        ; }
 $95DB LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $95DE LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $95E1 LD E,(IX+$04) ; #REGe=*#REGix+#N$04.
 $95E4 LD D,(IX+$05) ; #REGd=*#REGix+#N$05.
 $95E7 LD IX,($99B8) ; #REGix=#R$99B8.
*$95EB PUSH BC       ; Stash #REGbc on the stack.
 $95EC LD A,(DE)     ; #REGa=*#REGde.
 $95ED LD (IX+$01),A ; Write #REGa to *#REGix+#N$01.
 $95F0 LD (IX+$02),L ; Write #REGl to *#REGix+#N$02.
 $95F3 LD (IX+$03),H ; Write #REGh to *#REGix+#N$03.
 $95F6 LD (IX+$04),C ; Write #REGc to *#REGix+#N$04.
 $95F9 LD BC,$0008   ; {#REGix+=#N($0008,$04,$04).
 $95FC ADD IX,BC     ; }
 $95FE ADD HL,BC     ; #REGhl+=#N($0008,$04,$04).
 $95FF INC DE        ; Increment #REGde by one.
 $9600 POP BC        ; Restore #REGbc from the stack.
 $9601 DJNZ $95EB    ; Decrease counter by one and loop back to #R$95EB until
                     ; counter is zero.
 $9603 RET           ; Return.

; Routine at 9604
;
; Used by the routines at #R$AB17, #R$B113, #R$BB05 and #R$C36B.
c$9604 LD A,L        ; #REGa=#REGl.
 $9605 CP $C0        ; Compare #REGa with #N$C0.
 $9607 JR NC,$960F   ; Jump to #R$960F if #REGa is higher.
 $9609 LD A,$78      ; {Return if #N$78 is equal to #REGh.
 $960B CP H          ;
 $960C RET Z         ; }
 $960D JR $9613      ; Jump to #R$9613.
*$960F LD A,$7D      ; {Return if #N$7D is equal to #REGh.
 $9611 CP H          ;
 $9612 RET Z         ; }
*$9613 LD A,L        ; #REGa=#REGl.
 $9614 ADD A,$02     ; #REGa+=#N$02.
 $9616 AND %00111100 ; Keep only bits 2-5.
 $9618 RET           ; Return.

; Routine at 9619
;
; Used by the routines at #R$8079, #R$92C5, #R$97D7, #R$98F2, #R$AB17, #R$B113,
; #R$B5A7, #R$B6BC, #R$B7A9, #R$BB05, #R$C172, #R$C36B, #R$C824, #R$CA09,
; #R$E194 and #R$E7C3.
c$9619 LD IX,$99A5    ; #REGix=#R$99A5.
 $961D RR (IX+$01)    ; Rotate *#REGix+#N$01 right.
 $9621 BIT 4,(IX+$00) ; Test bit 4 of *#REGix+#N$00.
 $9625 JR Z,$9628     ; Jump to #R$9628 if #REGa is zero.
 $9627 CCF            ; Invert the carry flag.
*$9628 RL (IX+$00)    ; Rotate *#REGix+#N$00 left.
 $962C RL (IX+$01)    ; Rotate *#REGix+#N$01 left.
 $9630 LD A,(IX+$00)  ; #REGa=*#REGix+#N$00.
 $9633 RET            ; Return.

; Routine at 9634
;
; Used by the routine at #R$9270.
c$9634 LD A,($7207)    ; {Return if *#R$7207 is not equal to #N$01.
 $9637 CP $01          ;
 $9639 RET NZ          ; }
 $963A LD HL,$99A4     ; #REGhl=#R$99A4.
 $963D LD IX,$7200     ; #REGix=#R$7200.
 $9641 DEC (HL)        ; Decrease *#REGhl by one.
 $9642 JR NZ,$9679     ; Jump to #R$9679 if *#REGhl is not zero.
 $9644 LD (HL),$05     ; Write #N$05 to *#REGhl.
 $9646 LD A,($99A3)    ; #REGa=*#R$99A3.
 $9649 CP $00          ; {Jump to #R$965B if #REGa is equal to #N$00.
 $964B JR Z,$965B      ; }
 $964D DEC A           ; Decrease #REGa by one.
 $964E LD ($99A3),A    ; Write #REGa to *#R$99A3.
 $9651 JR NZ,$965B     ; Jump to #R$965B if #REGa is not zero.
 $9653 LD C,$40        ; #REGc=#N$40.
 $9655 LD HL,$50C0     ; #REGhl=#N$50C0 (screen buffer location).
 $9658 CALL $8A76      ; Call #R$8A76.
*$965B LD HL,$99D9     ; #REGhl=#R$99D9.
 $965E LD A,($99AB)    ; #REGa=*#R$99AB.
 $9661 SRL A           ; {Shift #REGa right four positions.
 $9663 SRL A           ;
 $9665 SRL A           ;
 $9667 SRL A           ; }
 $9669 INC A           ; Increment #REGa by one.
 $966A LD (HL),A       ; Write #REGa to *#REGhl.
 $966B LD DE,$EFF7     ; #REGde=#R$EFF7.
 $966E LD B,$02        ; #REGb=#N$02.
 $9670 CALL $96FE      ; Call #R$96FE.
 $9673 JR C,$96EB      ; Jump to #R$96EB if #REGa is lower.
 $9675 SET 1,(IX+$00)  ; Set bit 1 of *#REGix+#N$00.
*$9679 BIT 0,(IX+$00)  ; Test bit 0 of *#REGix+#N$00.
 $967D JR Z,$96B1      ; Jump to #R$96B1 if #REGa is zero.
 $967F LD DE,$EFF7     ; #REGde=#R$EFF7.
 $9682 LD HL,$99DB     ; #REGhl=#R$99DB.
 $9685 LD B,$02        ; #REGb=#N$02.
 $9687 CALL $9708      ; Call #R$9708.
 $968A LD DE,$EFF4     ; #REGde=#R$EFF4.
 $968D LD HL,$99DD     ; #REGhl=#R$99DD.
 $9690 LD B,$03        ; #REGb=#N$03.
 $9692 CALL $9708      ; Call #R$9708.
 $9695 LD DE,$4021     ; #REGde=#N$4021 (screen buffer location).
 $9698 LD BC,$0203     ; #REGbc=#N($0203,$04,$04).
 $969B LD HL,$EFF6     ; #REGhl=#R$EFF6.
 $969E CALL $9712      ; Call #R$9712.
 $96A1 LD HL,$99AD     ; #REGhl=#R$99AD.
 $96A4 DEC (HL)        ; Decrease *#REGhl by one.
 $96A5 JR NZ,$96B1     ; Jump to #R$96B1 if *#REGhl is not zero.
 $96A7 LD HL,$EFFA     ; #REGhl=#R$EFFA.
 $96AA SET 0,(HL)      ; Set bit 0 of *#REGhl.
 $96AC LD SP,($99AE)   ; #REGsp=*#R$99AE.
 $96B0 RET             ; Return.
*$96B1 BIT 4,(IX+$00)  ; Test bit 4 of *#REGix+#N$00.
 $96B5 JR NZ,$96BF     ; Jump to #R$96BF if *#REGhl is not zero.
 $96B7 BIT 1,(IX+$00)  ; Test bit 1 of *#REGix+#N$00.
 $96BB JR Z,$96E6      ; Jump to #R$96E6 if *#REGhl is zero.
 $96BD JR $96DA        ; Jump to #R$96DA.
*$96BF LD DE,$EFF7     ; #REGde=#R$EFF7.
 $96C2 LD HL,$99E0     ; #REGhl=#R$99E0.
 $96C5 LD B,$02        ; #REGb=#N$02.
 $96C7 CALL $96FE      ; Call #R$96FE.
 $96CA JR C,$96EB      ; Jump to #R$96EB if *#REGhl is lower.
 $96CC LD HL,$99A3     ; #REGhl=#R$99A3.
 $96CF LD (HL),$05     ; Write #N$05 to *#REGhl.
 $96D1 LD HL,($99D7)   ; #REGhl=*#R$99D7.
 $96D4 LD DE,$50C0     ; #REGde=#N$50C0 (screen buffer location).
 $96D7 CALL $9754      ; Call #R$9754.
*$96DA LD DE,$403B     ; #REGde=#N$403B (screen buffer location).
 $96DD LD BC,$0202     ; #REGbc=#N($0202,$04,$04).
 $96E0 LD HL,$EFF8     ; #REGhl=#R$EFF8.
 $96E3 CALL $9712      ; Call #R$9712.
*$96E6 LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $96EA RET             ; Return.
*$96EB LD HL,$0000     ; {Write #N($0000,$04,$04) to *#R$EFF7.
 $96EE LD ($EFF7),HL   ; }
 $96F1 CALL $96DA      ; Call #R$96DA.
 $96F4 LD HL,$EFFA     ; #REGhl=#R$EFFA.
 $96F7 SET 4,(HL)      ; Set bit 4 of *#REGhl.
 $96F9 LD SP,($99AE)   ; #REGsp=*#R$99AE.
 $96FD RET             ; Return.

; Spend Money
;
; Used by the routines at #R$8749, #R$883C and #R$9634.
;
; B Number of digits
; DE Pointer to players cash
; HL Pointer to cost to deduct
;
; See #POKE#dontspendmoney(Don't Spend Money) and #POKE#altdontspendmoney(Don't
; Spend Money (alt)).
@label=SpendMoney
c$96FE AND A         ; Set flags ready for the subtraction.
@label=SpendMoney_Loop
*$96FF LD A,(DE)     ; Load the player cash digit from *#REGde into #REGa.
 $9700 SBC A,(HL)    ; Subtract the cost from the digit in *#REGhl (with the
                     ; carry flag).
 $9701 DAA           ; Digital to analogue conversion.
 $9702 LD (DE),A     ; Write the result in #REGa back to the players cash.
 $9703 INC HL        ; {Increment both the players cash and cost to deduct
 $9704 INC DE        ; pointers.}
 $9705 DJNZ $96FF    ; Decrease number of digits counter by one and loop back to #R$96FF
                     ; until all digits have been processed.
 $9707 RET           ; Return.

; Add Money
;
; Used by the routines at #R$883C and #R$9634.
;
; B Number of digits
; DE Pointer to players cash
; HL Pointer to cost to add
@label=AddMoney
c$9708 AND A         ; Set flags.
@label=AddMoney_Loop
*$9709 LD A,(DE)     ; #REGa=*#REGde.
 $970A ADC A,(HL)    ; #REGa+=*#REGhl.
 $970B DAA           ; Digital to analogue conversion.
 $970C LD (DE),A     ; Write #REGa to *#REGde.
 $970D INC HL        ; Increment #REGhl by one.
 $970E INC DE        ; Increment #REGde by one.
 $970F DJNZ $9709    ; Decrease number of digits counter by one and loop back to #R$9709
                     ; until all digits have been processed.
 $9711 RET           ; Return.

; Print Numbers
;
; Used by the routines at #R$8600, #R$8666, #R$8749, #R$8A84 and #R$9634.
;
; HL
; BC
@label=PrintNumbers
c$9712 LD IX,$7200    ; #REGix=#R$7200.
 $9716 SET 3,(IX+$00) ; Set bit 3 of *#REGix+#N$00.
*$971A PUSH BC        ; Stash #REGbc on the stack.
 $971B LD A,$30       ; #REGa=#N$30.
*$971D PUSH BC        ; Stash #REGbc on the stack.
 $971E RLD            ; RLD.
 $9720 PUSH HL        ; {Stash #REGhl and #REGaf on the stack.
 $9721 PUSH AF        ; }
 $9722 CP $30         ; {Jump to #R$9732 if #REGa is equal to #N$30.
 $9724 JR Z,$9732     ; }
 $9726 RES 3,(IX+$00) ; Reset bit 3 of *#REGix+#N$00.
 $972A LD L,A         ; {Create an offset using #REGhl.
 $972B LD H,$00       ; }
 $972D ADD HL,HL      ; {#REGhl*=#N$08.
 $972E ADD HL,HL      ;
 $972F ADD HL,HL      ; }
 $9730 JR $973D       ; Jump to #R$973D.
*$9732 BIT 3,(IX+$00) ; Test bit 3 of *#REGix+#N$00.
 $9736 LD HL,$0100    ; #REGhl=#N($0100,$04,$04).
 $9739 JR NZ,$973D    ; Jump to #R$973D if #REGa is not zero.
 $973B LD L,$80       ; #REGl=#N$80.
*$973D LD BC,$F740    ; {#REGhl+=#R$F840(#N$F740).
 $9740 ADD HL,BC      ; }
 $9741 PUSH DE        ; Stash #REGde on the stack.
 $9742 CALL $915A     ; Call #R$915A.
 $9745 POP DE         ; Restore #REGde from the stack.
 $9746 INC DE         ; Increment #REGde by one.
 $9747 POP AF         ; {Restore #REGaf, #REGhl and #REGbc from the stack.
 $9748 POP HL         ;
 $9749 POP BC         ; }
 $974A DJNZ $971D     ; Decrease counter by one and loop back to #R$971D until
                      ; counter is zero.
 $974C RLD            ; RLD.
 $974E POP BC         ; Restore #REGbc from the stack.
 $974F DEC HL         ; Decrease #REGhl by one.
 $9750 DEC C          ; Decrease #REGc by one.
 $9751 JR NZ,$971A    ; Jump to #R$971A if #REGc is not zero.
 $9753 RET            ; Return.

; Routine at 9754
;
; Used by the routine at #R$9634.
c$9754 LD DE,$50C1   ; #REGde=#N$50C1 (screen buffer location).
 $9757 CALL $8A3D    ; Call #R$8A3D.
 $975A LD A,E        ; #REGa=#REGe.
 $975B NEG           ; NEG.
 $975D LD C,A        ; #REGc=#REGa.
 $975E EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $975F JP $8A76      ; Jump to #R$8A76.

; Routine at 9762
;
; Used by the routines at #R$97D7 and #R$9942.
c$9762 LD L,(IX+$04)  ;
 $9765 LD H,(IX+$05)  ;
; This entry point is used by the routine at #R$CA09.
*$9768 LD D,(HL)      ;
 $9769 INC HL         ;
 $976A LD E,(HL)      ;
 $976B DEC HL         ;
 $976C LD A,(DE)      ;
 $976D AND $11        ;
 $976F JR NZ,$97A2    ;
 $9771 LD DE,$000A    ;
 $9774 LD IX,$7E00    ;
*$9778 BIT 0,(IX+$00) ;
 $977C JR Z,$9782     ;
 $977E ADD IX,DE      ;
 $9780 JR $9778       ;
*$9782 SET 0,(IX+$00) ;
 $9786 LD (IX+$01),L  ;
 $9789 LD (IX+$02),H  ;
 $978C CALL $97A7     ;
 $978F LD A,($99AB)   ;
 $9792 ADD A,$01      ;
 $9794 DAA            ;
 $9795 LD ($99AB),A   ;
 $9798 LD HL,$99AC    ;
 $979B DEC (HL)       ;
 $979C LD HL,$EFFF    ;
 $979F SET 2,(HL)     ;
 $97A1 RET            ;
*$97A2 SET 3,(IX+$00) ;
 $97A6 RET            ;
; This entry point is used by the routine at #R$AB17.
*$97A7 PUSH IX        ;
 $97A9 LD DE,$0003    ;
 $97AC ADD IX,DE      ;
 $97AE LD ($99B8),IX  ;
 $97B2 LD A,$00       ;
 $97B4 LD IX,($99CF)  ;
 $97B8 CALL $95C6     ;
 $97BB LD DE,$94CC    ;
 $97BE LD ($9463),DE  ;
 $97C2 LD DE,($99B8)  ;
 $97C6 POP IX         ;
 $97C8 LD L,(IX+$01)  ;
 $97CB LD H,(IX+$02)  ;
 $97CE LD A,$00       ;
 $97D0 LD IX,($99CF)  ;
 $97D4 JP $9447       ;

; Routine at 97D7
;
; Used by the routines at #R$B6BC, #R$B7A9, #R$C7B6, #R$C824, #R$CA09 and
; #R$E194.
c$97D7 LD L,(IX+$04) ;
 $97DA LD H,(IX+$05) ;
 $97DD ADD HL,HL     ;
 $97DE ADD HL,HL     ;
 $97DF LD D,H        ;
 $97E0 LD HL,($7204) ;
 $97E3 ADD HL,HL     ;
 $97E4 ADD HL,HL     ;
 $97E5 LD A,(IX+$04) ;
 $97E8 AND $3E       ;
 $97EA RRCA          ;
 $97EB LD E,A        ;
 $97EC LD A,($7204)  ;
 $97EF AND $3E       ;
 $97F1 RRCA          ;
 $97F2 SUB E         ;
 $97F3 LD L,A        ;
 $97F4 LD A,H        ;
 $97F5 SUB D         ;
 $97F6 LD H,A        ;
 $97F7 LD BC,$0800   ;
 $97FA BIT 7,L       ;
 $97FC JR Z,$9804    ;
 $97FE LD A,L        ;
 $97FF NEG           ;
 $9801 LD L,A        ;
 $9802 LD C,$10      ;
*$9804 BIT 7,H       ;
 $9806 RET Z         ;
 $9807 LD A,H        ;
 $9808 NEG           ;
 $980A LD H,A        ;
 $980B LD B,$18      ;
 $980D RET           ;
; This entry point is used by the routines at #R$B6A7, #R$C172, #R$C824,
; #R$D5AC and #R$E194.
*$980E LD HL,($99E7) ;
 $9811 LD A,$00      ;
 $9813 CP (HL)       ;
 $9814 JR NZ,$9827   ;
 $9816 LD A,($99AB)  ;
 $9819 CP $50        ;
 $981B JR Z,$986D    ;
 $981D LD IX,($99E7) ;
 $9821 DEC (IX+$07)  ;
 $9824 RET Z         ;
 $9825 JR $986D      ;
*$9827 DEC (HL)      ;
 $9828 DEC (HL)      ;
 $9829 CALL $9439    ;
 $982C LD IX,($99E7) ;
 $9830 LD A,(IX+$00) ;
 $9833 AND $07       ;
 $9835 JR NZ,$986F   ;
 $9837 LD BC,($99E9) ;
 $983B CALL $9403    ;
 $983E LD IX,($99E7) ;
 $9842 LD A,(IX+$04) ;
 $9845 ADD A,$40     ;
 $9847 LD (IX+$04),A ;
 $984A JR NC,$984F   ;
 $984C INC (IX+$05)  ;
*$984F LD A,$00      ;
 $9851 CP (IX+$00)   ;
 $9854 JR NZ,$985B   ;
 $9856 CALL $9762    ;
 $9859 POP HL        ;
 $985A RET           ;
; This entry point is used by the routine at #R$98F2.
*$985B LD IX,($99E9) ;
 $985F CALL $95C6    ;
 $9862 LD IX,($99E7) ;
 $9866 LD BC,($99E9) ;
 $986A CALL $941E    ;
*$986D POP HL        ;
 $986E RET           ;
*$986F LD IX,($99E9) ;
 $9873 LD B,(IX+$03) ;
 $9876 LD IX,($99E7) ;
 $987A LD DE,$000A   ;
 $987D ADD IX,DE     ;
 $987F LD E,$08      ;
*$9881 LD L,(IX+$00) ;
 $9884 LD H,(IX+$01) ;
 $9887 DEC HL        ;
 $9888 DEC HL        ;
 $9889 LD (IX+$00),L ;
 $988C LD (IX+$01),H ;
 $988F ADD IX,DE     ;
 $9891 DJNZ $9881    ;
 $9893 LD IX,($99E7) ;
 $9897 LD L,(IX+$04) ;
 $989A LD H,(IX+$05) ;
 $989D PUSH HL       ;
 $989E CALL $9914    ;
 $98A1 POP HL        ;
 $98A2 LD DE,$0040   ;
 $98A5 ADD HL,DE     ;
 $98A6 CALL $9914    ;
 $98A9 JR $986D      ;
; This entry point is used by the routines at #R$B6A7, #R$C824, #R$D5AC and
; #R$E194.
*$98AB LD A,($99AC)  ;
 $98AE CP $00        ;
 $98B0 JR Z,$98F0    ;
 $98B2 CALL $9619    ;
 $98B5 LD L,A        ;
 $98B6 LD H,$00      ;
 $98B8 ADD HL,HL     ;
 $98B9 LD DE,($99EB) ;
 $98BD ADD HL,DE     ;
 $98BE LD A,$7D      ;
 $98C0 CP H          ;
 $98C1 JR C,$98AB    ;
 $98C3 LD A,(HL)     ;
 $98C4 INC HL        ;
 $98C5 LD E,(HL)     ;
 $98C6 LD D,A        ;
 $98C7 LD A,(DE)     ;
 $98C8 AND $11       ;
 $98CA JR NZ,$98AB   ;
 $98CC DEC HL        ;
 $98CD PUSH HL       ;
 $98CE LD DE,$8800   ;
 $98D1 ADD HL,DE     ;
 $98D2 LD E,L        ;
 $98D3 LD D,H        ;
 $98D4 ADD HL,HL     ;
 $98D5 ADD HL,DE     ;
 $98D6 LD DE,$6001   ;
 $98D9 ADD HL,DE     ;
 $98DA LD A,$00      ;
 $98DC CP (HL)       ;
 $98DD POP HL        ;
 $98DE JR NZ,$98AB   ;
 $98E0 PUSH HL       ;
 $98E1 LD A,L        ;
 $98E2 AND $3E       ;
 $98E4 LD C,A        ;
 $98E5 LD DE,$8740   ;
 $98E8 ADD HL,DE     ;
 $98E9 ADD HL,HL     ;
 $98EA ADD HL,HL     ;
 $98EB LD A,H        ;
 $98EC RLCA          ;
 $98ED RLCA          ;
 $98EE RLCA          ;
 $98EF LD E,A        ;
*$98F0 POP HL        ;
 $98F1 RET           ;

; Routine at 98F2
;
; Used by the routines at #R$B6A7, #R$C824, #R$D5AC and #R$E194.
c$98F2 LD IX,($99E7) ; #REGix=*#R$99E7.
 $98F6 LD (IX+$00),E ; Write #REGe to *#REGix+#N$00.
 $98F9 LD (IX+$04),C ; Write #REGc to *#REGix+#N$04.
 $98FC LD (IX+$05),B ; Write #REGb to *#REGix+#N$05.
 $98FF CALL $9619    ; Call #R$9619.
 $9902 LD HL,$99ED   ; #REGhl=#R$99ED.
 $9905 AND (HL)      ; Merge the bits from *#REGhl.
 $9906 LD HL,($99E7) ; #REGhl=*#R$99E7.
 $9909 CALL $9439    ; Call #R$9439.
 $990C DEC HL        ; Decrease #REGhl by one.
 $990D INC A         ; Increment #REGa by one.
 $990E LD (HL),A     ; Write #REGa to *#REGhl.
 $990F LD A,$00      ; #REGa=#N$00.
 $9911 JP $985B      ; Jump to #R$985B.

; Routine at 9914
;
; Used by the routines at #R$97D7, #R$B6BC, #R$B7A9, #R$BB05, #R$CA09 and
; #R$E194.
c$9914 LD D,(HL)     ; #REGd=*#REGhl.
 $9915 INC HL        ; Increment #REGhl by one.
 $9916 LD E,(HL)     ; #REGe=*#REGhl.
 $9917 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9918 SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $991A DEC DE        ; Decrease #REGde by one.
 $991B LD HL,($99A7) ; #REGhl=*#R$99A7.
 $991E LD (HL),E     ; Write #REGe to *#REGhl.
 $991F INC HL        ; Increment #REGhl by one.
 $9920 LD (HL),D     ; Write #REGd to *#REGhl.
 $9921 INC HL        ; Increment #REGhl by one.
 $9922 LD ($99A7),HL ; Write #REGhl to *#R$99A7.
 $9925 RET           ; Return.

; Routine at 9926
;
; Used by the routines at #R$AB17, #R$B113, #R$B6BC, #R$BB05, #R$C36B, #R$C7B6,
; #R$C824, #R$CA09, #R$E194 and #R$E7C3.
c$9926 CALL $9942    ; Call #R$9942.
; This entry point is used by the routines at #R$AB17, #R$B113, #R$B5A7,
; #R$BB05, #R$C36B, #R$C77F, #R$CA09, #R$E137 and #R$E755.
*$9929 LD IX,($99E3) ; #REGix=*#R$99E3.
 $992D LD A,(IX+$06) ; #REGa=*#REGix+#N$06.
 $9930 LD IX,($99E5) ; #REGix=*#R$99E5.
 $9934 CALL $95C6    ; Call #R$95C6.
 $9937 LD IX,($99E3) ; #REGix=*#R$99E3.
 $993B LD BC,($99E5) ; #REGbc=*#R$99E5.
 $993F JP $941E      ; Jump to #R$941E.

; Routine at 9942
;
; Used by the routines at #R$9926, #R$AB17, #R$B113, #R$BB05, #R$C36B and
; #R$CA09.
c$9942 LD IX,($99E3) ; #REGix=*#R$99E3.
 $9946 LD BC,($99E5) ; #REGbc=*#R$99E5.
 $994A JP $9403      ; Jump to #R$9403.
; This entry point is used by the routines at #R$AB17, #R$B113, #R$BB05,
; #R$C36B and #R$E7C3.
*$994D LD A,($99AB)  ; {Return if *#R$99AB is equal to #N$50.
 $9950 CP $50        ;
 $9952 RET Z         ; }
 $9953 LD A,($99AC)  ; {Return if *#R$99AC is equal to #N$00.
 $9956 CP $00        ;
 $9958 RET Z         ; }
 $9959 LD HL,($99B8) ; #REGhl=*#R$99B8.
 $995C PUSH HL       ; Stash #REGhl on the stack.
 $995D LD IX,($99E3) ; #REGix=*#R$99E3.
 $9961 CALL $9762    ; Call #R$9762.
 $9964 POP HL        ; Restore #REGhl from the stack.
 $9965 LD ($99B8),HL ; Write #REGhl to *#R$99B8.
 $9968 RET           ; Return.

; Data block at 9969
b$9969 DEFB $20,$53,$63,$6F,$72,$65,$20,$20
 $9971 DEFB $20,$20,$54,$72,$61,$73,$68,$6D
 $9979 DEFB $61,$6E,$20,$69,$6E,$20,$20,$20
 $9981 DEFB $20,$20,$57,$61,$67,$65,$73,$A0
 $9989 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $9991 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $9999 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $99A1 DEFB $20,$60
 $99A3 DEFB $01
 $99A4 DEFB $05
 $99A5 DEFW $0025
 $99A7 DEFW $99F0
 $99A9 DEFB $00
 $99AA DEFB $00
 $99AB DEFB $00
 $99AC DEFB $01
 $99AD DEFB $01
 $99AE DEFW $0000
 $99B0 DEFB $02,$00,$40,$00,$FE,$FF,$C0,$FF
 $99B8 DEFB $00,$72
 $99BA DEFW $9A32
 $99BC DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Active Sub-Game Data
;
; Populated from the location data:
; #TABLE(default,centre,centre)
; { =h Location | =h Data }
; { Paris | #R$AAAE }
; { Jerusalem | #R$B0CA }
; { Madrid | #R$B496 }
; { Munich | #R$BA76 }
; { Hong Kong | #R$C146 }
; { Moscow | #R$C753 }
; { Alice Springs | #R$C9DD }
; { Samoa | #R$D1E8 }
; { Benares | #R$D67D }
; { Chichen Itza | #R$DA90 }
; { New Orleans | #R$DE4C }
; { Kanyu | #R$E10B }
; { Sao Paulo | #R$E716 }
; TABLE#
@label=ActiveSubGameData
b$99C4 DEFW $0000
 $99C6 DEFW $0000
 $99C8 DEFW $0000
 $99CA DEFW $0000
 $99CC DEFB $00
 $99CD DEFW $0000
 $99CF DEFB $00,$00
 $99D1 DEFB $00,$00
@label=ActiveSubGameInitialisation
 $99D3 DEFW $0000                           ; Pointer to initialisation
                                            ; routine.
 $99D5 DEFB $00,$00
 $99D7 DEFW $0000
 $99D9 DEFB $00,$00
 $99DB DEFB $00,$00
 $99DD DEFB $00,$00,$00
 $99E0 DEFB $00,$00
 $99E2 DEFB $00
 $99E3 DEFW $0000
 $99E5 DEFW $0000
 $99E7 DEFB $00,$00,$00,$00,$00,$00
 $99ED DEFB $00
 $99EE DEFB $00
 $99EF DEFB $00
 $99F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $99F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9A30 DEFB $00,$00

; Data block at 9A32
b$9A32 DEFB $38,$9B,$01,$03,$0C,$9B,$80,$FF ; #UDG(#PC)
 $9A3A DEFB $80,$9B,$01,$03,$15,$9B,$80,$FF ; #UDG(#PC)
 $9A42 DEFB $B8,$9B,$01,$03,$1C,$9B,$80,$FF ; #UDG(#PC)
 $9A4A DEFB $00,$9C,$01,$03,$25,$9B,$80,$FF ; #UDG(#PC)
 $9A52 DEFB $50,$9B,$02,$03,$0F,$9B,$7E,$FF ; #UDG(#PC)
 $9A5A DEFB $98,$9B,$01,$04,$18,$9B,$40,$FF ; #UDG(#PC)
 $9A62 DEFB $D0,$9B,$02,$03,$1F,$9B,$80,$FF ; #UDG(#PC)
 $9A6A DEFB $18,$9C,$01,$04,$28,$9B,$80,$FF ; #UDG(#PC)
 $9A72 DEFB $38,$9C,$02,$02,$2C,$9B,$C0,$FF ; #UDG(#PC)
 $9A7A DEFB $58,$9C,$01,$02,$30,$9B,$00,$00 ; #UDG(#PC)
 $9A82 DEFB $78,$9C,$02,$02,$32,$9B,$BE,$FF ; #UDG(#PC)
 $9A8A DEFB $68,$9C,$01,$02,$36,$9B,$C0,$FF ; #UDG(#PC)
 $9A92 DEFB $38,$9B,$01,$03,$F5,$9A,$C0,$FF ; #UDG(#PC)
 $9A9A DEFB $80,$9B,$01,$03,$F5,$9A,$C0,$FF ; #UDG(#PC)
 $9AA2 DEFB $B8,$9B,$01,$03,$F5,$9A,$C0,$FF ; #UDG(#PC)
 $9AAA DEFB $00,$9C,$01,$03,$F5,$9A,$C0,$FF ; #UDG(#PC)
 $9AB2 DEFB $50,$9B,$02,$03,$F2,$9A,$BE,$FF ; #UDG(#PC)
 $9ABA DEFB $98,$9B,$01,$04,$FF,$9A,$80,$FF ; #UDG(#PC)
 $9AC2 DEFB $D0,$9B,$02,$03,$F5,$9A,$C0,$FF ; #UDG(#PC)
 $9ACA DEFB $18,$9C,$01,$04,$FB,$9A,$C0,$FF ; #UDG(#PC)
 $9AD2 DEFB $98,$9C,$02,$03,$03,$9B,$C0,$FF ; #UDG(#PC)
 $9ADA DEFB $C8,$9C,$01,$02,$03,$9B,$C0,$FF ; #UDG(#PC)
 $9AE2 DEFB $D8,$9C,$02,$03,$06,$9B,$BE,$FF ; #UDG(#PC)
 $9AEA DEFB $00,$9C,$01,$03,$03,$9B,$C0,$FF ; #UDG(#PC)
 $9AF2 DEFB $04,$03,$02,$04,$43,$02,$04,$03 ; #UDG(#PC)
 $9AFA DEFB $02,$05,$44,$03,$02,$05,$04,$43 ; #UDG(#PC)
 $9B02 DEFB $02,$04,$43,$02,$04,$03,$00,$04 ; #UDG(#PC)
 $9B0A DEFB $43,$02,$04,$03,$42,$04,$03,$42 ; #UDG(#PC)
 $9B12 DEFB $04,$03,$42,$04,$03,$42,$05,$04 ; #UDG(#PC)
 $9B1A DEFB $03,$42,$04,$03,$42,$04,$03,$42 ; #UDG(#PC)
 $9B22 DEFB $04,$03,$42,$04,$03,$42,$05,$04 ; #UDG(#PC)
 $9B2A DEFB $43,$02,$03,$42,$03,$02,$43,$02 ; #UDG(#PC)
 $9B32 DEFB $03,$02,$03,$42,$03,$42,$38,$7C ; #UDG(#PC)
 $9B3A DEFB $72,$74,$34,$18,$38,$78,$FC,$FC ; #UDG(#PC)
 $9B42 DEFB $FC,$FE,$3E,$3E,$3E,$3C,$3E,$7E ; #UDG(#PC)
 $9B4A DEFB $7F,$77,$77,$E0,$E0,$00,$03,$07 ; #UDG(#PC)
 $9B52 DEFB $07,$07,$03,$01,$07,$07,$07,$07 ; #UDG(#PC)
 $9B5A DEFB $03,$07,$0F,$0F,$0F,$03,$07,$07 ; #UDG(#PC)
 $9B62 DEFB $07,$07,$07,$00,$00,$00,$80,$C0 ; #UDG(#PC)
 $9B6A DEFB $20,$40,$40,$80,$80,$80,$C0,$C0 ; #UDG(#PC)
 $9B72 DEFB $E0,$E0,$E0,$C0,$C0,$C0,$E0,$E0 ; #UDG(#PC)
 $9B7A DEFB $E0,$E0,$E0,$E0,$E0,$00,$3C,$7E ; #UDG(#PC)
 $9B82 DEFB $42,$42,$24,$18,$FF,$FF,$FF,$FF ; #UDG(#PC)
 $9B8A DEFB $FF,$FE,$FE,$7E,$7E,$7E,$7E,$7E ; #UDG(#PC)
 $9B92 DEFB $7E,$6E,$0E,$0E,$0E,$06,$00,$00 ; #UDG(#PC)
 $9B9A DEFB $00,$00,$00,$3C,$7E,$42,$42,$24 ; #UDG(#PC)
 $9BA2 DEFB $18,$FF,$FF,$FF,$FF,$7F,$7F,$7E ; #UDG(#PC)
 $9BAA DEFB $7E,$7E,$7E,$7E,$7E,$76,$70,$70 ; #UDG(#PC)
 $9BB2 DEFB $70,$60,$00,$00,$00,$00,$1C,$3E ; #UDG(#PC)
 $9BBA DEFB $4E,$2E,$2C,$18,$1C,$1E,$3F,$3F ; #UDG(#PC)
 $9BC2 DEFB $3F,$7F,$7C,$7C,$7C,$3C,$7C,$7E ; #UDG(#PC)
 $9BCA DEFB $FE,$EE,$EE,$07,$07,$00,$01,$03 ; #UDG(#PC)
 $9BD2 DEFB $04,$02,$02,$01,$01,$01,$03,$03 ; #UDG(#PC)
 $9BDA DEFB $07,$07,$07,$03,$03,$03,$07,$07 ; #UDG(#PC)
 $9BE2 DEFB $07,$07,$07,$07,$07,$00,$C0,$E0 ; #UDG(#PC)
 $9BEA DEFB $E0,$E0,$C0,$80,$E0,$E0,$E0,$E0 ; #UDG(#PC)
 $9BF2 DEFB $C0,$E0,$F0,$F0,$F0,$C0,$E0,$E0 ; #UDG(#PC)
 $9BFA DEFB $E0,$E0,$E0,$00,$00,$00,$00,$3C ; #UDG(#PC)
 $9C02 DEFB $7E,$7E,$7E,$3C,$18,$FF,$FF,$FF ; #UDG(#PC)
 $9C0A DEFB $FF,$FF,$7F,$7F,$7E,$7E,$7E,$7E ; #UDG(#PC)
 $9C12 DEFB $7E,$7E,$70,$70,$70,$70,$00,$00 ; #UDG(#PC)
 $9C1A DEFB $00,$00,$00,$3C,$7E,$7E,$7E,$3C ; #UDG(#PC)
 $9C22 DEFB $18,$FF,$FF,$FF,$FF,$FF,$FE,$FE ; #UDG(#PC)
 $9C2A DEFB $7E,$7E,$7E,$7E,$7E,$7E,$0E,$0E ; #UDG(#PC)
 $9C32 DEFB $0E,$0E,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $9C3A DEFB $03,$0F,$1F,$1F,$1E,$1E,$0E,$0F ; #UDG(#PC)
 $9C42 DEFB $0F,$0F,$0F,$07,$07,$00,$00,$1E ; #UDG(#PC)
 $9C4A DEFB $FF,$F3,$F1,$EE,$C0,$70,$70,$30 ; #UDG(#PC)
 $9C52 DEFB $30,$30,$00,$00,$00,$00,$3C,$7E ; #UDG(#PC)
 $9C5A DEFB $7E,$7E,$7E,$FF,$FF,$DB,$E7,$7E ; #UDG(#PC)
 $9C62 DEFB $66,$66,$66,$2C,$20,$00,$3E,$FF ; #UDG(#PC)
 $9C6A DEFB $FF,$FF,$7E,$7E,$7E,$7E,$7E,$7E ; #UDG(#PC)
 $9C72 DEFB $7E,$0E,$00,$00,$00,$00,$00,$78 ; #UDG(#PC)
 $9C7A DEFB $FF,$CF,$8F,$77,$06,$0E,$0E,$0C ; #UDG(#PC)
 $9C82 DEFB $0C,$0C,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $9C8A DEFB $C0,$F0,$F8,$F8,$78,$78,$70,$F0 ; #UDG(#PC)
 $9C92 DEFB $F0,$F0,$F0,$E0,$E0,$00,$38,$7C ; #UDG(#PC)
 $9C9A DEFB $72,$74,$3C,$19,$7A,$79,$7D,$3D ; #UDG(#PC)
 $9CA2 DEFB $3F,$3E,$3C,$3C,$3C,$3C,$3E,$7E ; #UDG(#PC)
 $9CAA DEFB $7F,$77,$77,$E0,$E0,$00,$00,$00 ; #UDG(#PC)
 $9CB2 DEFB $00,$00,$80,$40,$20,$20,$C0,$00 ; #UDG(#PC)
 $9CBA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $9CC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $9CCA DEFB $3C,$7E,$42,$42,$24,$24,$DB,$DB ; #UDG(#PC)
 $9CD2 DEFB $E7,$DB,$E7,$5F,$3F,$7E,$00,$00 ; #UDG(#PC)
 $9CDA DEFB $00,$00,$01,$02,$04,$04,$03,$00 ; #UDG(#PC)
 $9CE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $9CEA DEFB $00,$00,$00,$00,$00,$00,$1C,$3E ; #UDG(#PC)
 $9CF2 DEFB $4E,$2E,$3C,$98,$5E,$9E,$BE,$BC ; #UDG(#PC)
 $9CFA DEFB $FC,$7C,$3C,$3C,$3C,$3C,$7C,$7E ; #UDG(#PC)
 $9D02 DEFB $FE,$EE,$EE,$07,$07,$00,$00,$3C ; #UDG(#PC)
 $9D0A DEFB $7C,$7E,$7C,$58,$38,$3C,$3C,$3C ; #UDG(#PC)
 $9D12 DEFB $28,$2C,$36,$7E,$7C,$7C,$7C,$28 ; #UDG(#PC)
 $9D1A DEFB $44,$44,$86,$80,$40,$00,$00,$03 ; #UDG(#PC)
 $9D22 DEFB $07,$07,$07,$05,$03,$03,$03,$03 ; #UDG(#PC)
 $9D2A DEFB $03,$03,$06,$07,$07,$07,$07,$01 ; #UDG(#PC)
 $9D32 DEFB $03,$02,$03,$00,$00,$00,$00,$C0 ; #UDG(#PC)
 $9D3A DEFB $C0,$E0,$C0,$80,$80,$C0,$C0,$C0 ; #UDG(#PC)
 $9D42 DEFB $A0,$00,$C0,$C0,$C0,$C0,$C0,$80 ; #UDG(#PC)
 $9D4A DEFB $80,$80,$80,$80,$C0,$00,$00,$38 ; #UDG(#PC)
 $9D52 DEFB $7C,$44,$44,$28,$38,$7C,$FE,$FE ; #UDG(#PC)
 $9D5A DEFB $BA,$BA,$FC,$FC,$7C,$7C,$7C,$28 ; #UDG(#PC)
 $9D62 DEFB $28,$28,$08,$08,$08,$08,$00,$00 ; #UDG(#PC)
 $9D6A DEFB $00,$00,$00,$38,$7C,$44,$44,$28 ; #UDG(#PC)
 $9D72 DEFB $38,$7C,$FE,$FE,$BA,$BA,$7E,$7E ; #UDG(#PC)
 $9D7A DEFB $7C,$7C,$7C,$28,$28,$28,$20,$20 ; #UDG(#PC)
 $9D82 DEFB $20,$20,$00,$00,$00,$00,$00,$3C ; #UDG(#PC)
 $9D8A DEFB $3E,$7E,$3E,$1A,$1C,$3E,$3E,$3E ; #UDG(#PC)
 $9D92 DEFB $1C,$18,$14,$3E,$3E,$3E,$3E,$14 ; #UDG(#PC)
 $9D9A DEFB $22,$22,$61,$01,$02,$00,$00,$03 ; #UDG(#PC)
 $9DA2 DEFB $03,$07,$03,$01,$01,$03,$02,$03 ; #UDG(#PC)
 $9DAA DEFB $05,$09,$01,$03,$03,$03,$03,$01 ; #UDG(#PC)
 $9DB2 DEFB $01,$01,$01,$01,$03,$00,$00,$C0 ; #UDG(#PC)
 $9DBA DEFB $E0,$E0,$E0,$A0,$C0,$C0,$C0,$60 ; #UDG(#PC)
 $9DC2 DEFB $B0,$D0,$C0,$E0,$E0,$E0,$E0,$80 ; #UDG(#PC)
 $9DCA DEFB $40,$40,$C0,$00,$00,$00,$00,$38 ; #UDG(#PC)
 $9DD2 DEFB $7C,$7C,$7C,$38,$38,$5C,$FE,$FE ; #UDG(#PC)
 $9DDA DEFB $BA,$BA,$7E,$7E,$7C,$7C,$7C,$28 ; #UDG(#PC)
 $9DE2 DEFB $28,$28,$20,$20,$20,$20,$00,$00 ; #UDG(#PC)
 $9DEA DEFB $00,$00,$00,$38,$7C,$7C,$7C,$38 ; #UDG(#PC)
 $9DF2 DEFB $38,$5C,$FE,$FE,$BA,$BA,$FC,$FC ; #UDG(#PC)
 $9DFA DEFB $7C,$7C,$7C,$28,$28,$28,$08,$08 ; #UDG(#PC)
 $9E02 DEFB $08,$08,$00,$00,$00,$00,$38,$76 ; #UDG(#PC)
 $9E0A DEFB $4C,$FC,$3C,$18,$38,$7A,$7D,$3D ; #UDG(#PC)
 $9E12 DEFB $2D,$37,$3A,$3C,$3C,$7C,$7E,$76 ; #UDG(#PC)
 $9E1A DEFB $66,$66,$C7,$C0,$E0,$00,$03,$07 ; #UDG(#PC)
 $9E22 DEFB $04,$0F,$03,$01,$03,$07,$07,$07 ; #UDG(#PC)
 $9E2A DEFB $03,$03,$03,$03,$03,$03,$07,$07 ; #UDG(#PC)
 $9E32 DEFB $06,$06,$07,$00,$00,$00,$80,$60 ; #UDG(#PC)
 $9E3A DEFB $C0,$C0,$C0,$80,$80,$A0,$D0,$D8 ; #UDG(#PC)
 $9E42 DEFB $C8,$50,$E0,$C0,$C0,$C0,$C0,$C0 ; #UDG(#PC)
 $9E4A DEFB $C0,$C0,$C0,$C0,$E0,$00,$3C,$7E ; #UDG(#PC)
 $9E52 DEFB $66,$42,$24,$18,$7E,$FF,$FF,$FF ; #UDG(#PC)
 $9E5A DEFB $DD,$CB,$62,$34,$3C,$3C,$3C,$3C ; #UDG(#PC)
 $9E62 DEFB $3C,$3C,$0C,$0C,$0C,$0C,$00,$00 ; #UDG(#PC)
 $9E6A DEFB $00,$00,$3C,$7E,$66,$42,$24,$18 ; #UDG(#PC)
 $9E72 DEFB $7E,$FF,$FF,$FF,$DD,$CB,$62,$36 ; #UDG(#PC)
 $9E7A DEFB $3C,$3C,$3C,$3C,$3C,$3C,$30,$30 ; #UDG(#PC)
 $9E82 DEFB $30,$30,$00,$00,$00,$00,$1C,$6E ; #UDG(#PC)
 $9E8A DEFB $32,$3F,$3C,$18,$1C,$5E,$BE,$BC ; #UDG(#PC)
 $9E92 DEFB $B4,$7C,$5C,$3C,$3C,$3E,$7E,$6E ; #UDG(#PC)
 $9E9A DEFB $66,$66,$E3,$03,$07,$00,$01,$06 ; #UDG(#PC)
 $9EA2 DEFB $03,$03,$03,$01,$01,$05,$0B,$1B ; #UDG(#PC)
 $9EAA DEFB $13,$0A,$05,$03,$03,$03,$03,$03 ; #UDG(#PC)
 $9EB2 DEFB $03,$03,$03,$03,$07,$00,$C0,$E0 ; #UDG(#PC)
 $9EBA DEFB $20,$F0,$C0,$80,$C0,$E0,$E0,$E0 ; #UDG(#PC)
 $9EC2 DEFB $40,$C0,$C0,$C0,$C0,$C0,$E0,$E0 ; #UDG(#PC)
 $9ECA DEFB $60,$60,$E0,$00,$00,$00,$3C,$7E ; #UDG(#PC)
 $9ED2 DEFB $5E,$66,$3C,$18,$7E,$FF,$FF,$FF ; #UDG(#PC)
 $9EDA DEFB $FF,$FF,$7E,$3C,$3C,$3C,$3C,$3C ; #UDG(#PC)
 $9EE2 DEFB $3C,$3C,$0C,$0C,$0C,$0C,$00,$00 ; #UDG(#PC)
 $9EEA DEFB $00,$00,$3C,$7E,$5E,$66,$3C,$18 ; #UDG(#PC)
 $9EF2 DEFB $7E,$FF,$FF,$FF,$FF,$FF,$7E,$3C ; #UDG(#PC)
 $9EFA DEFB $3C,$3C,$3C,$3C,$3C,$3C,$30,$30 ; #UDG(#PC)
 $9F02 DEFB $30,$30,$00,$00,$00,$00,$08,$9E ; #UDG(#PC)
 $9F0A DEFB $01,$03,$2F,$A0,$80,$FF,$50,$9E ; #UDG(#PC)
 $9F12 DEFB $01,$03,$2F,$A0,$80,$FF,$88,$9E ; #UDG(#PC)
 $9F1A DEFB $01,$03,$2F,$A0,$80,$FF,$D0,$9E ; #UDG(#PC)
 $9F22 DEFB $01,$03,$2F,$A0,$80,$FF,$20,$9E ; #UDG(#PC)
 $9F2A DEFB $02,$03,$2C,$A0,$7E,$FF,$68,$9E ; #UDG(#PC)
 $9F32 DEFB $01,$04,$28,$A0,$40,$FF,$A0,$9E ; #UDG(#PC)
 $9F3A DEFB $02,$03,$29,$A0,$80,$FF,$E8,$9E ; #UDG(#PC)
 $9F42 DEFB $01,$04,$35,$A0,$80,$FF,$08,$9D ; #UDG(#PC)
 $9F4A DEFB $01,$03,$2F,$A0,$80,$FF,$50,$9D ; #UDG(#PC)
 $9F52 DEFB $01,$03,$2F,$A0,$80,$FF,$88,$9D ; #UDG(#PC)
 $9F5A DEFB $01,$03,$2F,$A0,$80,$FF,$D0,$9D ; #UDG(#PC)
 $9F62 DEFB $01,$03,$2F,$A0,$80,$FF,$20,$9D ; #UDG(#PC)
 $9F6A DEFB $02,$03,$2C,$A0,$7E,$FF,$68,$9D ; #UDG(#PC)
 $9F72 DEFB $01,$04,$28,$A0,$40,$FF,$A0,$9D ; #UDG(#PC)
 $9F7A DEFB $02,$03,$29,$A0,$80,$FF,$E8,$9D ; #UDG(#PC)
 $9F82 DEFB $01,$04,$35,$A0,$80,$FF,$39,$A1 ; #UDG(#PC)
 $9F8A DEFB $02,$03,$F6,$A2,$C0,$FF,$C9,$A1 ; #UDG(#PC)
 $9F92 DEFB $01,$03,$F6,$A2,$C0,$FF,$15,$A2 ; #UDG(#PC)
 $9F9A DEFB $02,$03,$F9,$A2,$BE,$FF,$A5,$A2 ; #UDG(#PC)
 $9FA2 DEFB $01,$03,$F6,$A2,$C0,$FF,$69,$A1 ; #UDG(#PC)
 $9FAA DEFB $02,$03,$FF,$A2,$BE,$FF,$E1,$A1 ; #UDG(#PC)
 $9FB2 DEFB $01,$04,$F5,$A2,$80,$FF,$45,$A2 ; #UDG(#PC)
 $9FBA DEFB $02,$03,$FC,$A2,$C0,$FF,$BD,$A2 ; #UDG(#PC)
 $9FC2 DEFB $01,$04,$05,$A3,$C0,$FF,$99,$A1 ; #UDG(#PC)
 $9FCA DEFB $02,$03,$FC,$A2,$C0,$FF,$FD,$A1 ; #UDG(#PC)
 $9FD2 DEFB $01,$03,$F6,$A2,$C0,$FF,$75,$A2 ; #UDG(#PC)
 $9FDA DEFB $02,$03,$F9,$A2,$BE,$FF,$DD,$A2 ; #UDG(#PC)
 $9FE2 DEFB $01,$03,$F6,$A2,$C0,$FF,$39,$A0 ; #UDG(#PC)
 $9FEA DEFB $01,$03,$2F,$A0,$80,$FF,$81,$A0 ; #UDG(#PC)
 $9FF2 DEFB $01,$03,$2F,$A0,$80,$FF,$B9,$A0 ; #UDG(#PC)
 $9FFA DEFB $01,$03,$2F,$A0,$80,$FF,$01,$A1 ; #UDG(#PC)
 $A002 DEFB $01,$03,$2F,$A0,$80,$FF,$51,$A0 ; #UDG(#PC)
 $A00A DEFB $02,$03,$2C,$A0,$7E,$FF,$99,$A0 ; #UDG(#PC)
 $A012 DEFB $01,$04,$28,$A0,$40,$FF,$D1,$A0 ; #UDG(#PC)
 $A01A DEFB $02,$03,$29,$A0,$80,$FF,$19,$A1 ; #UDG(#PC)
 $A022 DEFB $01,$04,$35,$A0,$80,$FF,$05,$04 ; #UDG(#PC)
 $A02A DEFB $03,$22,$04,$03,$02,$04,$03,$22 ; #UDG(#PC)
 $A032 DEFB $04,$03,$22,$05,$04,$23,$02,$18 ; #UDG(#PC)
 $A03A DEFB $34,$6C,$F2,$74,$34,$18,$38,$78 ; #UDG(#PC)
 $A042 DEFB $FC,$DC,$DE,$EE,$77,$7B,$7E,$7E ; #UDG(#PC)
 $A04A DEFB $7E,$7C,$02,$76,$77,$E0,$E0,$01 ; #UDG(#PC)
 $A052 DEFB $03,$06,$0F,$07,$03,$01,$07,$07 ; #UDG(#PC)
 $A05A DEFB $07,$05,$03,$07,$0E,$0D,$0B,$07 ; #UDG(#PC)
 $A062 DEFB $07,$07,$00,$06,$07,$00,$00,$80 ; #UDG(#PC)
 $A06A DEFB $40,$C0,$20,$40,$40,$80,$80,$80 ; #UDG(#PC)
 $A072 DEFB $C0,$C0,$A0,$60,$E0,$C0,$C0,$C0 ; #UDG(#PC)
 $A07A DEFB $C0,$80,$40,$C0,$C0,$C0,$E0,$3C ; #UDG(#PC)
 $A082 DEFB $7E,$7E,$42,$42,$24,$18,$FF,$FF ; #UDG(#PC)
 $A08A DEFB $FF,$FF,$FF,$FE,$FE,$7E,$7E,$7E ; #UDG(#PC)
 $A092 DEFB $7E,$7E,$3C,$0C,$0C,$0C,$0C,$00 ; #UDG(#PC)
 $A09A DEFB $00,$00,$00,$3C,$7E,$7E,$42,$42 ; #UDG(#PC)
 $A0A2 DEFB $24,$18,$FF,$FF,$FF,$FF,$7F,$7F ; #UDG(#PC)
 $A0AA DEFB $7E,$7E,$7E,$7E,$7E,$7E,$3C,$30 ; #UDG(#PC)
 $A0B2 DEFB $30,$30,$30,$00,$00,$00,$00,$18 ; #UDG(#PC)
 $A0BA DEFB $2C,$36,$4F,$2E,$2C,$18,$3C,$3C ; #UDG(#PC)
 $A0C2 DEFB $7E,$7E,$F7,$FB,$FD,$7C,$7E,$7E ; #UDG(#PC)
 $A0CA DEFB $7E,$42,$3C,$3C,$3C,$30,$30,$01 ; #UDG(#PC)
 $A0D2 DEFB $02,$03,$04,$02,$02,$01,$03,$07 ; #UDG(#PC)
 $A0DA DEFB $07,$03,$07,$07,$0E,$0D,$03,$07 ; #UDG(#PC)
 $A0E2 DEFB $03,$04,$07,$06,$0E,$00,$00,$80 ; #UDG(#PC)
 $A0EA DEFB $C0,$60,$F0,$E0,$C0,$80,$80,$C0 ; #UDG(#PC)
 $A0F2 DEFB $E0,$C0,$A0,$60,$E0,$E0,$E0,$E0 ; #UDG(#PC)
 $A0FA DEFB $E0,$00,$E0,$E0,$E0,$70,$70,$3C ; #UDG(#PC)
 $A102 DEFB $7E,$7E,$5E,$66,$3C,$18,$FF,$FF ; #UDG(#PC)
 $A10A DEFB $FF,$FF,$FF,$7F,$7F,$7E,$7E,$7E ; #UDG(#PC)
 $A112 DEFB $7E,$7E,$3C,$30,$30,$30,$30,$00 ; #UDG(#PC)
 $A11A DEFB $00,$00,$00,$3C,$7E,$7E,$5E,$66 ; #UDG(#PC)
 $A122 DEFB $3C,$18,$FF,$FF,$FF,$FF,$FF,$FE ; #UDG(#PC)
 $A12A DEFB $7E,$7E,$7E,$7E,$7E,$7E,$3C,$0C ; #UDG(#PC)
 $A132 DEFB $0C,$0C,$0C,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A13A DEFB $1C,$34,$32,$34,$18,$39,$3D,$3D ; #UDG(#PC)
 $A142 DEFB $2F,$35,$3A,$3C,$7C,$7C,$7C,$7C ; #UDG(#PC)
 $A14A DEFB $28,$44,$44,$86,$80,$40,$00,$00 ; #UDG(#PC)
 $A152 DEFB $00,$00,$00,$00,$00,$C0,$C0,$C0 ; #UDG(#PC)
 $A15A DEFB $E0,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A162 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A16A DEFB $01,$03,$03,$03,$01,$03,$03,$03 ; #UDG(#PC)
 $A172 DEFB $02,$03,$03,$07,$07,$07,$07,$07 ; #UDG(#PC)
 $A17A DEFB $01,$03,$02,$03,$00,$00,$00,$00 ; #UDG(#PC)
 $A182 DEFB $C0,$40,$20,$40,$80,$9C,$DC,$DC ; #UDG(#PC)
 $A18A DEFB $FE,$50,$A0,$C0,$C0,$C0,$C0,$C0 ; #UDG(#PC)
 $A192 DEFB $80,$80,$80,$80,$80,$C0,$00,$00 ; #UDG(#PC)
 $A19A DEFB $00,$00,$00,$00,$00,$00,$01,$03 ; #UDG(#PC)
 $A1A2 DEFB $03,$07,$0F,$0F,$0F,$0F,$0F,$0F ; #UDG(#PC)
 $A1AA DEFB $06,$0E,$0A,$0E,$02,$03,$00,$00 ; #UDG(#PC)
 $A1B2 DEFB $00,$00,$00,$30,$78,$48,$F0,$80 ; #UDG(#PC)
 $A1BA DEFB $80,$E0,$B0,$10,$00,$00,$00,$00 ; #UDG(#PC)
 $A1C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A1CA DEFB $38,$44,$44,$28,$10,$7C,$EE,$D6 ; #UDG(#PC)
 $A1D2 DEFB $EE,$D6,$D6,$28,$44,$7C,$7C,$7C ; #UDG(#PC)
 $A1DA DEFB $28,$28,$28,$08,$08,$08,$08,$00 ; #UDG(#PC)
 $A1E2 DEFB $00,$00,$00,$00,$38,$44,$44,$28 ; #UDG(#PC)
 $A1EA DEFB $10,$7C,$EE,$D6,$EE,$D6,$D6,$28 ; #UDG(#PC)
 $A1F2 DEFB $44,$7C,$7C,$7C,$28,$28,$28,$20 ; #UDG(#PC)
 $A1FA DEFB $20,$20,$20,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A202 DEFB $38,$7C,$7C,$38,$44,$EE,$FE,$FA ; #UDG(#PC)
 $A20A DEFB $FE,$FA,$FE,$02,$02,$00,$00,$00 ; #UDG(#PC)
 $A212 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A21A DEFB $00,$03,$03,$03,$07,$00,$00,$00 ; #UDG(#PC)
 $A222 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $A22A DEFB $00,$00,$00,$00,$38,$2C,$4C,$2C ; #UDG(#PC)
 $A232 DEFB $18,$9C,$BC,$BC,$F4,$AC,$5C,$3C
 $A23A DEFB $3E,$3E,$3E,$3E,$14,$22,$22,$61
 $A242 DEFB $01,$02,$00,$00,$03,$02,$04,$02
 $A24A DEFB $01,$39,$3B,$3B,$7F,$0A,$05,$03
 $A252 DEFB $03,$03,$03,$03,$01,$01,$01,$01
 $A25A DEFB $01,$03,$00,$00,$80,$C0,$C0,$C0
 $A262 DEFB $80,$C0,$C0,$C0,$40,$C0,$C0,$E0
 $A26A DEFB $E0,$E0,$E0,$E0,$80,$C0,$40,$C0
 $A272 DEFB $00,$00,$00,$00,$00,$00,$00,$0C
 $A27A DEFB $1E,$12,$0F,$01,$01,$07,$0D,$08
 $A282 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A28A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A292 DEFB $00,$00,$80,$00,$C0,$E0,$F0,$F0
 $A29A DEFB $F0,$F0,$F0,$F0,$60,$70,$50,$70
 $A2A2 DEFB $40,$C0,$00,$00,$38,$7C,$7C,$38
 $A2AA DEFB $10,$7C,$FE,$FE,$FE,$BA,$FE,$7C
 $A2B2 DEFB $7C,$7C,$7C,$7C,$28,$28,$28,$20
 $A2BA DEFB $20,$20,$20,$00,$00,$00,$00,$00
 $A2C2 DEFB $38,$7C,$7C,$38,$10,$7C,$FE,$FE
 $A2CA DEFB $FE,$BA,$FE,$7C,$7C,$7C,$7C,$7C
 $A2D2 DEFB $28,$28,$28,$08,$08,$08,$08,$00
 $A2DA DEFB $00,$00,$00,$00,$00,$38,$7C,$FC
 $A2E2 DEFB $B8,$90,$BC,$FE,$7E,$3A,$3A,$7C
 $A2EA DEFB $7C,$7C,$7C,$7C,$28,$28,$28,$28
 $A2F2 DEFB $28,$00,$00,$05,$04,$23,$02,$04
 $A2FA DEFB $03,$00,$04,$23,$02,$04,$03,$02
 $A302 DEFB $04,$23,$02,$05,$24,$03,$02,$49
 $A30A DEFB $A3,$01,$03,$2F,$A0,$80,$FF,$91
 $A312 DEFB $A3,$01,$03,$2F,$A0,$80,$FF,$C9
 $A31A DEFB $A3,$01,$03,$2F,$A0,$80,$FF,$11
 $A322 DEFB $A4,$01,$03,$2F,$A0,$80,$FF,$61
 $A32A DEFB $A3,$02,$03,$2C,$A0,$7E,$FF,$A9
 $A332 DEFB $A3,$01,$04,$28,$A0,$40,$FF,$E1
 $A33A DEFB $A3,$02,$03,$29,$A0,$80,$FF,$29
 $A342 DEFB $A4,$01,$04,$35,$A0,$80,$FF,$7E
 $A34A DEFB $7C,$74,$62,$74,$58,$18,$38,$78
 $A352 DEFB $68,$68,$AC,$B8,$3C,$38,$38,$38
 $A35A DEFB $28,$44,$44,$86,$80,$40,$00,$07
 $A362 DEFB $07,$07,$06,$07,$05,$01,$03,$07
 $A36A DEFB $07,$03,$03,$03,$03,$03,$01,$01
 $A372 DEFB $01,$02,$02,$03,$00,$00,$00,$E0
 $A37A DEFB $C0,$40,$20,$40,$80,$80,$80,$80
 $A382 DEFB $40,$40,$C0,$80,$80,$80,$80,$80
 $A38A DEFB $80,$80,$80,$80,$80,$C0,$00,$18
 $A392 DEFB $3C,$7E,$C3,$42,$24,$18,$3C,$7E
 $A39A DEFB $7E,$7E,$7E,$7C,$7C,$7C,$3C,$2C
 $A3A2 DEFB $2C,$24,$24,$04,$04,$04,$04,$00
 $A3AA DEFB $00,$00,$00,$18,$3C,$7E,$C3,$42
 $A3B2 DEFB $24,$18,$3C,$7E,$7E,$7E,$7E,$3E
 $A3BA DEFB $3E,$3E,$3C,$34,$34,$24,$24,$20
 $A3C2 DEFB $20,$20,$20,$00,$00,$00,$00,$7E
 $A3CA DEFB $3E,$2E,$46,$2E,$1A,$18,$38,$3C
 $A3D2 DEFB $3E,$1C,$18,$36,$3C,$1C,$1C,$1C
 $A3DA DEFB $14,$22,$22,$61,$01,$02,$00,$07
 $A3E2 DEFB $03,$02,$04,$02,$01,$03,$07,$07
 $A3EA DEFB $0B,$0B,$03,$03,$03,$03,$03,$01
 $A3F2 DEFB $01,$01,$01,$01,$01,$03,$00,$E0
 $A3FA DEFB $E0,$E0,$60,$E0,$A0,$80,$80,$C0
 $A402 DEFB $40,$A0,$A0,$A0,$C0,$C0,$C0,$80
 $A40A DEFB $80,$40,$40,$C0,$00,$00,$00,$18
 $A412 DEFB $3C,$7E,$FF,$7E,$24,$18,$3C,$7E
 $A41A DEFB $7E,$7E,$7E,$3E,$3E,$3E,$3C,$34
 $A422 DEFB $34,$24,$24,$20,$20,$20,$20,$00
 $A42A DEFB $00,$00,$00,$18,$3C,$7E,$FF,$7E
 $A432 DEFB $24,$18,$3C,$7E,$7E,$7E,$7E,$7C
 $A43A DEFB $7C,$7C,$3C,$2C,$2C,$24,$24,$04
 $A442 DEFB $04,$04,$04,$00,$00,$00,$00,$89
 $A44A DEFB $A4,$01,$03,$2F,$A0,$80,$FF,$D1
 $A452 DEFB $A4,$01,$03,$2F,$A0,$80,$FF,$09
 $A45A DEFB $A5,$01,$03,$2F,$A0,$80,$FF,$51
 $A462 DEFB $A5,$01,$03,$2F,$A0,$80,$FF,$A1
 $A46A DEFB $A4,$02,$03,$2C,$A0,$7E,$FF,$E9
 $A472 DEFB $A4,$01,$04,$28,$A0,$40,$FF,$21
 $A47A DEFB $A5,$02,$03,$29,$A0,$80,$FF,$69
 $A482 DEFB $A5,$01,$04,$35,$A0,$80,$FF,$10
 $A48A DEFB $38,$71,$79,$79,$3D,$6D,$75,$D1
 $A492 DEFB $E9,$F7,$F9,$7D,$1D,$3C,$6C,$C8
 $A49A DEFB $98,$D8,$10,$18,$00,$00,$00,$01
 $A4A2 DEFB $03,$07,$07,$07,$03,$06,$07,$0D
 $A4AA DEFB $0E,$0F,$0F,$07,$00,$00,$01,$03
 $A4B2 DEFB $06,$04,$08,$04,$00,$00,$00,$00
 $A4BA DEFB $80,$10,$90,$90,$D0,$D0,$30,$10
 $A4C2 DEFB $90,$70,$90,$D0,$D0,$C0,$C0,$C0
 $A4CA DEFB $80,$C0,$00,$00,$00,$00,$00,$00
 $A4D2 DEFB $00,$BC,$FC,$DA,$FE,$DA,$E6,$BC
 $A4DA DEFB $FE,$BF,$BF,$DF,$66,$FF,$BD,$DB
 $A4E2 DEFB $42,$42,$41,$40,$40,$40,$80,$00
 $A4EA DEFB $00,$00,$00,$00,$BC,$FE,$DA,$FE
 $A4F2 DEFB $DA,$E6,$BC,$FE,$BF,$BF,$5F,$E6
 $A4FA DEFB $FF,$FF,$BD,$D9,$43,$42,$82,$02
 $A502 DEFB $02,$02,$01,$00,$00,$00,$00,$08
 $A50A DEFB $1C,$8E,$9E,$9E,$BC,$B6,$AE,$8B
 $A512 DEFB $97,$EF,$9F,$BE,$B8,$3C,$36,$13
 $A51A DEFB $19,$1B,$08,$18,$00,$00,$00,$00
 $A522 DEFB $01,$08,$09,$09,$0B,$0B,$0A,$08
 $A52A DEFB $09,$0E,$09,$0B,$0B,$03,$03,$03
 $A532 DEFB $01,$03,$00,$00,$00,$00,$00,$80
 $A53A DEFB $C0,$E0,$E0,$E0,$C0,$60,$E0,$B0
 $A542 DEFB $70,$F0,$F0,$E0,$00,$00,$80,$C0
 $A54A DEFB $60,$20,$10,$20,$00,$00,$00,$19
 $A552 DEFB $3D,$3D,$3D,$3D,$19,$7F,$FF,$FF
 $A55A DEFB $FF,$FF,$7F,$7F,$FE,$FF,$FF,$9D
 $A562 DEFB $43,$42,$02,$02,$03,$02,$00,$00
 $A56A DEFB $00,$00,$00,$19,$3D,$3D,$3D,$3D
 $A572 DEFB $19,$7F,$FF,$FF,$FF,$FF,$7F,$7F
 $A57A DEFB $7F,$FF,$FF,$9E,$82,$83,$C2,$40
 $A582 DEFB $C0,$40,$00,$00,$00,$00,$00,$EF
 $A58A DEFB $A5,$02,$03,$C9,$A5,$80,$FF,$4F
 $A592 DEFB $A6,$01,$03,$D5,$A5,$80,$FF,$87
 $A59A DEFB $A6,$02,$03,$DC,$A5,$7E,$FF,$E7
 $A5A2 DEFB $A6,$01,$03,$E8,$A5,$80,$FF,$1F
 $A5AA DEFB $A6,$02,$03,$CF,$A5,$7E,$FF,$67
 $A5B2 DEFB $A6,$01,$04,$D8,$A5,$40,$FF,$B7
 $A5BA DEFB $A6,$02,$03,$E2,$A5,$80,$FF,$FF
 $A5C2 DEFB $A6,$01,$04,$EB,$A5,$80,$FF,$04
 $A5CA DEFB $03,$22,$04,$03,$02,$04,$03,$22
 $A5D2 DEFB $04,$03,$22,$04,$03,$22,$05,$04
 $A5DA DEFB $03,$22,$04,$03,$02,$04,$03,$22
 $A5E2 DEFB $04,$03,$22,$04,$03,$22,$04,$03
 $A5EA DEFB $22,$05,$04,$23,$02,$1C,$3E,$3F
 $A5F2 DEFB $F2,$36,$18,$38,$78,$7D,$7E,$7C
 $A5FA DEFB $7F,$7E,$7E,$7E,$7C,$7E,$7E,$7F
 $A602 DEFB $7F,$73,$E0,$C0,$00,$00,$00,$80
 $A60A DEFB $00,$00,$00,$00,$80,$80,$40,$80
 $A612 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A61A DEFB $00,$00,$00,$00,$00,$01,$03,$03
 $A622 DEFB $0F,$03,$01,$03,$07,$07,$07,$07
 $A62A DEFB $07,$07,$07,$07,$07,$07,$07,$03
 $A632 DEFB $03,$03,$00,$00,$00,$C0,$E0,$F8
 $A63A DEFB $20,$60,$80,$88,$98,$E4,$C8,$F0
 $A642 DEFB $E0,$E0,$C0,$E0,$E0,$E0,$E0,$E0
 $A64A DEFB $E0,$E0,$C0,$C0,$00,$3C,$7E,$FF
 $A652 DEFB $C3,$C3,$66,$18,$FF,$FF,$FF,$FF
 $A65A DEFB $DD,$6A,$76,$7E,$7E,$7E,$7E,$7E
 $A662 DEFB $3C,$3C,$0C,$0C,$0C,$00,$00,$00
 $A66A DEFB $00,$3C,$7E,$FF,$C3,$42,$24,$18
 $A672 DEFB $FF,$FF,$FF,$FF,$DD,$6A,$76,$7E
 $A67A DEFB $7E,$7E,$7E,$7E,$3C,$3C,$30,$30
 $A682 DEFB $30,$00,$00,$00,$00,$00,$00,$01
 $A68A DEFB $00,$00,$00,$00,$01,$01,$02,$01
 $A692 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A69A DEFB $00,$00,$00,$00,$00,$38,$7C,$FC
 $A6A2 DEFB $4F,$6C,$18,$1C,$1E,$BE,$7E,$3E
 $A6AA DEFB $FE,$3E,$3E,$7E,$3E,$7E,$7E,$FE
 $A6B2 DEFB $FE,$CE,$07,$03,$00,$03,$07,$1F
 $A6BA DEFB $04,$06,$01,$11,$19,$27,$13,$0F
 $A6C2 DEFB $07,$07,$03,$07,$07,$07,$07,$07
 $A6CA DEFB $07,$07,$03,$03,$00,$80,$C0,$C0
 $A6D2 DEFB $F0,$C0,$80,$C0,$E0,$E0,$E0,$E0
 $A6DA DEFB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$C0
 $A6E2 DEFB $C0,$C0,$00,$00,$00,$3C,$7E,$FF
 $A6EA DEFB $FF,$7E,$3C,$18,$FF,$FF,$FF,$FF
 $A6F2 DEFB $FF,$7E,$7E,$7E,$7E,$7E,$7E,$7E
 $A6FA DEFB $3C,$3C,$30,$30,$30,$00,$00,$00
 $A702 DEFB $00,$3C,$7E,$FF,$FF,$7E,$3C,$18
 $A70A DEFB $FF,$FF,$FF,$FF,$FF,$7E,$7E,$7E
 $A712 DEFB $7E,$7E,$7E,$7E,$3C,$3C,$0C,$0C
 $A71A DEFB $0C,$00,$00,$00,$00,$67,$A7,$01
 $A722 DEFB $03,$2F,$A0,$80,$FF,$AF,$A7,$01
 $A72A DEFB $03,$2F,$A0,$80,$FF,$E7,$A7,$01
 $A732 DEFB $03,$2F,$A0,$80,$FF,$2F,$A8,$01
 $A73A DEFB $03,$2F,$A0,$80,$FF,$7F,$A7,$02
 $A742 DEFB $03,$2C,$A0,$7E,$FF,$C7,$A7,$01
 $A74A DEFB $04,$28,$A0,$40,$FF,$FF,$A7,$02
 $A752 DEFB $03,$29,$A0,$80,$FF,$47,$A8,$01
 $A75A DEFB $04,$35,$A0,$80,$FF,$67,$A8,$01
 $A762 DEFB $03,$2F,$A0,$80,$FF,$1C,$34,$32
 $A76A DEFB $34,$14,$18,$38,$78,$3C,$7C,$7C
 $A772 DEFB $BA,$BA,$38,$38,$3C,$3C,$3C,$24
 $A77A DEFB $44,$46,$80,$40,$00,$01,$03,$03
 $A782 DEFB $03,$01,$01,$03,$03,$03,$03,$03
 $A78A DEFB $07,$05,$01,$01,$03,$03,$02,$04
 $A792 DEFB $04,$02,$00,$00,$00,$C0,$40,$20
 $A79A DEFB $40,$40,$80,$00,$80,$80,$C0,$C0
 $A7A2 DEFB $C0,$A0,$80,$C0,$C0,$C0,$80,$80
 $A7AA DEFB $80,$80,$80,$C0,$00,$18,$3C,$42
 $A7B2 DEFB $42,$42,$18,$3C,$76,$6E,$5E,$7E
 $A7BA DEFB $7E,$1A,$26,$3C,$3C,$38,$34,$34
 $A7C2 DEFB $04,$20,$20,$20,$20,$00,$00,$00
 $A7CA DEFB $00,$18,$3C,$42,$42,$24,$18,$3C
 $A7D2 DEFB $76,$6E,$5E,$7E,$7E,$58,$64,$3C
 $A7DA DEFB $3C,$3C,$3C,$0C,$20,$04,$04,$04
 $A7E2 DEFB $04,$00,$00,$00,$00,$38,$2C,$4C
 $A7EA DEFB $2C,$28,$18,$38,$3C,$30,$28,$1C
 $A7F2 DEFB $3A,$5C,$1C,$1C,$3C,$3C,$3C,$24
 $A7FA DEFB $22,$62,$01,$02,$00,$03,$02,$04
 $A802 DEFB $02,$02,$01,$03,$03,$03,$05,$05
 $A80A DEFB $09,$01,$03,$03,$03,$03,$03,$01
 $A812 DEFB $01,$01,$01,$03,$00,$80,$C0,$C0
 $A81A DEFB $C0,$80,$80,$80,$40,$C0,$A0,$A0
 $A822 DEFB $90,$80,$C0,$C0,$C0,$C0,$40,$20
 $A82A DEFB $20,$40,$00,$00,$00,$18,$3C,$7E
 $A832 DEFB $7E,$3C,$18,$3C,$6E,$76,$7A,$7E
 $A83A DEFB $7E,$58,$64,$3C,$3C,$1C,$2C,$24
 $A842 DEFB $20,$04,$04,$04,$04,$00,$00,$00
 $A84A DEFB $00,$18,$3C,$7E,$7E,$3C,$18,$3C
 $A852 DEFB $6E,$76,$7A,$7E,$7E,$1A,$26,$3E
 $A85A DEFB $3C,$3C,$0C,$20,$24,$20,$20,$20
 $A862 DEFB $20,$00,$00,$00,$00,$00,$00,$00
 $A86A DEFB $00,$18,$3C,$42,$42,$24,$18,$3E
 $A872 DEFB $7F,$7F,$7F,$7F,$3C,$DA,$FF,$5D
 $A87A DEFB $41,$22,$22,$22,$41,$C8,$A8,$02
 $A882 DEFB $03,$C2,$A8,$80,$FF,$28,$A9,$02
 $A88A DEFB $03,$C2,$A8,$80,$FF,$88,$A9,$02
 $A892 DEFB $03,$C2,$A8,$80,$FF,$E8,$A9,$02
 $A89A DEFB $03,$C2,$A8,$80,$FF,$F8,$A8,$02
 $A8A2 DEFB $03,$BF,$A8,$7E,$FF,$58,$A9,$02
 $A8AA DEFB $03,$BF,$A8,$7E,$FF,$B8,$A9,$02
 $A8B2 DEFB $03,$BF,$A8,$7E,$FF,$18,$AA,$02
 $A8BA DEFB $03,$BF,$A8,$7E,$FF,$04,$03,$22
 $A8C2 DEFB $04,$03,$22,$04,$03,$02,$38,$76
 $A8CA DEFB $4C,$FC,$3F,$18,$38,$7F,$7F,$3E
 $A8D2 DEFB $3C,$3C,$3C,$3C,$3C,$7E,$7E,$76
 $A8DA DEFB $76,$66,$E7,$40,$20,$00,$00,$00
 $A8E2 DEFB $00,$10,$F0,$90,$80,$80,$00,$00
 $A8EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A8F2 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $A8FA DEFB $07,$04,$0F,$03,$01,$03,$07,$07
 $A902 DEFB $03,$03,$03,$03,$03,$03,$07,$07
 $A90A DEFB $06,$06,$07,$00,$00,$00,$00,$80
 $A912 DEFB $60,$C0,$C1,$FF,$89,$88,$F8,$F8
 $A91A DEFB $E0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
 $A922 DEFB $C0,$C0,$C0,$C0,$E0,$00,$38,$76
 $A92A DEFB $4C,$7C,$3C,$18,$38,$7D,$7F,$3F
 $A932 DEFB $3F,$3E,$3C,$3C,$3C,$7E,$7E,$76
 $A93A DEFB $76,$66,$E7,$40,$20,$00,$00,$00
 $A942 DEFB $00,$00,$00,$00,$C0,$E0,$F0,$B0
 $A94A DEFB $70,$E0,$C0,$00,$00,$00,$00,$00
 $A952 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $A95A DEFB $07,$04,$0F,$03,$01,$03,$07,$07
 $A962 DEFB $03,$03,$03,$03,$03,$03,$07,$07
 $A96A DEFB $06,$06,$07,$00,$00,$00,$00,$80
 $A972 DEFB $60,$C0,$C0,$C8,$90,$B8,$FC,$FE
 $A97A DEFB $FE,$7E,$BC,$D8,$C0,$C0,$C0,$C0
 $A982 DEFB $C0,$C0,$C0,$C0,$E0,$00,$38,$76
 $A98A DEFB $4C,$FC,$BE,$59,$38,$7E,$7F,$3F
 $A992 DEFB $3E,$3C,$3C,$3C,$3C,$7E,$7E,$76
 $A99A DEFB $76,$66,$E7,$40,$20,$00,$00,$00
 $A9A2 DEFB $00,$00,$00,$80,$40,$B8,$B8,$B4
 $A9AA DEFB $32,$09,$06,$00,$00,$00,$00,$00
 $A9B2 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $A9BA DEFB $07,$04,$0F,$0B,$05,$03,$07,$07
 $A9C2 DEFB $03,$03,$03,$03,$03,$03,$07,$07
 $A9CA DEFB $06,$06,$07,$00,$00,$00,$00,$80
 $A9D2 DEFB $60,$C0,$C0,$C0,$A0,$90,$CE,$DC
 $A9DA DEFB $FA,$E9,$E5,$C2,$C0,$C0,$C0,$C0
 $A9E2 DEFB $C0,$C0,$C0,$C0,$E0,$00,$38,$76
 $A9EA DEFB $4C,$FC,$3C,$18,$3F,$7E,$7D,$3B
 $A9F2 DEFB $37,$37,$37,$3A,$3C,$7E,$7E,$76
 $A9FA DEFB $76,$66,$E7,$40,$20,$00,$00,$00
 $AA02 DEFB $00,$40,$40,$40,$80,$80,$00,$00
 $AA0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AA12 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $AA1A DEFB $07,$04,$0F,$03,$01,$03,$07,$07
 $AA22 DEFB $03,$03,$03,$03,$03,$03,$07,$07
 $AA2A DEFB $06,$06,$07,$00,$00,$00,$00,$80
 $AA32 DEFB $60,$C0,$C4,$C4,$84,$F8,$E8,$D0
 $AA3A DEFB $B0,$70,$70,$70,$A0,$C0,$C0,$C0
 $AA42 DEFB $C0,$C0,$C0,$C0,$E0,$00,$58,$AA
 $AA4A DEFB $01,$02,$68,$AA,$00,$00,$00,$00
 $AA52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AA5A DEFB $00,$00,$18,$18,$00,$00,$00,$00
 $AA62 DEFB $00,$00,$00,$00,$00,$00,$01,$01
 $AA6A DEFB $58,$AA,$01,$01,$72,$AA,$00,$00 ; #UDG(#PC)
 $AA72 DEFB $11,$8E,$AA,$01,$02,$7B,$AA,$00 ; #UDG(#PC)
 $AA7A DEFB $00,$07,$07
 $AA7D DEFB $8E,$AA,$01,$01,$85,$AA,$00,$00 ; #UDG(#PC)
 $AA85 DEFB $11,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $AA8D DEFB $00,$00,$00,$00,$00,$36,$4A,$42 ; #UDG(#PC)
 $AA95 DEFB $3C,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $AA9D DEFB $00,$A6,$AA,$01,$01,$85,$AA,$00 ; #UDG(#PC)
 $AAA5 DEFB $00,$00,$00,$00,$00,$6C,$6C,$6C ; #UDG(#PC)
 $AAAD DEFB $00

; Sub-Game Data: Paris
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8EB2)(paris) }
; UDGTABLE#
; #POPS
@label=Paris_Data
b$AAAE DEFW $B031                           ; #R$B031
 $AAB0 DEFW $AF29                           ; #R$AF29
 $AAB2 DEFW $AFB2                           ; #R$AFB2
 $AAB4 DEFW $AFA9                           ; #R$AFA9
 $AAB6 DEFB $07
 $AAB7 DEFW $AEF3                           ; #R$AEF3
 $AAB9 DEFW $ACFA
@label=Paris_SubGame
 $AABB DEFW $AB17                           ; Location subgame routine.
@label=Paris_SetUp
 $AABD DEFW $AADA                           ; Initialisation routine.
 $AABF DEFB $A0,$7C,$9A,$AE,$01,$00,$15,$00
 $AAC7 DEFB $20,$00,$00,$30,$00,$32,$78,$5E
 $AACF DEFB $48,$9F,$00,$00,$00,$00,$00,$00
 $AAD7 DEFB $00,$06,$06

; Initialise: Paris
@label=Initialise_Paris
c$AADA LD HL,$5EB0   ; #REGhl=#R$5EB0.
 $AADD LD DE,$5EB1   ; #REGde=#N$5EB1.
 $AAE0 LD BC,$014F   ; #REGbc=#N($014F,$04,$04).
 $AAE3 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $AAE5 LDIR          ; LDIR.
 $AAE7 LD HL,$AEAB   ; #REGhl=#R$AEAB.
 $AAEA CALL $B0AE    ; Call #R$B0AE.
 $AAED LD IX,$ADAB   ; #REGix=#R$ADAB.
 $AAF1 LD DE,$7240   ; {Write #R$7240 to *#R$99B8.
 $AAF4 LD ($99B8),DE ; }
 $AAF8 LD B,$09      ; #REGb=#N$09.
 $AAFA LD DE,$0060   ; {Write #N($0060,$04,$04) to *#R$926E.
 $AAFD LD ($926E),DE ; }
 $AB01 CALL $9226    ; Call #R$9226.
 $AB04 LD DE,$0020   ; {Write #N($0020,$04,$04) to *#R$926E.
 $AB07 LD ($926E),DE ; }
 $AB0B LD B,$12      ; #REGb=#N$12.
 $AB0D CALL $9226    ; Call #R$9226.
 $AB10 LD HL,$7E00   ; {Write #R$7E00 to *#R$7239.
 $AB13 LD ($7239),HL ; }
 $AB16 RET           ; Return.

; Handler: Paris
@label=Handler_Paris
c$AB17 CALL $AC1B                           ; Call #R$AC1B.
 $AB1A LD A,($7207)                         ; {Return if *#R$7207 is zero.
 $AB1D CP $00                               ;
 $AB1F RET Z                                ; }
 $AB20 LD HL,($99E3)                        ; #REGhl=*#R$99E3.
 $AB23 LD DE,$0038                          ; {#REGhl+=#N($0038,$04,$04).
 $AB26 ADD HL,DE                            ; }
 $AB27 LD A,$C8                             ; {Jump to #R$AB2F if #REGl is not
 $AB29 CP L                                 ; equal to #N$C8.
 $AB2A JR NZ,$AB2F                          ; }
 $AB2C LD HL,$5EB0                          ; {Write #R$5EB0 to *#R$99E3.
*$AB2F LD ($99E3),HL                        ; }
 $AB32 BIT 7,(HL)                           ; Test bit 7 of *#REGhl.
 $AB34 JP Z,$ABE5                           ; Jump to #R$ABE5 if #REGa is zero.
 $AB37 CALL $9439                           ; Call #R$9439.
 $AB3A LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $AB3E LD A,$80                             ; {Jump to #R$AB5B if *#REGix+#N$00
 $AB40 CP (IX+$00)                          ; is equal to #N$80.
 $AB43 JR Z,$AB5B                           ; }
 $AB45 DEC (IX+$00)                         ; Decrease *#REGix+#N$00 by one.
 $AB48 CP (IX+$00)                          ; Compare #REGa with *#REGix+#N$00.
 $AB4B RET NZ                               ; Return if {} is not zero.
 $AB4C LD HL,$AD53                          ; {Write #R$AD53 to *#R$ACFA.
 $AB4F LD ($ACFA),HL                        ; }
 $AB52 CALL $994D                           ; Call #R$994D.
 $AB55 LD HL,($99E3)                        ; #REGhl=*#R$99E3.
 $AB58 LD (HL),$80                          ; Write #N$80 to *#REGhl.
 $AB5A RET                                  ; Return.
*$AB5B BIT 5,(IX+$06)                       ; Test bit 5 of *#REGix+#N$06.
 $AB5F JR Z,$AB78                           ; Jump to #R$AB78 if #REGa is zero.
 $AB61 RES 5,(IX+$06)                       ; Reset bit 5 of *#REGix+#N$06.
 $AB65 LD L,(IX+$04)                        ; #REGl=*#REGix+#N$04.
 $AB68 LD H,(IX+$05)                        ; #REGh=*#REGix+#N$05.
 $AB6B CALL $9604                           ; Call #R$9604.
 $AB6E JP NZ,$9926                          ; Jump to #R$9926 if #REGa is not
                                            ; zero.
 $AB71 LD (IX+$00),$00                      ; Write #N$00 to *#REGix+#N$00.
 $AB75 JP $9942                             ; Jump to #R$9942.
*$AB78 LD A,($99AB)                         ; #REGa=*#R$99AB.
 $AB7B CP $50                               ; Compare #REGa with #N$50.
 $AB7D JR Z,$ABA9                           ; Jump to #R$ABA9 if #REGa is zero.
 $AB7F LD A,($99AC)                         ; #REGa=*#R$99AC.
 $AB82 CP $00                               ; Compare #REGa with #N$00.
 $AB84 JR Z,$ABA9                           ; Jump to #R$ABA9 if #REGa is zero.
 $AB86 LD A,(IX+$18)                        ; #REGa=*#REGix+#N$18.
 $AB89 AND %10010000                        ; Keep only bits 4, 7.
 $AB8B CP $80                               ; Compare #REGa with #N$80.
 $AB8D JR NZ,$ABA9                          ; Jump to #R$ABA9 if #REGa is not
                                            ; zero.
 $AB8F CALL $9619                           ; Call #R$9619.
 $AB92 AND %00001111                        ; Keep only bits 0-3.
 $AB94 OR %10010000                         ; Set bits 4, 7.
 $AB96 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $AB9A LD (IX+$00),A                        ; Write #REGa to *#REGix+#N$00.
 $AB9D RET                                  ; Return.
*$AB9E AND %01000000                        ; Keep only bits 6.
 $ABA0 JR Z,$ABB0                           ; Jump to #R$ABB0 if #REGa is zero.
 $ABA2 LD HL,$7200                          ; #REGhl=#R$7200.
 $ABA5 SET 4,(HL)                           ; Set bit 4 of *#REGhl.
 $ABA7 JR $ABB0                             ; Jump to #R$ABB0.
*$ABA9 LD A,(IX+$07)                        ; #REGa=*#REGix+#N$07.
 $ABAC CP $00                               ; Compare #REGa with #N$00.
 $ABAE JR NZ,$ABC8                          ; Jump to #R$ABC8 if #REGa is not
                                            ; zero.
*$ABB0 CALL $9619                           ; Call #R$9619.
 $ABB3 LD C,A                               ; #REGc=#REGa.
 $ABB4 AND %00011000                        ; Keep only bits 3-4.
 $ABB6 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $ABBA LD (IX+$06),A                        ; Write #REGa to *#REGix+#N$06.
 $ABBD LD A,C                               ; #REGa=#REGc.
 $ABBE AND %00000111                        ; Keep only bits 0-2.
 $ABC0 ADD A,$08                            ; #REGa+=#N$08.
 $ABC2 LD (IX+$07),A                        ; Write #REGa to *#REGix+#N$07.
 $ABC5 JP $9926                             ; Jump to #R$9926.
*$ABC8 DEC (IX+$07)                         ; Decrease *#REGix+#N$07 by one.
 $ABCB LD H,(IX+$05)                        ; #REGh=*#REGix+#N$05.
 $ABCE LD L,(IX+$04)                        ; #REGl=*#REGix+#N$04.
 $ABD1 CALL $9375                           ; Call #R$9375.
 $ABD4 AND %01100010                        ; Keep only bits 1, 5-6.
 $ABD6 JR NZ,$AB9E                          ; Jump to #R$AB9E if #REGa is not
                                            ; zero.
 $ABD8 LD (IX+$04),L                        ; Write #REGl to *#REGix+#N$04.
 $ABDB LD (IX+$05),H                        ; Write #REGh to *#REGix+#N$05.
 $ABDE SET 5,(IX+$06)                       ; Set bit 5 of *#REGix+#N$06.
 $ABE2 JP $9926                             ; Jump to #R$9926.
*$ABE5 CALL $9439                           ; Call #R$9439.
 $ABE8 CALL $9619                           ; Call #R$9619.
 $ABEB AND %11110000                        ; Keep only bits 4-7.
 $ABED LD L,A                               ; #REGl=#REGa.
 $ABEE LD H,$00                             ; #REGh=#N$00.
 $ABF0 ADD HL,HL                            ; #REGhl+=#REGhl.
 $ABF1 ADD HL,HL                            ; #REGhl+=#REGhl.
 $ABF2 LD DE,$78FE                          ; #REGde=#R$78FE.
 $ABF5 ADD HL,DE                            ; #REGhl+=#REGde.
 $ABF6 LD A,$10                             ; #REGa=#N$10.
 $ABF8 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $ABFC CALL $9378                           ; Call #R$9378.
 $ABFF AND %01100010                        ; Keep only bits 1, 5-6.
 $AC01 RET NZ                               ; Return if {} is not zero.
 $AC02 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $AC05 AND %00001111                        ; Keep only bits 0-3.
 $AC07 LD (IX+$07),A                        ; Write #REGa to *#REGix+#N$07.
 $AC0A LD (IX+$00),$80                      ; Write #N$80 to *#REGix+#N$00.
 $AC0E LD (IX+$04),L                        ; Write #REGl to *#REGix+#N$04.
 $AC11 LD (IX+$05),H                        ; Write #REGh to *#REGix+#N$05.
 $AC14 LD (IX+$06),$30                      ; Write #N$30 to *#REGix+#N$06.
 $AC18 JP $9929                             ; Jump to #R$9929.
*$AC1B LD HL,($7239)                        ; #REGhl=*#R$7239.
 $AC1E BIT 0,(HL)                           ; Test bit 0 of *#REGhl.
 $AC20 JR NZ,$AC35                          ; Jump to #R$AC35 if #REGa is not
                                            ; zero.
*$AC22 LD HL,($7239)                        ; #REGhl=*#R$7239.
 $AC25 LD DE,$000A                          ; #REGde=#N($000A,$04,$04).
 $AC28 ADD HL,DE                            ; #REGhl+=#REGde.
 $AC29 LD A,$80                             ; #REGa=#N$80.
*$AC2B CP H                                 ; Compare #REGa with #REGh.
 $AC2C LD ($7239),HL                        ; Write #REGhl to *#R$7239.
 $AC2F RET NZ                               ; Return if {} is not zero.
 $AC30 LD HL,$7E00                          ; #REGhl=#R$7E00.
 $AC33 JR $AC2B                             ; Jump to #R$AC2B.
*$AC35 BIT 1,(HL)                           ; Test bit 1 of *#REGhl.
 $AC37 JR NZ,$AC5B                          ; Jump to #R$AC5B if #REGa is not
                                            ; zero.
 $AC39 CALL $9619                           ; Call #R$9619.
 $AC3C CP $96                               ; Compare #REGa with #N$96.
 $AC3E JR C,$AC22                           ; Jump to #R$AC22 if #REGa is
                                            ; lower.
 $AC40 AND %00001100                        ; Keep only bits 2-3.
 $AC42 LD E,A                               ; #REGe=#REGa.
 $AC43 RLCA                                 ; RLCA.
 $AC44 LD IX,($7239)                        ; #REGix=*#R$7239.
 $AC48 LD L,(IX+$01)                        ; #REGl=*#REGix+#N$01.
 $AC4B LD H,(IX+$02)                        ; #REGh=*#REGix+#N$02.
 $AC4E CALL $9378                           ; Call #R$9378.
 $AC51 AND %00010001                        ; Keep only bits 0, 4.
 $AC53 JR NZ,$AC22                          ; Jump to #R$AC22 if #REGa is not
                                            ; zero.
 $AC55 LD A,E                               ; #REGa=#REGe.
 $AC56 OR %00000011                         ; Set bits 0-1.
 $AC58 LD (IX+$00),A                        ; Write #REGa to *#REGix+#N$00.
*$AC5B LD IX,($7239)                        ; #REGix=*#R$7239.
 $AC5F LD C,(IX+$01)                        ; #REGc=*#REGix+#N$01.
 $AC62 LD B,(IX+$02)                        ; #REGb=*#REGix+#N$02.
 $AC65 CALL $93E9                           ; Call #R$93E9.
 $AC68 LD IX,($7239)                        ; #REGix=*#R$7239.
 $AC6C LD A,(IX+$00)                        ; #REGa=*#REGix+#N$00.
 $AC6F ADD A,$10                            ; #REGa+=#N$10.
 $AC71 CP $50                               ; Compare #REGa with #N$50.
 $AC73 JR C,$AC7F                           ; Jump to #R$AC7F if #REGa is
                                            ; lower.
 $AC75 AND %00001101                        ; Keep only bits 0, 2-3.
 $AC77 LD (IX+$00),A                        ; Write #REGa to *#REGix+#N$00.
 $AC7A CALL $ACBA                           ; Call #R$ACBA.
 $AC7D JR $AC22                             ; Jump to #R$AC22.
*$AC7F LD (IX+$00),A                        ; Write #REGa to *#REGix+#N$00.
 $AC82 CALL $ACCA                           ; Call #R$ACCA.
 $AC85 LD A,(IX+$02)                        ; #REGa=*#REGix+#N$02.
 $AC88 LD D,(IX+$03)                        ; #REGd=*#REGix+#N$03.
 $AC8B LD IX,($7239)                        ; #REGix=*#R$7239.
 $AC8F CP $00                               ; Compare #REGa with #N$00.
 $AC91 JR Z,$ACC1                           ; Jump to #R$ACC1 if #REGa is zero.
 $AC93 LD E,A                               ; #REGe=#REGa.
 $AC94 LD L,(IX+$01)                        ; #REGl=*#REGix+#N$01.
 $AC97 LD H,(IX+$02)                        ; #REGh=*#REGix+#N$02.
 $AC9A ADD HL,DE                            ; #REGhl+=#REGde.
 $AC9B LD D,(HL)                            ; #REGd=*#REGhl.
 $AC9C INC HL                               ; Increment #REGhl by one.
 $AC9D LD E,(HL)                            ; #REGe=*#REGhl.
 $AC9E LD A,(DE)                            ; #REGa=*#REGde.
 $AC9F DEC HL                               ; Decrease #REGhl by one.
 $ACA0 AND %00010001                        ; Keep only bits 0, 4.
 $ACA2 JR NZ,$ACAD                          ; Jump to #R$ACAD if #REGhl is not
                                            ; zero.
 $ACA4 LD (IX+$01),L                        ; Write #REGl to *#REGix+#N$01.
 $ACA7 LD (IX+$02),H                        ; Write #REGh to *#REGix+#N$02.
 $ACAA JP $97A7                             ; Jump to #R$97A7.
*$ACAD LD A,(IX+$00)                        ; #REGa=*#REGix+#N$00.
 $ACB0 AND %00001111                        ; Keep only bits 0-3.
 $ACB2 OR %01000000                         ; Set bits 6.
 $ACB4 LD (IX+$00),A                        ; Write #REGa to *#REGix+#N$00.
 $ACB7 JP $ACBA                             ; Jump to #R$ACBA.
*$ACBA CALL $ACCA                           ; Call #R$ACCA.
 $ACBD LD IX,($7239)                        ; #REGix=*#R$7239.
*$ACC1 LD L,(IX+$01)                        ; #REGl=*#REGix+#N$01.
 $ACC4 LD H,(IX+$02)                        ; #REGh=*#REGix+#N$02.
 $ACC7 JP $97A7                             ; Jump to #R$97A7.
*$ACCA AND %01111100                        ; Keep only bits 2-6.
 $ACCC LD E,A                               ; #REGe=#REGa.
 $ACCD LD D,$00                             ; #REGd=#N$00.
 $ACCF LD IX,$AD03                          ; #REGix=#R$AD03.
 $ACD3 ADD IX,DE                            ; #REGix+=#REGde.
 $ACD5 LD E,(IX+$00)                        ; #REGe=*#REGix+#N$00.
 $ACD8 LD D,(IX+$01)                        ; #REGd=*#REGix+#N$01.
 $ACDB LD ($ACFA),DE                        ; Write #REGde to *#R$ACFA.
 $ACDF AND %01100000                        ; Keep only bits 5-6.
 $ACE1 LD E,$10                             ; #REGe=#N$10.
 $ACE3 JR Z,$ACF3                           ; Jump to #R$ACF3 if #REGhl is
                                            ; zero.
 $ACE5 CP $20                               ; Compare #REGa with #N$20.
 $ACE7 LD E,$20                             ; #REGe=#N$20.
 $ACE9 JR Z,$ACF3                           ; Jump to #R$ACF3 if #REGa is zero.
 $ACEB CP $40                               ; Compare #REGa with #N$40.
 $ACED LD E,$40                             ; #REGe=#N$40.
 $ACEF JR Z,$ACF3                           ; Jump to #R$ACF3 if #REGa is zero.
 $ACF1 LD E,$80                             ; #REGe=#N$80.
*$ACF3 LD HL,$EFFF                          ; #REGhl=#R$EFFF.
 $ACF6 LD A,E                               ; #REGa=#REGe.
 $ACF7 OR (HL)                              ; Set the bits from *#REGhl.
 $ACF8 LD (HL),A                            ; Write #REGa to *#REGhl.
 $ACF9 RET                                  ; Return.
 $ACFA DEFB $53,$AD,$01,$01,$02,$AD,$00,$00 ;
 $AD02 DEFB $11                             ;
 $AD03 DEFB $53,$AD,$00,$00,$53,$AD,$00,$00 ;
 $AD0B DEFB $53,$AD,$00,$00,$53,$AD,$00,$00 ;
 $AD13 DEFB $5B,$AD,$00,$00,$73,$AD,$00,$00 ;
 $AD1B DEFB $83,$AD,$00,$00,$9B,$AD,$00,$00 ;
 $AD23 DEFB $63,$AD,$02,$00,$7B,$AD,$40,$00 ;
 $AD2B DEFB $8B,$AD,$FE,$FF,$9B,$AD,$C0,$FF ;
 $AD33 DEFB $63,$AD,$02,$00,$7B,$AD,$40,$00 ;
 $AD3B DEFB $8B,$AD,$FE,$FF,$9B,$AD,$C0,$FF ;
 $AD43 DEFB $6B,$AD,$02,$00,$7B,$AD,$40,$00 ;
 $AD4B DEFB $93,$AD,$FE,$FF,$A3,$AD,$C0,$FF ;
 $AD53 DEFB $00,$00,$00,$00,$00,$18,$18,$00 ;
 $AD5B DEFB $00,$00,$03,$07,$0A,$04,$08,$00 ;
 $AD63 DEFB $00,$00,$7C,$0C,$70,$00,$00,$00 ;
 $AD6B DEFB $00,$00,$C0,$20,$B0,$70,$00,$00 ;
 $AD73 DEFB $00,$00,$00,$00,$00,$24,$18,$18 ;
 $AD7B DEFB $00,$24,$24,$24,$18,$18,$00,$00 ;
 $AD83 DEFB $00,$00,$C0,$E0,$50,$20,$10,$00 ;
 $AD8B DEFB $00,$00,$3E,$30,$0E,$00,$00,$00 ;
 $AD93 DEFB $00,$00,$03,$04,$0D,$0E,$00,$00 ;
 $AD9B DEFB $00,$00,$18,$18,$24,$24,$24,$00 ;
 $ADA3 DEFB $00,$00,$00,$00,$00,$18,$3C,$24 ;
 $ADAB DEFB $32,$AE,$CE,$79,$07,$32,$AE,$1E ;
 $ADB3 DEFB $7A,$07,$32,$AE,$66,$7A,$07,$32 ;
 $ADBB DEFB $AE,$96,$7A,$07,$32,$AE,$C8,$7A ;
 $ADC3 DEFB $07,$32,$AE,$A0,$7B,$07,$32,$AE ;
 $ADCB DEFB $EC,$7B,$07,$32,$AE,$0E,$7C,$07 ;
 $ADD3 DEFB $32,$AE,$58,$7C,$07,$3A,$AE,$4E ;
 $ADDB DEFB $79,$06,$42,$AE,$52,$79,$02,$3A ;
 $ADE3 DEFB $AE,$9E,$79,$06,$42,$AE,$A2,$79 ;
 $ADEB DEFB $03,$3A,$AE,$E6,$79,$05,$42,$AE ;
 $ADF3 DEFB $EA,$79,$03,$3A,$AE,$16,$7A,$07 ;
 $ADFB DEFB $42,$AE,$1A,$7A,$05,$3A,$AE,$48 ;
 $AE03 DEFB $7A,$03,$42,$AE,$4C,$7A,$05,$3A ;
 $AE0B DEFB $AE,$20,$7B,$04,$42,$AE,$24,$7B ;
 $AE13 DEFB $06,$3A,$AE,$6C,$7B,$03,$42,$AE ;
 $AE1B DEFB $70,$7B,$05,$3A,$AE,$8E,$7B,$06 ;
 $AE23 DEFB $42,$AE,$92,$7B,$04,$3A,$AE,$D8 ;
 $AE2B DEFB $7B,$06,$42,$AE,$DC,$7B,$02,$29 ;
 $AE33 DEFB $AF,$04,$03,$8E,$AE,$00,$00,$4A ;
 $AE3B DEFB $AE,$02,$02,$8A,$AE,$00,$00,$6A ;
 $AE43 DEFB $AE,$02,$02,$8A,$AE,$00,$00,$00 ;
 $AE4B DEFB $00,$00,$00,$00,$01,$07,$1F,$1F ;
 $AE53 DEFB $1F,$1F,$0F,$0B,$02,$00,$00,$00 ;
 $AE5B DEFB $01,$07,$1F,$7F,$FF,$FF,$FF,$FF ;
 $AE63 DEFB $FF,$FF,$FF,$FF,$FF,$DB,$01,$00 ;
 $AE6B DEFB $80,$E0,$F8,$FE,$FF,$FF,$FF,$FF ;
 $AE73 DEFB $FF,$FF,$FF,$FF,$FF,$DB,$80,$00 ;
 $AE7B DEFB $00,$00,$00,$00,$80,$E0,$F8,$F8 ;
 $AE83 DEFB $F8,$F8,$F0,$D0,$40,$00,$00,$05 ;
 $AE8B DEFB $04,$05,$04,$03,$22,$01,$03,$22 ;
 $AE93 DEFB $21,$03,$22,$21,$03,$22,$01,$48 ;
 $AE9B DEFB $61,$75,$70,$70,$65,$74,$20,$54 ;
 $AEA3 DEFB $72,$61,$73,$68,$6D,$6F,$6E,$A0 ;
 $AEAB DEFB $00,$00,$00,$00,$00,$00,$24,$00 ;
 $AEB3 DEFB $00,$09,$01,$20,$00,$00,$00,$00 ;
 $AEBB DEFB $01,$20,$00,$00,$00,$01,$20,$00 ;
 $AEC3 DEFB $01,$20,$12,$00,$00,$13,$20,$00 ;
 $AECB DEFB $09,$00,$12,$00,$00,$12,$00,$00 ;
 $AED3 DEFB $09,$00,$00,$00,$00,$00,$90,$00 ;
 $AEDB DEFB $00,$00,$02,$40,$01,$20,$90,$00 ;
 $AEE3 DEFB $00,$09,$02,$40,$01,$20,$00,$00 ;
 $AEEB DEFB $00,$09,$00,$00,$00,$00,$00,$00 ;
 $AEF3 DEFB $30,$11,$08,$11,$04,$11,$08,$0A ;
 $AEFB DEFB $34,$11,$0C,$09,$08,$11,$08,$0A ;
 $AF03 DEFB $38,$09,$24,$09,$0C,$0A,$78,$0A ;
 $AF0B DEFB $78,$0A,$78,$0A,$78,$0A,$78,$0A ;
 $AF13 DEFB $78,$0A,$78,$0A,$78,$0A,$78,$0A ;
 $AF1B DEFB $78,$0A,$78,$0A,$78,$0A,$78,$0A ;
 $AF23 DEFB $78,$0A,$78,$0A,$04,$00         ;

; Data block at AF29
b$AF29 DEFB $30,$78,$7C,$38,$70,$70,$F9,$FF
 $AF31 DEFB $F9,$FF,$BE,$40,$7D,$45,$45,$83
 $AF39 DEFB $82,$82,$00,$00,$00,$00,$00,$00
 $AF41 DEFB $01,$01,$01,$0F,$7F,$FF,$FF,$FF
 $AF49 DEFB $FE,$FF,$FF,$7E,$8F,$8F,$88,$CB
 $AF51 DEFB $0B,$07,$04,$0F,$0C,$04,$08,$08
 $AF59 DEFB $00,$00,$00,$70,$7E,$7F,$7F,$7F
 $AF61 DEFB $7F,$BF,$BF,$FE,$91,$F1,$11,$F3
 $AF69 DEFB $F0,$E0,$00,$F0,$30,$20,$10,$10
 $AF71 DEFB $0C,$1E,$3E,$1C,$0E,$0E,$9F,$BF
 $AF79 DEFB $9F,$FF,$7D,$02,$BE,$A2,$A2,$C1
 $AF81 DEFB $41,$41,$00,$00,$00,$00,$00,$00
 $AF89 DEFB $00,$00,$00,$00,$00,$03,$0F,$3F
 $AF91 DEFB $00,$03,$0F,$3F,$FF,$FF,$FF,$FF
 $AF99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AFA1 DEFB $00,$02,$00,$00,$04,$00,$10,$80

; Data block at AFA9
b$AFA9 DEFB $07,$47,$4F,$7A,$51,$46,$45,$43
 $AFB1 DEFB $42

; Data block at AFB2
b$AFB2 DEFB $71,$15,$51,$30,$31,$30,$21,$30
 $AFBA DEFB $21,$32,$61,$16,$61,$30,$31,$30
 $AFC2 DEFB $21,$30,$21,$33,$51,$17,$71,$30
 $AFCA DEFB $81,$30,$21,$34,$41,$18,$F1,$91
 $AFD2 DEFB $32,$31,$15,$41,$30,$F1,$31,$33
 $AFDA DEFB $21,$16,$51,$30,$51,$30,$A1,$34
 $AFE2 DEFB $11,$17,$61,$30,$51,$30,$11,$30
 $AFEA DEFB $61,$32,$C1,$30,$11,$30,$11,$30
 $AFF2 DEFB $61,$33,$51,$30,$41,$30,$51,$30
 $AFFA DEFB $61,$34,$51,$30,$41,$30,$E1,$32
 $B002 DEFB $51,$30,$F1,$61,$33,$F1,$21,$30
 $B00A DEFB $91,$34,$F1,$21,$30,$31,$30,$31
 $B012 DEFB $32,$81,$30,$61,$30,$31,$30,$31
 $B01A DEFB $33,$81,$30,$21,$30,$71,$30,$31
 $B022 DEFB $34,$81,$30,$21,$30,$D1,$32,$D1
 $B02A DEFB $30,$D1,$33,$F1,$E1,$34,$00

; Data block at B031
b$B031 DEFB $7E,$1F,$4E,$10,$13,$16,$19,$2E
 $B039 DEFB $11,$14,$17,$1A,$1E,$10,$13,$16
 $B041 DEFB $19,$2E,$1C,$1D,$7E,$1F,$5E,$11
 $B049 DEFB $14,$17,$1A,$2E,$12,$15,$18,$1B
 $B051 DEFB $1E,$11,$14,$17,$1A,$2E,$1C,$1D
 $B059 DEFB $6E,$1F,$6E,$12,$15,$18,$1B,$7E
 $B061 DEFB $12,$15,$18,$1B,$2E,$1C,$1D,$5E
 $B069 DEFB $1F,$9E,$FE,$1C,$1D,$4E,$1F,$AE
 $B071 DEFB $FE,$1C,$1D,$3E,$1F,$BE,$FE,$1C
 $B079 DEFB $1D,$2E,$1F,$CE,$FE,$1C,$1D,$FE
 $B081 DEFB $FE,$1C,$1D,$FE,$FE,$1C,$1D,$FE
 $B089 DEFB $FE,$1C,$1D,$FE,$FE,$1C,$1D,$FE
 $B091 DEFB $FE,$1C,$1D,$FE,$FE,$1C,$1D,$FE
 $B099 DEFB $FE,$1C,$1D,$FE,$FE,$1C,$1D,$FE
 $B0A1 DEFB $FE,$1C,$1D,$FE,$FE,$1C,$1D,$FE
 $B0A9 DEFB $FE,$1C,$1D,$1E,$00

; Paris
;
; Used by the routine at #R$AADA.
c$B0AE LD C,$48       ; #REGc=#N$48.
 $B0B0 LD IX,$6240    ; #REGix=#R$6240.
 $B0B4 LD DE,$0006    ; #REGde=#N($0006,$04,$04).
*$B0B7 LD B,$08       ; #REGb=#N$08.
 $B0B9 LD A,(HL)      ; #REGa=*#REGhl.
*$B0BA RLCA           ; RLCA.
 $B0BB JR NC,$B0C1    ; Jump to #R$B0C1 if  is higher.
 $B0BD SET 7,(IX+$00) ; Set bit 7 of *#REGix+#N$00.
*$B0C1 ADD IX,DE      ; #REGix+=#REGde.
 $B0C3 DJNZ $B0BA     ; Decrease counter by one and loop back to #R$B0BA until
                      ; counter is zero.
 $B0C5 INC HL         ; Increment #REGhl by one.
 $B0C6 DEC C          ; Decrease #REGc by one.
 $B0C7 JR NZ,$B0B7    ; Jump to #R$B0B7 if #REGc is not zero.
 $B0C9 RET            ; Return.

; Sub-Game Data: Jerusalem
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8EF9)(jerusalem) }
; UDGTABLE#
; #POPS
@label=Jerusalem_Data
b$B0CA DEFB $8F,$B2,$16,$B4,$A9,$B3,$08,$B4
 $B0D2 DEFB $0F,$F2,$B3
 $B0D5 DEFW $AA7D
@label=Jerusalem_SubGame
 $B0D7 DEFW $B113
@label=Jerusalem_SetUp
 $B0D9 DEFW $B112
 $B0DB DEFB $20,$7C,$F6,$B0,$01,$00,$15,$00
 $B0E3 DEFB $30,$00,$00,$50,$00,$37,$40,$72
 $B0EB DEFB $89,$A5,$00,$00,$00,$00,$00,$00
 $B0F3 DEFB $00,$01,$08,$20,$53,$68,$61,$6C
 $B0FB DEFB $6F,$6D,$2E,$2E,$2E,$53,$68,$61
 $B103 DEFB $6C,$6F,$6D,$2E,$2E,$2E,$54,$72
 $B10B DEFB $61,$73,$68,$6D,$6F,$6D,$AE

; Initialise: Jerusalem
@label=Jerusalem_Initialise
c$B112 RET           ;

; Handler: Jerusalem
@label=Handler_Jerusalem
c$B113 LD A,$00                             ; {Write #N$00 to *#R$99AA.
 $B115 LD ($99AA),A                         ; }
 $B118 LD A,($7207)                         ; {Return if *#R$7207 is zero.
 $B11B CP $00                               ;
 $B11D RET Z                                ; }
 $B11E CALL $9619                           ; Call #R$9619.
 $B121 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B124 LD HL,$77FE                          ; #REGhl=#N$77FE.
 $B127 AND %00001111                        ; Keep only bits 0-3.
 $B129 CP (HL)                              ; Compare #REGa with *#REGhl.
 $B12A LD E,$00                             ; #REGe=#N$00.
 $B12C JR NC,$B130                          ; Jump to #R$B130 if #REGa is
                                            ; higher.
 $B12E LD E,$01                             ; #REGe=#N$01.
*$B130 LD HL,($99E3)                        ; #REGhl=*#R$99E3.
 $B133 LD BC,$0038                          ; {#REGhl+=#N($0038,$04,$04).
 $B136 ADD HL,BC                            ; }
 $B137 LD A,$77                             ; {Jump to #R$B13F if #REGh is not
 $B139 CP H                                 ; equal to #N$77.
 $B13A JR NZ,$B13F                          ; }
 $B13C LD HL,$7240                          ; #REGhl=#R$7240.
*$B13F LD ($99E3),HL                        ; Write #REGhl to *#R$99E3.
 $B142 BIT 7,(HL)                           ; Test bit 7 of *#REGhl.
 $B144 JP NZ,$B1D3                          ; Jump to #R$B1D3 if #REGa is not
                                            ; zero.
 $B147 LD A,($77FF)                         ; #REGa=*#N$77FF.
 $B14A CP $07                               ; Compare #REGa with #N$07.
 $B14C JR Z,$B130                           ; Jump to #R$B130 if #REGa is zero.
 $B14E BIT 0,E                              ; Test bit 0 of #REGe.
 $B150 JR Z,$B172                           ; Jump to #R$B172 if #REGa is zero.
 $B152 BIT 1,(HL)                           ; Test bit 1 of *#REGhl.
 $B154 JR Z,$B130                           ; Jump to #R$B130 if #REGa is zero.
 $B156 LD (HL),$81                          ; Write #N$81 to *#REGhl.
 $B158 CALL $994D                           ; Call #R$994D.
 $B15B LD HL,($99E3)                        ; #REGhl=*#R$99E3.
 $B15E CALL $9439                           ; Call #R$9439.
 $B161 LD HL,$77FF                          ; #REGhl=#N$77FF.
 $B164 INC (HL)                             ; Increment *#REGhl by one.
 $B165 LD HL,$77FE                          ; #REGhl=#N$77FE.
 $B168 DEC (HL)                             ; Decrease *#REGhl by one.
 $B169 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $B16D LD E,$08                             ; #REGe=#N$08.
 $B16F JP $B27F                             ; Jump to #R$B27F.
*$B172 BIT 1,(HL)                           ; Test bit 1 of *#REGhl.
 $B174 JR NZ,$B130                          ; Jump to #R$B130 if *#REGhl is not
                                            ; zero.
 $B176 LD (HL),$84                          ; Write #N$84 to *#REGhl.
 $B178 CALL $9439                           ; Call #R$9439.
 $B17B LD HL,$77FF                          ; #REGhl=#N$77FF.
 $B17E INC (HL)                             ; Increment *#REGhl by one.
*$B17F CALL $9619                           ; Call #R$9619.
 $B182 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B185 BIT 0,A                              ; Test bit 0 of #REGa.
 $B187 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $B18B JR Z,$B1A2                           ; Jump to #R$B1A2 if *#REGhl is
                                            ; zero.
 $B18D LD E,$18                             ; #REGe=#N$18.
 $B18F LD HL,$7DC0                          ; #REGhl=#N$7DC0.
 $B192 AND %00111110                        ; Keep only bits 1-5.
 $B194 JR NZ,$B19A                          ; Jump to #R$B19A if *#REGhl is not
                                            ; zero.
 $B196 ADD A,$20                            ; #REGa+=#N$20.
 $B198 JR $B1B1                             ; Jump to #R$B1B1.
*$B19A CP $3E                               ; Compare #REGa with #N$3E.
 $B19C JR NZ,$B1B1                          ; Jump to #R$B1B1 if #REGa is not
                                            ; zero.
 $B19E SUB $20                              ; #REGa-=#N$20.
 $B1A0 JR $B1B1                             ; Jump to #R$B1B1.
*$B1A2 BIT 5,A                              ; Test bit 5 of #REGa.
 $B1A4 LD HL,$7C3E                          ; #REGhl=#R$7C3E.
 $B1A7 LD E,$10                             ; #REGe=#N$10.
 $B1A9 JR NZ,$B1AF                          ; Jump to #R$B1AF if #REGa is not
                                            ; zero.
 $B1AB LD L,$00                             ; #REGl=#N$00.
 $B1AD LD E,$00                             ; #REGe=#N$00.
*$B1AF AND %11000000                        ; Keep only bits 6-7.
*$B1B1 LD C,A                               ; #REGc=#REGa.
 $B1B2 LD B,$00                             ; #REGb=#N$00.
 $B1B4 ADD HL,BC                            ; #REGhl+=#REGbc.
 $B1B5 LD (IX+$04),L                        ; Write #REGl to *#REGix+#N$04.
 $B1B8 LD (IX+$05),H                        ; Write #REGh to *#REGix+#N$05.
 $B1BB LD B,(HL)                            ; #REGb=*#REGhl.
 $B1BC INC HL                               ; Increment #REGhl by one.
 $B1BD LD C,(HL)                            ; #REGc=*#REGhl.
 $B1BE LD A,(BC)                            ; #REGa=*#REGbc.
 $B1BF AND %01100010                        ; Keep only bits 1, 5-6.
 $B1C1 JR NZ,$B17F                          ; Jump to #R$B17F if #REGhl is not
                                            ; zero.
 $B1C3 LD (IX+$06),E                        ; Write #REGe to *#REGix+#N$06.
 $B1C6 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B1C9 AND %00001111                        ; Keep only bits 0-3.
 $B1CB ADD A,$08                            ; #REGa+=#N$08.
 $B1CD LD (IX+$07),A                        ; Write #REGa to *#REGix+#N$07.
 $B1D0 JP $9929                             ; Jump to #R$9929.
*$B1D3 CALL $9439                           ; Call #R$9439.
 $B1D6 LD IX,($99E3)                        ; #REGix=*#R$99E3.
 $B1DA BIT 5,(IX+$03)                       ; Test bit 5 of *#REGix+#N$03.
 $B1DE JR Z,$B1E7                           ; Jump to #R$B1E7 if #REGhl is
                                            ; zero.
 $B1E0 RES 5,(IX+$06)                       ; Reset bit 5 of *#REGix+#N$06.
 $B1E4 JP $B28C                             ; Jump to #R$B28C.
*$B1E7 LD L,(IX+$01)                        ; #REGl=*#REGix+#N$01.
 $B1EA LD H,(IX+$02)                        ; #REGh=*#REGix+#N$02.
 $B1ED BIT 2,(IX+$00)                       ; Test bit 2 of *#REGix+#N$00.
 $B1F1 RES 2,(IX+$00)                       ; Reset bit 2 of *#REGix+#N$00.
 $B1F5 JR NZ,$B206                          ; Jump to #R$B206 if #REGhl is not
                                            ; zero.
 $B1F7 CALL $9604                           ; Call #R$9604.
 $B1FA JR NZ,$B206                          ; Jump to #R$B206 if #REGhl is not
                                            ; zero.
 $B1FC LD (IX+$00),$00                      ; Write #N$00 to *#REGix+#N$00.
 $B200 CALL $9942                           ; Call #R$9942.
 $B203 JP $B25B                             ; Jump to #R$B25B.
*$B206 DEC (IX+$07)                         ; Decrease *#REGix+#N$07 by one.
 $B209 JP Z,$B262                           ; Jump to #R$B262 if #REGhl is
                                            ; zero.
 $B20C CALL $9375                           ; Call #R$9375.
 $B20F LD E,A                               ; #REGe=#REGa.
 $B210 AND %01100010                        ; Keep only bits 1, 5-6.
 $B212 JR NZ,$B23D                          ; Jump to #R$B23D if #REGhl is not
                                            ; zero.
 $B214 LD (IX+$04),L                        ; Write #REGl to *#REGix+#N$04.
 $B217 LD (IX+$05),H                        ; Write #REGh to *#REGix+#N$05.
 $B21A SET 5,(IX+$06)                       ; Set bit 5 of *#REGix+#N$06.
 $B21E BIT 3,(IX+$00)                       ; Test bit 3 of *#REGix+#N$00.
 $B222 JR Z,$B28C                           ; Jump to #R$B28C if #REGhl is
                                            ; zero.
 $B224 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B227 AND %00000111                        ; Keep only bits 0-2.
 $B229 CP $06                               ; Compare #REGa with #N$06.
 $B22B JR NZ,$B28C                          ; Jump to #R$B28C if #REGa is not
                                            ; zero.
 $B22D LD A,$03                             ; #REGa=#N$03.
 $B22F AND E                                ; Merge the bits from #REGe.
 $B230 CP $01                               ; Compare #REGa with #N$01.
 $B232 JR Z,$B28C                           ; Jump to #R$B28C if #REGa is zero.
 $B234 RES 3,(IX+$00)                       ; Reset bit 3 of *#REGix+#N$00.
 $B238 CALL $994D                           ; Call #R$994D.
 $B23B JR $B28C                             ; Jump to #R$B28C.
*$B23D AND %01000000                        ; Keep only bits 6.
 $B23F JR Z,$B246                           ; Jump to #R$B246 if #REGa is zero.
 $B241 LD HL,$7200                          ; #REGhl=#R$7200.
 $B244 SET 4,(HL)                           ; Set bit 4 of *#REGhl.
*$B246 BIT 0,(IX+$00)                       ; Test bit 0 of *#REGix+#N$00.
 $B24A JR NZ,$B262                          ; Jump to #R$B262 if #REGa is not
                                            ; zero.
 $B24C LD A,$7A                             ; {Jump to #R$B262 if *#REGix+#N$05
 $B24E CP (IX+$05)                          ; is not equal to #N$7A.
 $B251 JR NZ,$B262                          ; }
 $B253 LD (IX+$00),$02                      ; Write #N$02 to *#REGix+#N$00.
 $B257 LD HL,$77FE                          ; #REGhl=#N$77FE.
 $B25A INC (HL)                             ; Increment *#REGhl by one.
*$B25B LD HL,$77FF                          ; #REGhl=#N$77FF.
 $B25E DEC (HL)                             ; Decrease *#REGhl by one.
 $B25F JP $B113                             ; Jump to #R$B113.
*$B262 BIT 3,(IX+$06)                       ; Test bit 3 of *#REGix+#N$06.
 $B266 JR NZ,$B274                          ; Jump to #R$B274 if *#REGhl is not
                                            ; zero.
 $B268 LD E,$08                             ; #REGe=#N$08.
 $B26A BIT 0,(IX+$00)                       ; Test bit 0 of *#REGix+#N$00.
 $B26E JR NZ,$B27F                          ; Jump to #R$B27F if *#REGhl is not
                                            ; zero.
 $B270 LD E,$18                             ; #REGe=#N$18.
 $B272 JR $B27F                             ; Jump to #R$B27F.
*$B274 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B277 BIT 4,A                              ; Test bit 4 of #REGa.
 $B279 LD E,$00                             ; #REGe=#N$00.
 $B27B JR NZ,$B27F                          ; Jump to #R$B27F if *#REGhl is not
                                            ; zero.
 $B27D LD E,$10                             ; {Write #N$10 to *#REGix+#N$06.
*$B27F LD (IX+$06),E                        ; }
 $B282 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B285 AND %00001111                        ; Keep only bits 0-3.
 $B287 ADD A,$08                            ; #REGa+=#N$08.
 $B289 LD (IX+$07),A                        ; Write #REGa to *#REGix+#N$07.
*$B28C JP $9926                             ; Jump to #R$9926.
 $B28F DEFB $1F,$17,$16,$17,$16,$11,$16,$17 ;
 $B297 DEFB $16,$11,$16,$11,$16,$1F,$17,$16 ;
 $B29F DEFB $1E,$11,$16,$1F,$17,$16,$11,$16 ;
 $B2A7 DEFB $11,$16,$11,$16,$1F,$17,$16,$2F ;
 $B2AF DEFB $15,$14,$15,$13,$12,$14,$15,$13 ;
 $B2B7 DEFB $12,$13,$12,$1C,$14,$15,$14,$13 ;
 $B2BF DEFB $12,$1C,$14,$15,$13,$12,$13,$12 ;
 $B2C7 DEFB $13,$12,$1C,$14,$15,$1C,$3F,$11 ;
 $B2CF DEFB $16,$11,$16,$11,$16,$11,$16,$11 ;
 $B2D7 DEFB $16,$2E,$11,$16,$11,$16,$11,$16 ;
 $B2DF DEFB $11,$16,$17,$16,$10,$17,$16,$1E ;
 $B2E7 DEFB $11,$16,$17,$2F,$13,$12,$13,$12 ;
 $B2EF DEFB $13,$12,$13,$12,$13,$12,$24,$13 ;
 $B2F7 DEFB $12,$13,$12,$13,$12,$13,$12,$14 ;
 $B2FF DEFB $15,$1C,$14,$15,$14,$13,$12,$14 ;
 $B307 DEFB $15,$2F,$11,$16,$17,$16,$1E,$17 ;
 $B30F DEFB $16,$1E,$11,$16,$11,$16,$11,$16 ;
 $B317 DEFB $1E,$17,$16,$17,$16,$10,$17,$16 ;
 $B31F DEFB $1E,$17,$16,$17,$16,$1E,$11,$16 ;
 $B327 DEFB $2F,$12,$14,$15,$24,$15,$14,$13 ;
 $B32F DEFB $12,$13,$12,$13,$12,$24,$15,$14 ;
 $B337 DEFB $15,$1C,$14,$15,$24,$15,$14,$15 ;
 $B33F DEFB $14,$13,$12,$4F,$11,$1F,$11,$1F ;
 $B347 DEFB $11,$1F,$11,$1F,$11,$1F,$11,$1F ;
 $B34F DEFB $11,$1F,$11,$1F,$21,$1F,$11,$1F ;
 $B357 DEFB $21,$1F,$11,$1F,$11,$1F,$11,$2F ;
 $B35F DEFB $13,$12,$13,$12,$13,$12,$13,$12 ;
 $B367 DEFB $13,$12,$13,$12,$13,$12,$13,$12 ;
 $B36F DEFB $13,$22,$13,$12,$13,$22,$13,$12 ;
 $B377 DEFB $13,$12,$13,$12,$FF,$FF,$FF,$FF ;
 $B37F DEFB $9F,$1A,$1F,$1B,$FF,$3F,$1A,$1F ;
 $B387 DEFB $1B,$8F,$3D,$FF,$3F,$3D,$8F,$19 ;
 $B38F DEFB $1D,$18,$FF,$3F,$19,$1D,$18,$8F ;
 $B397 DEFB $1A,$1F,$1B,$FF,$3F,$1A,$1F,$1B ;
 $B39F DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $B3A7 DEFB $CF,$00,$98,$F0,$70,$A8,$30,$12 ;
 $B3AF DEFB $50,$12,$80,$12,$20,$12,$A8,$F0 ;
 $B3B7 DEFB $12,$80,$88,$E0,$12,$70,$A8,$B0 ;
 $B3BF DEFB $12,$C0,$88,$A0,$12,$B0,$A8,$F0 ;
 $B3C7 DEFB $70,$A8,$F0,$70,$AC,$F4,$74,$AC ;
 $B3CF DEFB $F4,$74,$5C,$3D,$2C,$F4,$14,$35 ;
 $B3D7 DEFB $34,$5C,$3B,$2C,$F4,$14,$33,$34 ;
 $B3DF DEFB $AC,$F4,$74,$AC,$F4,$74,$AC,$F4 ;
 $B3E7 DEFB $74,$AC,$F4,$74,$AC,$F4,$74,$AC ;
 $B3EF DEFB $F4,$84,$00,$FD,$FD,$FD,$FD,$11 ;
 $B3F7 DEFB $FC,$14,$0E,$48,$0E,$20,$0E,$48 ;
 $B3FF DEFB $0E,$20,$0F,$48,$0F,$FC,$FC,$98 ;
 $B407 DEFB $00,$70,$77,$74,$58,$78,$5F,$00 ;
 $B40F DEFB $00,$30,$37,$34,$18,$38,$1F,$18 ;
 $B417 DEFB $08,$0C,$18,$18,$24,$08,$00,$A0 ;
 $B41F DEFB $90,$20,$10,$20,$00,$10,$00,$10 ;
 $B427 DEFB $00,$10,$20,$10,$30,$B0,$60,$00 ;
 $B42F DEFB $00,$00,$00,$00,$00,$00,$05,$01 ;
 $B437 DEFB $00,$02,$01,$06,$05,$1B,$D4,$00 ;
 $B43F DEFB $80,$80,$80,$00,$00,$80,$D0,$B6 ;
 $B447 DEFB $00,$00,$00,$00,$00,$00,$00,$3D ;
 $B44F DEFB $40,$80,$80,$00,$80,$80,$80,$01 ;
 $B457 DEFB $01,$01,$01,$01,$01,$01,$FF,$80 ;
 $B45F DEFB $80,$80,$80,$80,$80,$80,$FF,$80 ;
 $B467 DEFB $80,$80,$00,$00,$00,$00,$00,$01 ;
 $B46F DEFB $01,$01,$00,$00,$00,$00,$00,$00 ;
 $B477 DEFB $00,$00,$00,$49,$35,$AE,$FF,$00 ;
 $B47F DEFB $00,$00,$00,$00,$00,$00,$FF,$77 ;
 $B487 DEFB $40,$80,$80,$80,$00,$00,$80,$00 ;
 $B48F DEFB $00,$00,$00,$00,$00,$00,$00     ;

; Sub-Game Data: Madrid
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8E9A)(madrid) }
; UDGTABLE#
; #POPS
@label=Madrid_Data
b$B496 DEFW $B512                           ; #R$B512
 $B498 DEFW $B4C2                           ; #R$B4C2
 $B49A DEFW $B575                           ; #R$B575
 $B49C DEFW $B570                           ; #R$B570
 $B49E DEFB $07
 $B49F DEFW $B559                           ; #R$B559
 $B4A1 DEFW $B80F
@label=Madrid_SubGame
 $B4A3 DEFW $B69D                           ; Location subgame routine.
@label=Madrid_SetUp
 $B4A5 DEFW $B5A7                           ; Initialisation routine.
 $B4A7 DEFB $20,$7C,$9C,$B6,$01,$00,$15,$00
 $B4AF DEFB $20,$00,$00,$50,$00,$37,$58,$72
 $B4B7 DEFB $3A,$B8,$40,$72,$18,$B8,$C0,$7A
 $B4BF DEFB $1F,$01,$08

; Data block at B4C2
b$B4C2 DEFB $E7,$C3,$81,$81,$C3,$E7,$81,$00
 $B4CA DEFB $C3,$00,$81,$81,$C3,$E7,$81,$00
 $B4D2 DEFB $24,$00,$00,$00,$00,$24,$00,$81
 $B4DA DEFB $24,$00,$00,$00,$00,$24,$00,$81
 $B4E2 DEFB $00,$00,$E7,$04,$04,$04,$04,$04
 $B4EA DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $B4F2 DEFB $04,$04,$04,$04,$04,$00,$00,$00
 $B4FA DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00
 $B502 DEFB $FF,$00,$00,$00,$FF,$00,$00,$00
 $B50A DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at B512
b$B512 DEFB $19,$20,$11,$60,$11,$10,$11,$60
 $B51A DEFB $21,$40,$11,$10,$11,$30,$29,$11
 $B522 DEFB $10,$17,$40,$11,$17,$20,$17,$20
 $B52A DEFB $11,$17,$80,$11,$17,$20,$21,$29
 $B532 DEFB $11,$30,$17,$40,$11,$40,$11,$20
 $B53A DEFB $11,$60,$11,$20,$11,$17,$10,$29
 $B542 DEFB $F4,$F4,$29,$F5,$F5,$29,$86,$38
 $B54A DEFB $F6,$46,$A9,$38,$F9,$E9,$37,$09
 $B552 DEFB $F9,$F9,$F9,$F9,$F9,$99,$00

; Data block at B559
b$B559 DEFB $FC,$FC,$88,$25,$0F,$51,$24,$0E
 $B561 DEFB $74,$0F,$FC,$FC,$FC,$FC,$64,$06
 $B569 DEFB $7C,$0A,$04,$0A,$60,$0A,$00

; Data block at B570
b$B570 DEFB $28,$68,$30,$78,$00

; Data block at B575
b$B575 DEFB $F3,$F3,$F3,$F3,$F3,$F3,$63,$F2
 $B57D DEFB $F2,$F2,$F2,$F2,$F2,$62,$90,$32
 $B585 DEFB $F0,$E0,$30,$F0,$50,$91,$30,$F1
 $B58D DEFB $F1,$F1,$F1,$F1,$F1,$F1,$F1,$F1
 $B595 DEFB $F1,$F1,$F1,$F1,$F1,$F1,$F1,$51
 $B59D DEFB $14,$F1,$F1,$34,$11,$24,$F1,$91
 $B5A5 DEFB $24,$00

; Initialise: Madrid
@label=Madrid_Initialise
c$B5A7 LD IX,$6240                          ; #REGix=#R$6240.
 $B5AB LD B,$60                             ; #REGb=#N$60.
*$B5AD LD DE,$B4FA                          ; #REGde=#R$B4FA.
 $B5B0 LD L,(IX+$02)                        ; #REGl=*#REGix+#N$02.
 $B5B3 LD H,(IX+$03)                        ; #REGh=*#REGix+#N$03.
 $B5B6 AND A                                ; Set flags.
 $B5B7 SBC HL,DE                            ; #REGhl-=#REGde (with carry).
 $B5B9 JR Z,$B607                           ; Jump to #R$B607 if the result is
                                            ; zero.
*$B5BB PUSH IX                              ; Stash #REGix on the stack.
 $B5BD CALL $9619                           ; Call #R$9619.
 $B5C0 LD A,($99A5)                         ; #REGa=*#R$99A5.
 $B5C3 POP IX                               ; Restore #REGix from the stack.
 $B5C5 AND (IX+$04)                         ; Merge the bits of #REGa with
                                            ; *#REGix+#N$04.
 $B5C8 JR Z,$B5BB                           ; Jump to #R$B5BB if the result is
                                            ; zero.
 $B5CA CP $40                               ; {Jump to #R$B5BB if #REGa is
 $B5CC JR Z,$B5BB                           ; equal to #N$40.}
*$B5CE LD (IX+$04),A                        ; Write #REGa to *#REGix+#N$04.
 $B5D1 LD DE,$0006                          ; {#REGix+=#N($0006,$04,$04).
 $B5D4 ADD IX,DE                            ; }
 $B5D6 DJNZ $B5AD                           ; Decrease counter by one and loop
                                            ; back to #R$B5AD until counter is
                                            ; zero.
 $B5D8 LD HL,$7BA4                          ; {Write #N$7BA4 to *#N$725C.
 $B5DB LD ($725C),HL                        ; }
 $B5DE LD HL,$7260                          ; {Write #N$7260 to *#R$99B8.
 $B5E1 LD ($99B8),HL                        ; }
 $B5E4 LD A,$01                             ; #REGa=#N$01.
 $B5E6 LD ($7258),A                         ; Write #REGa to *#R$7258.
 $B5E9 DEC A                                ; Decrease #REGa by one.
 $B5EA LD ($99AA),A                         ; Write #REGa to *#R$99AA.
 $B5ED CALL $9929                           ; Call #R$9929.
 $B5F0 LD IX,$B623                          ; #REGix=#R$B623.
 $B5F4 LD DE,$0020                          ; {Write #N($0020,$04,$04) to
 $B5F7 LD ($926E),DE                        ; *#R$926E.}
 $B5FB LD DE,$7400                          ; {Write #N$7400 to *#R$99B8.
 $B5FE LD ($99B8),DE                        ; }
 $B602 LD B,$09                             ; #REGb=#N$09.
 $B604 JP $9226                             ; Jump to #R$9226.
*$B607 PUSH IX                              ; Stash #REGix on the stack.
 $B609 LD DE,$FF44                          ; #REGde=#R$FF44.
 $B60C POP HL                               ; Restore #REGhl from the stack.
 $B60D ADD HL,DE                            ; #REGhl+=#REGde.
 $B60E LD A,(HL)                            ; #REGa=*#REGhl.
 $B60F AND %00000111                        ; Keep only bits 0-2.
 $B611 RLCA                                 ; {RLCA.
 $B612 RLCA                                 ;
 $B613 RLCA                                 ; }
 $B614 LD C,A                               ; #REGc=#REGa.
 $B615 LD A,(HL)                            ; #REGa=*#REGhl.
 $B616 AND %00111000                        ; Keep only bits 3-5.
 $B618 RRCA                                 ; {RRCA.
 $B619 RRCA                                 ;
 $B61A RRCA                                 ; }
 $B61B LD E,A                               ; #REGe=#REGa.
 $B61C LD A,(HL)                            ; #REGa=*#REGhl.
 $B61D AND %01000000                        ; Keep only bits 6.
 $B61F OR C                                 ; Set the bits from #REGc.
 $B620 OR E                                 ; Set the bits from #REGe.
 $B621 JR $B5CE                             ; Jump to #R$B5CE.
 $B623 DEFB $50,$B6,$40,$7C,$00,$50,$B6,$88 ;
 $B62B DEFB $7C,$00,$50,$B6,$BC,$7C,$00,$60 ;
 $B633 DEFB $B6,$C4,$7C,$00,$58,$B6,$06,$7D ;
 $B63B DEFB $00,$60,$B6,$0C,$7D,$00,$50,$B6 ;
 $B643 DEFB $0E,$7D,$00,$50,$B6,$36,$7D,$00 ;
 $B64B DEFB $58,$B6,$3A,$7D,$00,$68,$B6,$02 ;
 $B653 DEFB $02,$98,$B6,$00,$00,$88,$B6,$01 ;
 $B65B DEFB $01,$98,$B6,$00,$00,$90,$B6,$01 ;
 $B663 DEFB $01,$98,$B6,$00,$00,$07,$1F,$3F ;
 $B66B DEFB $3F,$7F,$7F,$FF,$FF,$FF,$7F,$3F ;
 $B673 DEFB $3F,$1F,$0F,$07,$07,$E0,$F8,$FC ;
 $B67B DEFB $FC,$FE,$FE,$FF,$FF,$FF,$FE,$FC ;
 $B683 DEFB $FC,$F8,$F0,$E0,$E0,$00,$03,$07 ;
 $B68B DEFB $0F,$0F,$1F,$1F,$DF,$00,$C0,$E0 ;
 $B693 DEFB $F0,$F0,$F8,$F8,$FE,$07,$07,$07 ;
 $B69B DEFB $07,$A0                         ;

; Handler: Madrid
@label=Handler_Madrid
c$B69D CALL $B7A9    ; Call #R$B7A9.
 $B6A0 CALL $B6A7    ; Call #R$B6A7.
 $B6A3 CALL $B6BC    ; Call #R$B6BC.
 $B6A6 RET           ; Return.

; Routine at B6A7
;
; Used by the routine at #R$B69D.
c$B6A7 LD A,$02      ;
 $B6A9 LD ($99AA),A  ;
 $B6AC CALL $980E    ;
 $B6AF CALL $98AB    ;
 $B6B2 LD B,$78      ;
 $B6B4 LD A,C        ;
 $B6B5 OR $C0        ;
 $B6B7 LD C,A        ;
 $B6B8 CALL $98F2    ;
 $B6BB RET           ;

; Handler: Bull
;
; Used by the routine at #R$B69D.
;
; .
;
; See #POKE#bull(The Bull Doesn't Kill).
@label=Handler_Bull
c$B6BC LD A,($EFFA)    ; {Jump to #R$B6C8 if the player has not been hit by the
 $B6BF CP $08          ; bull.
 $B6C1 JR NZ,$B6C8     ; }
 $B6C3 LD SP,($99AE)   ; #REGsp=*#R$99AE.
 $B6C7 RET             ; Return.
; The player is still alive!
@label=Handler_Bull_Play
*$B6C8 LD A,$00        ; {Write #N$00 to *#R$99AA.
 $B6CA LD ($99AA),A    ; }
 $B6CD LD IX,$7258     ; #REGix=#R$7258.
 $B6D1 LD A,($7207)    ; {Jump to #R$B6DB if *#R$7207 is equal to #N$01.
 $B6D4 CP $01          ;
 $B6D6 JR Z,$B6DB      ; }
 $B6D8 CP $05          ; {Return if *#R$7207 is not equal to #N$05.
 $B6DA RET NZ          ; }
*$B6DB DEC (IX+$00)    ; Decrease *#REGix+#N$00 by one.
 $B6DE JP NZ,$B77E     ; Jump to #R$B77E if #REGa is not zero.
 $B6E1 LD (IX+$00),$01 ; Write #N$01 to *#REGix+#N$00.
 $B6E5 LD HL,$7258     ; #REGhl=#R$7258.
 $B6E8 CALL $9439      ; Call #R$9439.
 $B6EB BIT 5,(IX+$06)  ; Test bit 5 of *#REGix+#N$06.
 $B6EF JR NZ,$B721     ; Jump to #R$B721 if #REGa is not zero.
 $B6F1 DEC (IX+$07)    ; Decrease *#REGix+#N$07 by one.
 $B6F4 JR Z,$B727      ; Jump to #R$B727 if #REGa is zero.
 $B6F6 LD L,(IX+$01)   ; #REGl=*#REGix+#N$01.
 $B6F9 LD H,(IX+$02)   ; #REGh=*#REGix+#N$02.
 $B6FC CALL $9375      ; Call #R$9375.
 $B6FF AND %01000001   ; Keep only bits 0 and 6.
 $B701 JR Z,$B70F      ; Jump to #R$B70F if #REGa is zero.
 $B703 CP $01          ; {Jump to #R$B727 if #REGa is equal to #N$01.
 $B705 JR Z,$B727      ; }
; See #POKE#bull(The Bull Doesn't Kill).
 $B707 LD A,$08        ; {Write #EVAL($08,$02,$08) ("Hit By The Bull") to
 $B709 LD ($EFFA),A    ; *#R$EFFA.}
 $B70C JP $9926        ; Jump to #R$9926.
*$B70F LD A,$7A        ; {Jump to #R$B727 if #N$7A is equal to #REGh.
 $B711 CP H            ;
 $B712 JR Z,$B727      ; }
 $B714 LD (IX+$04),L   ; Write #REGl to *#REGix+#N$04.
 $B717 LD (IX+$05),H   ; Write #REGh to *#REGix+#N$05.
 $B71A SET 5,(IX+$06)  ; Set bit 5 of *#REGix+#N$06.
*$B71E JP $9926        ; Jump to #R$9926.
*$B721 RES 5,(IX+$06)  ; Reset bit 5 of *#REGix+#N$06.
 $B725 JR $B71E        ; Jump to #R$B71E.
*$B727 CALL $97D7      ; Call #R$97D7.
 $B72A LD A,H          ; {Jump to #R$B731 if #REGh is higher than #REGl.
 $B72B CP L            ;
 $B72C JR NC,$B731     ; }
 $B72E LD A,C          ; #REGa=#REGc.
 $B72F LD C,B          ; #REGc=#REGb.
 $B730 LD B,A          ; #REGb=#REGa.
*$B731 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $B734 AND %00011000   ; Keep only bits 3-4.
 $B736 XOR %00010000   ; Flip bit 4.
 $B738 CP B            ; Compare #REGa with #REGb.
 $B739 JR NZ,$B73C     ; Jump to #R$B73C if #REGa is not zero.
 $B73B LD B,C          ; #REGb=#REGc.
*$B73C LD (IX+$06),B   ; Write #REGb to *#REGix+#N$06.
 $B73F CALL $9619      ; Call #R$9619.
 $B742 LD A,($99A5)    ; #REGa=*#R$99A5.
 $B745 AND %00000011   ; Keep only bits 0-1.
 $B747 JR Z,$B755      ; Jump to #R$B755 if #REGa is zero.
 $B749 ADD A,$05       ; #REGa+=#N$05.
 $B74B LD IX,$7258     ; #REGix=#R$7258.
 $B74F LD (IX+$07),A   ; Write #REGa to *#REGix+#N$07.
 $B752 JP $B71E        ; Jump to #R$B71E.
*$B755 CALL $9619      ; Call #R$9619.
 $B758 LD A,($99A5)    ; #REGa=*#R$99A5.
 $B75B AND %00011110   ; Keep only bits 1-4.
 $B75D ADD A,$0A       ; #REGa+=#N$0A.
 $B75F LD ($7258),A    ; Write #REGa to *#R$7258.
 $B762 LD IX,$7258     ; #REGix=#R$7258.
 $B766 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $B769 AND %00011000   ; Keep only bits 3-4.
 $B76B RRCA            ; RRCA.
 $B76C LD HL,$BA4E     ; #REGhl=#R$BA4E.
 $B76F LD E,A          ; #REGe=#REGa.
 $B770 LD D,$00        ; #REGd=#N$00.
 $B772 ADD HL,DE       ; #REGhl+=#REGde.
 $B773 LD DE,$72B0     ; #REGde=#R$72B0.
 $B776 LD BC,$0004     ; #REGbc=#N($0004,$04,$04).
 $B779 LDIR            ; LDIR.
 $B77B JP $B71E        ; Jump to #R$B71E.
*$B77E LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $B781 AND %00000011   ; Keep only bits 0-1.
 $B783 RET NZ          ; Return if {} is not zero.
 $B784 LD IX,($72B0)   ; #REGix=*#R$72B0.
 $B788 LD E,(IX+$00)   ; #REGe=*#REGix+#N$00.
 $B78B LD D,(IX+$01)   ; #REGd=*#REGix+#N$01.
 $B78E LD HL,($72B2)   ; #REGhl=*#R$72B2.
 $B791 EX DE,HL        ; Exchange the #REGde and #REGhl registers.
 $B792 LD ($72B2),HL   ; Write #REGhl to *#R$72B2.
 $B795 LD (IX+$00),E   ; Write #REGe to *#REGix+#N$00.
 $B798 LD (IX+$01),D   ; Write #REGd to *#REGix+#N$01.
 $B79B LD IX,$7258     ; #REGix=#R$7258.
 $B79F LD L,(IX+$04)   ; #REGl=*#REGix+#N$04.
 $B7A2 LD H,(IX+$05)   ; #REGh=*#REGix+#N$05.
 $B7A5 CALL $9914      ; Call #R$9914.
 $B7A8 RET             ; Return.

; Routine at B7A9
;
; Used by the routine at #R$B69D.
c$B7A9 LD IX,$7258   ; #REGix=#R$7258.
 $B7AD CALL $97D7    ; Call #R$97D7.
 $B7B0 LD A,H        ; #REGa=#REGh.
 $B7B1 OR L          ; Set the bits from #REGl.
 $B7B2 LD HL,$7200   ; #REGhl=#R$7200.
 $B7B5 RES 7,(HL)    ; Reset bit 7 of *#REGhl.
 $B7B7 CP $08        ; Compare #REGa with #N$08.
 $B7B9 JR NC,$B7C2   ; Jump to #R$B7C2 if #REGa is higher.
 $B7BB SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $B7BD LD HL,$EFFF   ; #REGhl=#R$EFFF.
 $B7C0 SET 2,(HL)    ; Set bit 2 of *#REGhl.
*$B7C2 CALL $9619    ; Call #R$9619.
 $B7C5 LD A,($99A5)  ; #REGa=*#R$99A5.
 $B7C8 AND %11111110 ; Keep only bits 1-7.
 $B7CA CP $BF        ; Compare #REGa with #N$BF.
 $B7CC JR NC,$B7C2   ; Jump to #R$B7C2 if #REGa is higher.
 $B7CE LD L,A        ; #REGl=#REGa.
 $B7CF LD H,$00      ; #REGh=#N$00.
 $B7D1 LD E,L        ; #REGe=#REGl.
 $B7D2 LD D,$00      ; #REGd=#N$00.
 $B7D4 ADD HL,HL     ; #REGhl+=#REGhl.
 $B7D5 ADD HL,DE     ; #REGhl+=#REGde.
 $B7D6 PUSH DE       ; Stash #REGde on the stack.
 $B7D7 LD DE,$6242   ; #REGde=#N$6242.
 $B7DA ADD HL,DE     ; #REGhl+=#REGde.
 $B7DB PUSH HL       ; Stash #REGhl on the stack.
 $B7DC LD A,(HL)     ; #REGa=*#REGhl.
 $B7DD INC HL        ; Increment #REGhl by one.
 $B7DE LD H,(HL)     ; #REGh=*#REGhl.
 $B7DF LD DE,$B4C2   ; #REGde=#R$B4C2.
 $B7E2 LD L,A        ; #REGl=#REGa.
 $B7E3 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $B7E5 LD A,L        ; #REGa=#REGl.
 $B7E6 CP $20        ; Compare #REGa with #N$20.
 $B7E8 JR C,$B7ED    ; Jump to #R$B7ED if #REGa is lower.
 $B7EA POP HL        ; {Restore #REGhl and #REGhl from the stack.
 $B7EB POP HL        ; }
 $B7EC RET           ; Return.
*$B7ED LD HL,$7200   ; #REGhl=#R$7200.
 $B7F0 OR %00010000  ; Set bit 4.
 $B7F2 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $B7F4 JR NZ,$B7F8   ; Jump to #R$B7F8 if #REGa is not zero.
 $B7F6 XOR %00010000 ; Flip bit 4.
*$B7F8 LD E,A        ; #REGe=#REGa.
 $B7F9 LD D,$00      ; #REGd=#N$00.
 $B7FB LD HL,$B4C2   ; #REGhl=#R$B4C2.
 $B7FE ADD HL,DE     ; #REGhl+=#REGde.
 $B7FF POP IX        ; Restore #REGix from the stack.
 $B801 LD (IX+$00),L ; Write #REGl to *#REGix+#N$00.
 $B804 LD (IX+$01),H ; Write #REGh to *#REGix+#N$01.
 $B807 POP HL        ; Restore #REGhl from the stack.
 $B808 LD DE,$78C0   ; {#REGhl+=#R$78C0.
 $B80B ADD HL,DE     ; }
 $B80C JP $9914      ; Jump to #R$9914.

; Data block at B80F
b$B80F DEFB $28,$B8,$01,$01,$17,$B8,$00,$00
 $B817 DEFB $11,$28,$B8,$01,$02,$38,$B8,$00
 $B81F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B827 DEFB $00,$00,$1C,$1C,$34,$40,$00,$00
 $B82F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B837 DEFB $00,$07,$07,$7A,$B8,$04,$02,$1A
 $B83F DEFB $BA,$BC,$FF,$0A,$B9,$01,$04,$2C
 $B847 DEFB $BA,$40,$FF,$4A,$B9,$04,$02,$34
 $B84F DEFB $BA,$BE,$FF,$DA,$B9,$01,$04,$46
 $B857 DEFB $BA,$C0,$FF,$BA,$B8,$05,$02,$22
 $B85F DEFB $BA,$BA,$FF,$2A,$B9,$01,$04,$30
 $B867 DEFB $BA,$40,$FF,$8A,$B9,$05,$02,$3C
 $B86F DEFB $BA,$BE,$FF,$FA,$B9,$01,$04,$4A
 $B877 DEFB $BA,$C0,$FF,$00,$1F,$3F,$3F,$3F
 $B87F DEFB $3F,$3F,$3F,$1F,$1E,$1F,$3B,$31
 $B887 DEFB $1A,$18,$00,$00,$FF,$FF,$FF,$FF
 $B88F DEFB $FF,$FF,$FF,$03,$00,$00,$00,$00
 $B897 DEFB $00,$00,$00,$00,$FC,$FF,$FF,$FF
 $B89F DEFB $FF,$FF,$FF,$FF,$7E,$32,$33,$63
 $B8A7 DEFB $61,$30,$00,$00,$62,$F4,$F8,$F8
 $B8AF DEFB $FC,$FC,$1C,$00,$00,$00,$00,$00
 $B8B7 DEFB $00,$00,$00,$00,$00,$01,$02,$02
 $B8BF DEFB $02,$02,$02,$00,$00,$00,$00,$01
 $B8C7 DEFB $03,$00,$00,$00,$FF,$FF,$FF,$FF
 $B8CF DEFB $FF,$FF,$FF,$F8,$F8,$F0,$F0,$B0
 $B8D7 DEFB $30,$10,$00,$00,$FF,$FF,$FF,$FF
 $B8DF DEFB $FF,$FF,$FF,$1F,$07,$01,$03,$03
 $B8E7 DEFB $00,$00,$00,$00,$C6,$FF,$FF,$FF
 $B8EF DEFB $FF,$FF,$FB,$F1,$F0,$E0,$20,$20
 $B8F7 DEFB $20,$20,$00,$00,$10,$60,$80,$80
 $B8FF DEFB $80,$C0,$C0,$C0,$00,$00,$00,$00
 $B907 DEFB $00,$00,$00,$00,$00,$00,$00,$18
 $B90F DEFB $7C,$FE,$FF,$FF,$FF,$FF,$FF,$7F
 $B917 DEFB $7F,$7E,$7E,$7F,$FF,$FF,$BD,$C3
 $B91F DEFB $FF,$FE,$FE,$7A,$7A,$7A,$5A,$40
 $B927 DEFB $40,$40,$40,$18,$3E,$7F,$FF,$FF
 $B92F DEFB $FF,$FF,$FF,$FE,$7E,$7E,$7E,$7E
 $B937 DEFB $7E,$FE,$FF,$BD,$C3,$FF,$7F,$7F
 $B93F DEFB $5E,$5E,$5E,$02,$02,$02,$02,$00
 $B947 DEFB $00,$00,$00,$00,$46,$2F,$1F,$1F
 $B94F DEFB $3F,$3F,$38,$00,$00,$00,$00,$00
 $B957 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF
 $B95F DEFB $FF,$FF,$FF,$7F,$7E,$4C,$CC,$C6
 $B967 DEFB $86,$0C,$00,$00,$FF,$FF,$FF,$FF
 $B96F DEFB $FF,$FF,$FF,$C0,$00,$00,$00,$00
 $B977 DEFB $00,$00,$00,$00,$F8,$FC,$FC,$FC
 $B97F DEFB $FC,$FC,$FC,$F8,$78,$F8,$DC,$8C
 $B987 DEFB $58,$18,$00,$00,$08,$06,$01,$01
 $B98F DEFB $01,$03,$03,$03,$00,$00,$00,$00
 $B997 DEFB $00,$00,$00,$00,$63,$FF,$FF,$FF
 $B99F DEFB $FF,$FF,$DF,$0F,$0F,$07,$04,$04
 $B9A7 DEFB $04,$04,$00,$00,$FF,$FF,$FF,$FF
 $B9AF DEFB $FF,$FF,$FF,$F8,$E0,$80,$C0,$C0
 $B9B7 DEFB $40,$00,$00,$00,$FF,$FF,$FF,$FF
 $B9BF DEFB $FF,$FF,$FF,$1F,$1F,$0F,$0F,$0D
 $B9C7 DEFB $08,$08,$00,$00,$00,$80,$40,$40
 $B9CF DEFB $40,$40,$40,$00,$00,$00,$00,$80
 $B9D7 DEFB $C0,$00,$00,$81,$5E,$3E,$3E,$3E
 $B9DF DEFB $1C,$3C,$7E,$FF,$FF,$FF,$FF,$FF
 $B9E7 DEFB $7F,$7E,$FE,$FF,$FF,$FF,$FF,$FF
 $B9EF DEFB $FF,$7F,$6E,$06,$06,$06,$06,$00
 $B9F7 DEFB $00,$00,$00,$00,$00,$00,$00,$81
 $B9FF DEFB $5E,$3E,$3E,$3E,$1C,$3E,$7F,$FF
 $BA07 DEFB $FF,$FF,$FF,$7F,$7E,$7E,$7F,$FF
 $BA0F DEFB $FF,$FF,$FF,$FF,$FE,$FE,$76,$60
 $BA17 DEFB $60,$60,$60,$03,$22,$03,$22,$03
 $BA1F DEFB $22,$03,$22,$03,$02,$03,$22,$03
 $BA27 DEFB $22,$03,$22,$03,$22,$05,$24,$23
 $BA2F DEFB $22,$05,$24,$23,$22,$03,$22,$03
 $BA37 DEFB $22,$03,$22,$03,$22,$03,$22,$03
 $BA3F DEFB $22,$03,$22,$03,$22,$03,$22,$05
 $BA47 DEFB $24,$23,$02,$05,$24,$23,$22
 $BA4E DEFB $8A,$72,$5E,$BA,$7A,$72,$66,$BA
 $BA56 DEFB $7A,$72,$6E,$BA,$6A,$72,$E2,$B9
 $BA5E DEFB $FE,$7E,$1A,$32,$6E,$60,$30,$00
 $BA66 DEFB $7A,$7A,$7A,$5A,$00,$00,$00,$00
 $BA6E DEFB $7F,$7E,$58,$4C,$76,$06,$0C,$00

; Sub-Game Data: Munich
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8EC9)(munich) }
; UDGTABLE#
; #POPS
@label=Munich_Data
b$BA76 DEFB $D9,$BF,$09,$BF,$97,$BE,$90,$BE
 $BA7E DEFB $07,$9C,$C0
 $BA81 DEFW $C13D
@label=Munich_SubGame
 $BA83 DEFW $BB05
@label=Munich_SetUp
 $BA85 DEFW $BAB5
 $BA87 DEFB $24,$7B,$A2,$BA,$01,$00,$30,$00
 $BA8F DEFB $30,$00,$00,$50,$00,$23,$E8,$76
 $BA97 DEFB $88,$9F,$00,$00,$00,$00,$00,$00
 $BA9F DEFB $00,$03,$06,$47,$65,$74,$65,$6E
 $BAA7 DEFB $7A,$65,$20,$61,$72,$74,$7A,$20
 $BAAF DEFB $61,$20,$76,$61,$79,$A0

; Initialise: Munich
@label=Initialise_Munich
c$BAB5 LD C,$48       ; #REGc=#N$48.
 $BAB7 LD IX,$6240    ; #REGix=#R$6240.
 $BABB LD DE,$0006    ; #REGde=#N($0006,$04,$04).
 $BABE LD HL,$BD4A    ; #REGhl=#R$BD4A.
*$BAC1 LD B,$08       ; #REGb=#N$08.
 $BAC3 LD A,(HL)      ; #REGa=*#REGhl.
*$BAC4 RLCA           ; RLCA.
 $BAC5 JR NC,$BACB    ; Jump to #R$BACB if  is higher.
 $BAC7 SET 7,(IX+$00) ; Set bit 7 of *#REGix+#N$00.
*$BACB ADD IX,DE      ; #REGix+=#REGde.
 $BACD DJNZ $BAC4     ; Decrease counter by one and loop back to #R$BAC4 until
                      ; counter is zero.
 $BACF INC HL         ; Increment #REGhl by one.
 $BAD0 DEC C          ; Decrease #REGc by one.
 $BAD1 JR NZ,$BAC1    ; Jump to #R$BAC1 if #REGc is not zero.
 $BAD3 LD HL,$9A92    ; {Write #R$9A92 to *#R$99BA.
 $BAD6 LD ($99BA),HL  ; }
 $BAD9 LD B,$22       ; #REGb=#N$22.
 $BADB LD IX,$BD92    ; #REGix=#R$BD92.
 $BADF LD DE,$0018    ; {Write #N($0018,$04,$04) to *#R$926E.
 $BAE2 LD ($926E),DE  ; }
 $BAE6 LD DE,$7240    ; {Write #R$7240 to *#R$99B8.
 $BAE9 LD ($99B8),DE  ; }
 $BAED CALL $9226     ; Call #R$9226.
 $BAF0 LD B,$09       ; #REGb=#N$09.
 $BAF2 LD DE,$0030    ; {Write #N($0030,$04,$04) to *#R$926E.
 $BAF5 LD ($926E),DE  ; }
 $BAF9 CALL $9226     ; Call #R$9226.
 $BAFC LD A,$07       ; {Write #N$07 to: #LIST { *#N$6192 } { *#N$6198 } LIST#
 $BAFE LD ($6192),A   ;
 $BB01 LD ($6198),A   ; }
 $BB04 RET            ; Return.

; Handler: Munich
@label=Handler_Munich
c$BB05 LD A,($7207)                         ;
 $BB08 CP $00                               ;
 $BB0A JR NZ,$BB13                          ;
 $BB0C LD HL,$76E8                          ;
 $BB0F LD ($99E3),HL                        ;
 $BB12 RET                                  ;
*$BB13 CP $05                               ;
 $BB15 JP C,$BBF1                           ;
 $BB18 RET NZ                               ;
 $BB19 CALL $9619                           ;
 $BB1C CP $33                               ;
 $BB1E JR NC,$BB49                          ;
 $BB20 LD L,A                               ;
 $BB21 LD H,$00                             ;
 $BB23 LD D,$00                             ;
 $BB25 ADD HL,HL                            ;
 $BB26 LD E,L                               ;
 $BB27 ADD HL,HL                            ;
 $BB28 ADD HL,HL                            ;
 $BB29 ADD HL,DE                            ;
 $BB2A LD DE,$7E00                          ;
 $BB2D ADD HL,DE                            ;
 $BB2E BIT 0,(HL)                           ;
 $BB30 JR Z,$BB49                           ;
 $BB32 BIT 1,(HL)                           ;
 $BB34 JR NZ,$BB49                          ;
 $BB36 LD (HL),$03                          ;
 $BB38 INC HL                               ;
 $BB39 LD E,(HL)                            ;
 $BB3A INC HL                               ;
 $BB3B LD D,(HL)                            ;
 $BB3C INC HL                               ;
 $BB3D INC HL                               ;
 $BB3E INC HL                               ;
 $BB3F LD BC,$BF11                          ;
 $BB42 LD (HL),C                            ;
 $BB43 INC HL                               ;
 $BB44 LD (HL),B                            ;
 $BB45 EX DE,HL                             ;
 $BB46 JP $9914                             ;
*$BB49 LD HL,$7239                          ;
 $BB4C DEC (HL)                             ;
 $BB4D RET NZ                               ;
 $BB4E LD A,($723A)                         ;
 $BB51 CP $00                               ;
 $BB53 JR Z,$BB6D                           ;
 $BB55 LD IX,($723C)                        ;
 $BB59 LD HL,$BFA9                          ;
 $BB5C CALL $BB94                           ;
 $BB5F LD A,$00                             ;
 $BB61 LD ($723A),A                         ;
 $BB64 CALL $9619                           ;
 $BB67 AND $7F                              ;
 $BB69 LD ($7239),A                         ;
 $BB6C RET                                  ;
*$BB6D CALL $9619                           ;
 $BB70 AND $03                              ;
 $BB72 LD C,A                               ;
 $BB73 RLCA                                 ;
 $BB74 RLCA                                 ;
 $BB75 ADD A,C                              ;
 $BB76 LD C,A                               ;
 $BB77 LD B,$00                             ;
 $BB79 LD IX,$BD36                          ;
 $BB7D ADD IX,BC                            ;
 $BB7F LD HL,$BFC1                          ;
 $BB82 LD ($723C),IX                        ;
 $BB86 CALL $BB94                           ;
 $BB89 LD A,$01                             ;
 $BB8B LD ($723A),A                         ;
 $BB8E LD A,$1E                             ;
 $BB90 LD ($7239),A                         ;
 $BB93 RET                                  ;
*$BB94 LD E,(IX+$00)                        ;
 $BB97 LD D,(IX+$01)                        ;
 $BB9A LD B,(IX+$04)                        ;
 $BB9D PUSH DE                              ;
 $BB9E POP IX                               ;
 $BBA0 LD DE,$0008                          ;
*$BBA3 PUSH HL                              ;
 $BBA4 LD C,$03                             ;
*$BBA6 SET 2,(IX+$00)                       ;
 $BBAA LD (IX+$02),L                        ;
 $BBAD LD (IX+$03),H                        ;
 $BBB0 ADD HL,DE                            ;
 $BBB1 ADD IX,DE                            ;
 $BBB3 DEC C                                ;
 $BBB4 JR NZ,$BBA6                          ;
 $BBB6 POP HL                               ;
 $BBB7 DJNZ $BBA3                           ;
 $BBB9 LD IX,($723C)                        ;
 $BBBD LD L,(IX+$02)                        ;
 $BBC0 LD H,(IX+$03)                        ;
 $BBC3 LD B,(IX+$04)                        ;
 $BBC6 PUSH HL                              ;
 $BBC7 POP IX                               ;
 $BBC9 LD HL,$99F0                          ;
*$BBCC LD E,(IX+$02)                        ;
 $BBCF LD D,(IX+$03)                        ;
 $BBD2 LD C,$03                             ;
*$BBD4 LD (HL),E                            ;
 $BBD5 INC HL                               ;
 $BBD6 LD (HL),D                            ;
 $BBD7 INC HL                               ;
 $BBD8 DEC C                                ;
 $BBD9 JR Z,$BBE4                           ;
 $BBDB LD A,E                               ;
 $BBDC ADD A,$40                            ;
 $BBDE LD E,A                               ;
 $BBDF JR NC,$BBD4                          ;
 $BBE1 INC D                                ;
 $BBE2 JR $BBD4                             ;
*$BBE4 DJNZ $BBEA                           ;
 $BBE6 LD ($99A7),HL                        ;
 $BBE9 RET                                  ;
*$BBEA LD DE,$0005                          ;
 $BBED ADD IX,DE                            ;
 $BBEF JR $BBCC                             ;
*$BBF1 LD A,$02                             ;
 $BBF3 LD ($99AA),A                         ;
 $BBF6 LD HL,($99E3)                        ;
 $BBF9 LD DE,$0038                          ;
 $BBFC ADD HL,DE                            ;
 $BBFD LD ($99E3),HL                        ;
 $BC00 BIT 7,(HL)                           ;
 $BC02 JP Z,$BCCE                           ;
 $BC05 CALL $9439                           ;
 $BC08 LD IX,($99E3)                        ;
 $BC0C BIT 5,(IX+$06)                       ;
 $BC10 JR Z,$BC2D                           ;
 $BC12 RES 5,(IX+$06)                       ;
 $BC16 LD L,(IX+$04)                        ;
 $BC19 LD H,(IX+$05)                        ;
 $BC1C LD DE,$0040                          ;
 $BC1F ADD HL,DE                            ;
 $BC20 CALL $9604                           ;
 $BC23 JP NZ,$9926                          ;
 $BC26 LD (IX+$00),$00                      ;
 $BC2A JP $9942                             ;
*$BC2D BIT 6,(IX+$06)                       ;
 $BC31 JR Z,$BC42                           ;
 $BC33 LD A,(IX+$06)                        ;
 $BC36 XOR $50                              ;
 $BC38 LD (IX+$06),A                        ;
 $BC3B LD (IX+$07),$02                      ;
 $BC3F JP $9926                             ;
*$BC42 DEC (IX+$07)                         ;
 $BC45 JR Z,$BCB0                           ;
 $BC47 LD L,(IX+$04)                        ;
 $BC4A LD H,(IX+$05)                        ;
 $BC4D CALL $9375                           ;
 $BC50 BIT 7,A                              ;
 $BC52 JR Z,$BC8C                           ;
 $BC54 BIT 4,A                              ;
 $BC56 JR NZ,$BC8C                          ;
 $BC58 LD A,$00                             ;
 $BC5A LD ($99AA),A                         ;
 $BC5D LD (IX+$04),L                        ;
 $BC60 LD (IX+$05),H                        ;
 $BC63 LD A,$10                             ;
 $BC65 LD ($976E),A                         ;
 $BC68 CALL $994D                           ;
 $BC6B LD IX,($99E3)                        ;
 $BC6F LD L,(IX+$01)                        ;
 $BC72 LD (IX+$04),L                        ;
 $BC75 LD L,(IX+$02)                        ;
 $BC78 LD (IX+$05),L                        ;
 $BC7B SET 6,(IX+$06)                       ;
 $BC7F LD A,$02                             ;
 $BC81 LD ($99AA),A                         ;
 $BC84 LD A,$11                             ;
 $BC86 LD ($976E),A                         ;
 $BC89 JP $9926                             ;
*$BC8C AND $72                              ;
 $BC8E JR NZ,$BC9D                          ;
 $BC90 LD (IX+$04),L                        ;
 $BC93 LD (IX+$05),H                        ;
 $BC96 SET 5,(IX+$06)                       ;
 $BC9A JP $9926                             ;
*$BC9D BIT 4,A                              ;
 $BC9F JR Z,$BCA7                           ;
 $BCA1 SET 6,(IX+$06)                       ;
 $BCA5 JR $BC2D                             ;
*$BCA7 AND $40                              ;
 $BCA9 JR Z,$BCB0                           ;
 $BCAB LD HL,$7200                          ;
 $BCAE SET 4,(HL)                           ;
*$BCB0 CALL $9619                           ;
 $BCB3 AND $10                              ;
 $BCB5 OR $08                               ;
 $BCB7 LD IX,($99E3)                        ;
 $BCBB XOR (IX+$06)                         ;
 $BCBE LD (IX+$06),A                        ;
 $BCC1 LD A,($99A5)                         ;
 $BCC4 AND $0F                              ;
 $BCC6 ADD A,$05                            ;
 $BCC8 LD (IX+$07),A                        ;
 $BCCB JP $9926                             ;
*$BCCE CALL $9439                           ;
*$BCD1 CALL $9619                           ;
 $BCD4 LD IX,($99E3)                        ;
 $BCD8 BIT 0,A                              ;
 $BCDA JR Z,$BD1E                           ;
 $BCDC BIT 7,A                              ;
 $BCDE LD HL,$7880                          ;
 $BCE1 LD B,$08                             ;
 $BCE3 JR NZ,$BCEA                          ;
 $BCE5 LD B,$18                             ;
 $BCE7 LD HL,$7D80                          ;
*$BCEA AND $3E                              ;
 $BCEC JR Z,$BCD1                           ;
 $BCEE CP $3E                               ;
 $BCF0 JR Z,$BCD1                           ;
 $BCF2 OR L                                 ;
 $BCF3 LD L,A                               ;
*$BCF4 CALL $BD00                           ;
 $BCF7 LD B,$10                             ;
 $BCF9 LD HL,$7BBE                          ;
 $BCFC CALL $BD00                           ;
 $BCFF RET                                  ;
*$BD00 LD (IX+$06),B                        ;
 $BD03 LD (IX+$03),B                        ;
 $BD06 CALL $9375                           ;
 $BD09 AND $62                              ;
 $BD0B RET NZ                               ;
 $BD0C LD (IX+$04),L                        ;
 $BD0F LD (IX+$05),H                        ;
 $BD12 SET 7,(IX+$00)                       ;
 $BD16 SET 5,(IX+$06)                       ;
 $BD1A POP HL                               ;
 $BD1B JP $9929                             ;
*$BD1E AND $F0                              ;
 $BD20 LD H,$00                             ;
 $BD22 LD L,A                               ;
 $BD23 ADD HL,HL                            ;
 $BD24 ADD HL,HL                            ;
 $BD25 BIT 4,A                              ;
 $BD27 LD B,$00                             ;
 $BD29 LD DE,$78C0                          ;
 $BD2C JR Z,$BD33                           ;
 $BD2E LD B,$10                             ;
 $BD30 LD DE,$78FE                          ;
*$BD33 ADD HL,DE                            ;
 $BD34 JR $BCF4                             ;
 $BD36 DEFB $40,$72,$92,$BD,$0B,$48,$73,$C9 ;
 $BD3E DEFB $BD,$07,$F0,$73,$EC,$BD,$05,$68 ;
 $BD46 DEFB $74,$05,$BE,$0B                 ;
 $BD4A DEFB $18,$00,$00,$00,$10,$00,$00,$00 ;
 $BD52 DEFB $08,$00,$00,$00,$18,$4A,$A9,$50 ;
 $BD5A DEFB $18,$56,$66,$A8,$00,$00,$00,$00 ;
 $BD62 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $BD6A DEFB $42,$6A,$8A,$56,$42,$95,$46,$64 ;
 $BD72 DEFB $00,$00,$00,$00,$40,$00,$00,$00 ;
 $BD7A DEFB $40,$00,$00,$00,$01,$25,$65,$46 ;
 $BD82 DEFB $42,$5A,$A9,$44,$00,$00,$00,$00 ;
 $BD8A DEFB $40,$00,$00,$04,$40,$00,$00,$04 ;
 $BD92 DEFB $69,$BE,$14,$79,$01,$69,$BE,$16 ;
 $BD9A DEFB $79,$00,$69,$BE,$1A,$79,$00,$69 ;
 $BDA2 DEFB $BE,$1E,$79,$01,$69,$BE,$22,$79 ;
 $BDAA DEFB $01,$69,$BE,$26,$79,$00,$69,$BE ;
 $BDB2 DEFB $2A,$79,$01,$69,$BE,$2C,$79,$00 ;
 $BDBA DEFB $69,$BE,$30,$79,$01,$69,$BE,$34 ;
 $BDC2 DEFB $79,$00,$69,$BE,$38,$79,$00,$69 ;
 $BDCA DEFB $BE,$4A,$7A,$00,$69,$BE,$4E,$7A ;
 $BDD2 DEFB $01,$69,$BE,$50,$7A,$00,$69,$BE ;
 $BDDA DEFB $56,$7A,$01,$69,$BE,$5A,$7A,$01 ;
 $BDE2 DEFB $69,$BE,$5E,$7A,$00,$69,$BE,$62 ;
 $BDEA DEFB $7A,$00,$69,$BE,$6A,$7A,$01,$69 ;
 $BDF2 DEFB $BE,$6E,$7A,$00,$69,$BE,$70,$7A ;
 $BDFA DEFB $01,$69,$BE,$74,$7A,$00,$69,$BE ;
 $BE02 DEFB $78,$7A,$01,$69,$BE,$8C,$7B,$01 ;
 $BE0A DEFB $69,$BE,$90,$7B,$00,$69,$BE,$92 ;
 $BE12 DEFB $7B,$00,$69,$BE,$96,$7B,$01,$69 ;
 $BE1A DEFB $BE,$98,$7B,$00,$69,$BE,$9C,$7B ;
 $BE22 DEFB $01,$69,$BE,$A0,$7B,$00,$69,$BE ;
 $BE2A DEFB $A6,$7B,$01,$69,$BE,$A8,$7B,$00 ;
 $BE32 DEFB $69,$BE,$AC,$7B,$00,$69,$BE,$B0 ;
 $BE3A DEFB $7B,$01,$82,$BE,$C4,$7B,$00,$74 ;
 $BE42 DEFB $BE,$F8,$7B,$01,$82,$BE,$44,$7C ;
 $BE4A DEFB $01,$74,$BE,$78,$7C,$00,$82,$BE ;
 $BE52 DEFB $CA,$78,$01,$74,$BE,$04,$79,$01 ;
 $BE5A DEFB $82,$BE,$8A,$79,$00,$82,$BE,$84 ;
 $BE62 DEFB $7A,$01,$82,$BE,$04,$7B,$00,$A9 ;
 $BE6A DEFB $BF,$01,$03,$71,$BE,$00,$00,$05 ;
 $BE72 DEFB $04,$03,$49,$BF,$02,$03,$7C,$BE ;
 $BE7A DEFB $00,$00,$04,$03,$02,$04,$03,$02 ;
 $BE82 DEFB $79,$BF,$02,$03,$8A,$BE,$FE,$FF ;
 $BE8A DEFB $04,$03,$02,$04,$03,$02,$30,$78 ;
 $BE92 DEFB $38,$31,$31,$39,$39,$31,$20,$F1 ;
 $BE9A DEFB $F1,$20,$F1,$F1,$20,$F1,$F1,$20 ;
 $BEA2 DEFB $41,$F0,$50,$61,$20,$41,$10,$13 ;
 $BEAA DEFB $80,$24,$60,$13,$10,$61,$22,$41 ;
 $BEB2 DEFB $12,$15,$82,$26,$62,$15,$12,$61 ;
 $BEBA DEFB $22,$41,$F2,$52,$F1,$F1,$61,$10 ;
 $BEC2 DEFB $31,$D0,$21,$E0,$31,$40,$23,$50 ;
 $BECA DEFB $14,$10,$21,$30,$23,$20,$24,$50 ;
 $BED2 DEFB $31,$42,$25,$52,$16,$12,$21,$32 ;
 $BEDA DEFB $25,$22,$26,$42,$10,$31,$D2,$21 ;
 $BEE2 DEFB $D2,$10,$F1,$F1,$20,$41,$F0,$50 ;
 $BEEA DEFB $31,$50,$41,$10,$24,$A0,$14,$40 ;
 $BEF2 DEFB $13,$10,$31,$50,$41,$12,$26,$A2 ;
 $BEFA DEFB $16,$42,$15,$12,$31,$53,$41,$F2 ;
 $BF02 DEFB $52,$31,$50,$F1,$C1,$33,$00,$08 ;
 $BF0A DEFB $1C,$27,$3D,$3F,$3C,$3C,$18,$04 ;
 $BF12 DEFB $1C,$27,$3D,$27,$24,$24,$18,$18 ;
 $BF1A DEFB $18,$18,$18,$18,$18,$00,$18,$00 ;
 $BF22 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $BF2A DEFB $08,$30,$3C,$79,$3D,$3D,$F9,$7F ;
 $BF32 DEFB $3F,$3E,$3E,$7E,$7E,$7E,$BC,$41 ;
 $BF3A DEFB $3E,$22,$22,$41,$41,$41,$00,$00 ;
 $BF42 DEFB $00,$18,$3C,$7C,$D8,$FC,$7E,$08 ;
 $BF4A DEFB $06,$1F,$0E,$0E,$0E,$1C,$3C,$3F ;
 $BF52 DEFB $3F,$3C,$3C,$3F,$3F,$5F,$4F,$20 ;
 $BF5A DEFB $1F,$22,$22,$21,$41,$41,$40,$00 ;
 $BF62 DEFB $00,$00,$00,$00,$00,$00,$00,$C0 ;
 $BF6A DEFB $E0,$00,$00,$00,$00,$00,$00,$00 ;
 $BF72 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $BF7A DEFB $00,$00,$00,$00,$00,$00,$00,$03 ;
 $BF82 DEFB $07,$00,$00,$00,$00,$00,$00,$00 ;
 $BF8A DEFB $00,$00,$00,$00,$00,$00,$00,$10 ;
 $BF92 DEFB $60,$F8,$70,$70,$70,$38,$3C,$FC ;
 $BF9A DEFB $FC,$3C,$3C,$FC,$FC,$FA,$F2,$04 ;
 $BFA2 DEFB $F8,$44,$44,$84,$82,$82,$02,$00 ;
 $BFAA DEFB $00,$00,$00,$00,$20,$18,$7C,$26 ;
 $BFB2 DEFB $24,$24,$18,$3E,$7F,$7F,$7F,$0B ;
 $BFBA DEFB $1F,$27,$3D,$3E,$3C,$3C,$18,$40 ;
 $BFC2 DEFB $30,$F8,$4C,$48,$48,$33,$7B,$FB ;
 $BFCA DEFB $FB,$FC,$FE,$FC,$7C,$7C,$7C,$00 ;
 $BFD2 DEFB $00,$00,$00,$00,$00,$00,$00,$F3 ;
 $BFDA DEFB $F3,$63,$10,$F3,$F3,$10,$F3,$F3 ;
 $BFE2 DEFB $F3,$F3,$A3,$17,$13,$14,$23,$14 ;
 $BFEA DEFB $17,$23,$24,$23,$17,$13,$14,$13 ;
 $BFF2 DEFB $17,$73,$22,$43,$12,$15,$13,$15 ;
 $BFFA DEFB $12,$13,$25,$12,$13,$25,$12,$13 ;
 $C002 DEFB $15,$12,$15,$13,$15,$12,$D3,$16 ;
 $C00A DEFB $13,$16,$23,$26,$23,$26,$23,$16 ;
 $C012 DEFB $13,$16,$13,$16,$F3,$F3,$F3,$F3 ;
 $C01A DEFB $D3,$14,$13,$17,$13,$24,$13,$14 ;
 $C022 DEFB $13,$17,$13,$14,$33,$17,$23,$24 ;
 $C02A DEFB $23,$24,$13,$17,$23,$10,$33,$15 ;
 $C032 DEFB $13,$15,$13,$25,$13,$15,$12,$15 ;
 $C03A DEFB $13,$15,$12,$23,$15,$23,$25,$12 ;
 $C042 DEFB $13,$25,$13,$15,$63,$16,$13,$16 ;
 $C04A DEFB $13,$26,$13,$16,$13,$16,$13,$16 ;
 $C052 DEFB $33,$16,$23,$26,$23,$26,$13,$16 ;
 $C05A DEFB $F3,$F3,$43,$10,$F3,$F3,$73,$24 ;
 $C062 DEFB $13,$14,$23,$17,$13,$14,$13,$17 ;
 $C06A DEFB $13,$14,$13,$24,$13,$17,$83,$10 ;
 $C072 DEFB $43,$12,$25,$13,$15,$23,$15,$12 ;
 $C07A DEFB $15,$13,$15,$12,$15,$13,$25,$13 ;
 $C082 DEFB $15,$12,$33,$20,$83,$26,$13,$16 ;
 $C08A DEFB $23,$16,$13,$16,$13,$16,$13,$16 ;
 $C092 DEFB $13,$26,$13,$16,$F3,$F3,$73,$10 ;
 $C09A DEFB $13,$00,$0C,$09,$6C,$0C,$0D,$68 ;
 $C0A2 DEFB $08,$0D,$14,$09,$04,$05,$04,$05 ;
 $C0AA DEFB $04,$05,$04,$05,$04,$09,$04,$05 ;
 $C0B2 DEFB $04,$05,$04,$05,$18,$09,$10,$53 ;
 $C0BA DEFB $0C,$0C,$0D,$0C,$53,$0C,$28,$05 ;
 $C0C2 DEFB $04,$05,$08,$09,$08,$09,$08,$05 ;
 $C0CA DEFB $04,$05,$04,$05,$10,$80,$14,$05 ;
 $C0D2 DEFB $04,$09,$08,$05,$04,$05,$04,$05 ;
 $C0DA DEFB $04,$05,$0C,$05,$04,$09,$04,$05 ;
 $C0E2 DEFB $04,$05,$0C,$0B,$05,$08,$37,$08 ;
 $C0EA DEFB $33,$0B,$0C,$37,$08,$33,$0D,$08 ;
 $C0F2 DEFB $05,$04,$05,$04,$09,$04,$05,$04 ;
 $C0FA DEFB $05,$04,$05,$0C,$05,$08,$09,$08 ;
 $C102 DEFB $09,$04,$09,$09,$78,$09,$10,$05 ;
 $C10A DEFB $04,$09,$04,$09,$04,$05,$04,$05 ;
 $C112 DEFB $08,$09,$04,$05,$04,$05,$1C,$0D ;
 $C11A DEFB $0C,$53,$08,$05,$0F,$09,$10,$53 ;
 $C122 DEFB $0C,$0F,$0D,$10,$09,$04,$05,$08 ;
 $C12A DEFB $05,$04,$05,$04,$05,$04,$05,$04 ;
 $C132 DEFB $09,$04,$05,$0C,$11,$09,$6C,$0D ;
 $C13A DEFB $09,$6C,$0D,$09,$BF,$01,$01,$45 ;
 $C142 DEFB $C1,$00,$00,$13                 ;

; Sub-Game Data: Hong Kong
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F2D)(hong-kong) }
; UDGTABLE#
; #POPS
@label=HongKong_Data
b$C146 DEFB $23,$C5,$6F,$C4,$12,$C6,$08,$C6
 $C14E DEFB $07,$6D,$C6
 $C151 DEFW $AA6A
@label=HongKong_SubGame
 $C153 DEFW $C36B
@label=HongKong_SetUp
 $C155 DEFW $C172
 $C157 DEFB $20,$7C,$60,$C4,$01,$00,$10,$00
 $C15F DEFB $20,$00,$00,$40,$00,$64,$90,$76
 $C167 DEFB $09,$A3,$00,$00,$00,$00,$00,$00
 $C16F DEFB $FF,$05,$07

; Initialise: Hong Kong
@label=HongKong_Initialise
c$C172 LD HL,$6241     ;
 $C175 LD DE,$0006     ;
*$C178 LD A,(HL)       ;
 $C179 CP $00          ;
 $C17B JR Z,$C17F      ;
 $C17D LD (HL),$07     ;
*$C17F ADD HL,DE       ;
 $C180 LD A,$72        ;
 $C182 CP H            ;
 $C183 JR NZ,$C178     ;
 $C185 LD IX,$7240     ;
 $C189 LD B,$0A        ;
 $C18B LD HL,$7530     ;
 $C18E LD A,$FE        ;
 $C190 LD DE,$C51F     ;
 $C193 CALL $C1EF      ;
 $C196 LD IX,$7338     ;
 $C19A LD HL,$7588     ;
 $C19D LD A,$FE        ;
 $C19F LD B,$0A        ;
 $C1A1 LD DE,$C521     ;
 $C1A4 CALL $C1EF      ;
 $C1A7 LD IX,$7430     ;
 $C1AB LD HL,$75E0     ;
 $C1AE LD A,$FE        ;
 $C1B0 LD B,$0A        ;
 $C1B2 LD DE,$C51F     ;
 $C1B5 CALL $C1EF      ;
 $C1B8 LD HL,$7588     ;
 $C1BB LD B,$20        ;
 $C1BD LD (HL),$3C     ;
*$C1BF INC HL          ;
 $C1C0 LD (HL),$BD     ;
 $C1C2 INC HL          ;
 $C1C3 LD (HL),$7E     ;
 $C1C5 DJNZ $C1BF      ;
 $C1C7 LD HL,$7230     ;
 $C1CA LD ($7239),HL   ;
 $C1CD LD HL,$7638     ;
 $C1D0 LD (HL),$80     ;
 $C1D2 LD A,$A0        ;
 $C1D4 LD ($723B),A    ;
 $C1D7 LD DE,$7570     ;
 $C1DA LD HL,$C4EF     ;
 $C1DD CALL $C1E9      ;
 $C1E0 LD DE,$75C8     ;
 $C1E3 CALL $C1E9      ;
 $C1E6 LD DE,$7620     ;
*$C1E9 LD BC,$0010     ;
 $C1EC LDIR            ;
 $C1EE RET             ;
*$C1EF PUSH BC         ;
 $C1F0 LD (IX+$08),A   ;
 $C1F3 LD (IX+$00),L   ;
 $C1F6 LD (IX+$01),H   ;
 $C1F9 LD (IX+$02),$01 ;
 $C1FD LD (IX+$03),$01 ;
 $C201 LD (IX+$04),E   ;
 $C204 LD (IX+$05),D   ;
 $C207 LD BC,$0018     ;
 $C20A ADD IX,BC       ;
 $C20C SUB $08         ;
 $C20E LD BC,$0008     ;
 $C211 ADD HL,BC       ;
 $C212 POP BC          ;
 $C213 DJNZ $C1EF      ;
 $C215 LD (IX-$15),$02 ;
 $C219 RET             ;
; This entry point is used by the routine at #R$C36B.
*$C21A LD HL,($7239)   ;
 $C21D LD DE,$0018     ;
 $C220 ADD HL,DE       ;
 $C221 LD A,$38        ;
 $C223 CP L            ;
 $C224 JR NZ,$C22C     ;
 $C226 CALL $C69D      ;
 $C229 LD HL,$7248     ;
*$C22C LD ($7239),HL   ;
 $C22F LD A,$20        ;
 $C231 CP L            ;
 $C232 LD A,$02        ;
 $C234 JR NZ,$C238     ;
 $C236 LD A,$06        ;
*$C238 LD ($99AA),A    ;
 $C23B LD B,$03        ;
 $C23D LD A,(HL)       ;
 $C23E CP $A8          ;
 $C240 JP NC,$C336     ;
 $C243 CP $10          ;
 $C245 JP Z,$C2F1      ;
 $C248 LD ($99E7),HL   ;
 $C24B CALL $C320      ;
 $C24E CALL $C26F      ;
 $C251 LD HL,($99E7)   ;
 $C254 LD B,$03        ;
*$C256 PUSH BC         ;
 $C257 LD ($99E7),HL   ;
 $C25A LD BC,$FFF8     ;
 $C25D ADD HL,BC       ;
 $C25E LD ($99E9),HL   ;
 $C261 CALL $C2ED      ;
 $C264 LD HL,($99E7)   ;
 $C267 LD BC,$00F8     ;
 $C26A ADD HL,BC       ;
 $C26B POP BC          ;
 $C26C DJNZ $C256      ;
 $C26E RET             ;
*$C26F LD IX,($7239)   ;
 $C273 LD B,$03        ;
 $C275 LD A,(IX+$00)   ;
 $C278 AND $07         ;
 $C27A RET NZ          ;
*$C27B PUSH BC         ;
 $C27C LD D,$E7        ;
 $C27E BIT 0,B         ;
 $C280 JR Z,$C28A      ;
 $C282 LD D,$0F        ;
 $C284 BIT 1,B         ;
 $C286 JR NZ,$C28A     ;
 $C288 LD D,$F0        ;
*$C28A LD L,(IX-$08)   ;
 $C28D LD H,(IX-$07)   ;
 $C290 LD C,(IX-$05)   ;
 $C293 LD E,$40        ;
 $C295 LD B,$08        ;
 $C297 BIT 0,C         ;
 $C299 JR NZ,$C29D     ;
 $C29B LD B,$10        ;
*$C29D LD A,$00        ;
*$C29F OR (HL)         ;
 $C2A0 AND D           ;
 $C2A1 JR NZ,$C2AB     ;
 $C2A3 INC HL          ;
 $C2A4 DJNZ $C29F      ;
 $C2A6 LD HL,$C51F     ;
 $C2A9 JR $C2DE        ;
*$C2AB LD L,(IX+$04)   ;
 $C2AE LD H,(IX+$05)   ;
 $C2B1 LD D,$00        ;
 $C2B3 ADD HL,DE       ;
 $C2B4 LD D,(HL)       ;
 $C2B5 INC HL          ;
 $C2B6 LD E,(HL)       ;
 $C2B7 LD A,(DE)       ;
 $C2B8 AND $E0         ;
 $C2BA JR Z,$C2D6      ;
 $C2BC CP $A0          ;
 $C2BE JR Z,$C2D6      ;
 $C2C0 BIT 6,A         ;
 $C2C2 JR Z,$C2C9      ;
 $C2C4 LD HL,$7200     ;
 $C2C7 SET 4,(HL)      ;
*$C2C9 POP BC          ;
 $C2CA POP HL          ;
 $C2CB LD HL,($7239)   ;
 $C2CE LD DE,$FFE8     ;
 $C2D1 ADD HL,DE       ;
 $C2D2 LD ($7239),HL   ;
 $C2D5 RET             ;
*$C2D6 LD HL,$C521     ;
 $C2D9 LD E,$80        ;
 $C2DB DEC C           ;
 $C2DC JR NZ,$C2AB     ;
*$C2DE LD (IX-$04),L   ;
 $C2E1 LD (IX-$03),H   ;
 $C2E4 LD DE,$00F8     ;
 $C2E7 ADD IX,DE       ;
 $C2E9 POP BC          ;
 $C2EA DJNZ $C27B      ;
 $C2EC RET             ;
*$C2ED CALL $980E      ;
 $C2F0 RET             ;
*$C2F1 LD A,$20        ;
 $C2F3 CP L            ;
 $C2F4 JR NZ,$C304     ;
*$C2F6 CALL $9619      ;
 $C2F9 AND $0E         ;
 $C2FB CP $0D          ;
 $C2FD JR NC,$C2F6     ;
 $C2FF ADD A,$9A       ;
 $C301 LD ($723B),A    ;
*$C304 PUSH BC         ;
 $C305 LD (HL),$FE     ;
 $C307 PUSH HL         ;
 $C308 PUSH HL         ;
 $C309 CALL $9439      ;
 $C30C POP IX          ;
 $C30E LD BC,$FFF0     ;
 $C311 ADD HL,BC       ;
 $C312 LD C,L          ;
 $C313 LD B,H          ;
 $C314 CALL $9403      ;
 $C317 POP HL          ;
 $C318 LD BC,$00F8     ;
 $C31B ADD HL,BC       ;
 $C31C POP BC          ;
 $C31D DJNZ $C304      ;
 $C31F RET             ;
*$C320 LD B,$09        ;
 $C322 LD HL,$700E     ;
 $C325 LD DE,$0006     ;
 $C328 CALL $C330      ;
 $C32B LD HL,$70CE     ;
 $C32E LD B,$09        ;
*$C330 LD (HL),$01     ;
 $C332 ADD HL,DE       ;
 $C333 DJNZ $C330      ;
 $C335 RET             ;
*$C336 JR NZ,$C362     ;
 $C338 LD A,($723B)    ;
 $C33B LD C,A          ;
*$C33C PUSH BC         ;
 $C33D DEC (HL)        ;
 $C33E DEC (HL)        ;
 $C33F PUSH HL         ;
 $C340 PUSH HL         ;
 $C341 LD A,C          ;
 $C342 CALL $9439      ;
 $C345 POP IX          ;
 $C347 LD (IX+$05),$78 ;
 $C34B LD (IX+$04),A   ;
 $C34E LD BC,$FFF0     ;
 $C351 ADD HL,BC       ;
 $C352 LD B,H          ;
 $C353 LD C,L          ;
 $C354 CALL $941E      ;
 $C357 POP HL          ;
 $C358 LD BC,$00F8     ;
 $C35B ADD HL,BC       ;
 $C35C POP BC          ;
 $C35D INC C           ;
 $C35E INC C           ;
 $C35F DJNZ $C33C      ;
 $C361 RET             ;
*$C362 LD DE,$00F8     ;
*$C365 DEC (HL)        ;
 $C366 DEC (HL)        ;
 $C367 ADD HL,DE       ;
 $C368 DJNZ $C365      ;
 $C36A RET             ;

; Handler: Hong Kong
@label=Handler_HongKong
c$C36B CALL $C21A      ;
 $C36E LD A,($7207)    ;
 $C371 CP $05          ;
 $C373 RET NC          ;
 $C374 LD A,$06        ;
 $C376 LD ($99AA),A    ;
 $C379 LD HL,($99E3)   ;
 $C37C LD DE,$0038     ;
 $C37F ADD HL,DE       ;
 $C380 LD A,$E0        ;
 $C382 CP L            ;
 $C383 JR NZ,$C388     ;
 $C385 LD HL,$7690     ;
*$C388 LD ($99E3),HL   ;
 $C38B BIT 7,(HL)      ;
 $C38D JR Z,$C3FF      ;
 $C38F CALL $9439      ;
 $C392 LD IX,($99E3)   ;
 $C396 LD E,(IX+$06)   ;
 $C399 BIT 5,E         ;
 $C39B JR NZ,$C3B9     ;
 $C39D LD L,(IX+$04)   ;
 $C3A0 LD H,(IX+$05)   ;
 $C3A3 CALL $9604      ;
 $C3A6 LD A,(IX+$03)   ;
 $C3A9 JR NZ,$C3B2     ;
 $C3AB RES 7,(IX+$00)  ;
 $C3AF JP $9942        ;
*$C3B2 CALL $C435      ;
 $C3B5 SET 5,E         ;
 $C3B7 JR Z,$C3E4      ;
*$C3B9 RES 5,(IX+$06)  ;
 $C3BD LD D,$08        ;
*$C3BF LD HL,$C450     ;
 $C3C2 LD A,(IX+$07)   ;
 $C3C5 INC A           ;
 $C3C6 AND $0F         ;
 $C3C8 LD (IX+$07),A   ;
 $C3CB LD C,A          ;
 $C3CC LD B,$00        ;
 $C3CE ADD HL,BC       ;
 $C3CF LD A,(HL)       ;
 $C3D0 CP (IX+$06)     ;
 $C3D3 JP Z,$9926      ;
 $C3D6 LD E,A          ;
 $C3D7 CALL $C435      ;
 $C3DA JR Z,$C3E4      ;
 $C3DC DEC D           ;
 $C3DD JR NZ,$C3BF     ;
 $C3DF SET 5,(IX+$06)  ;
 $C3E3 RET             ;
*$C3E4 LD (IX+$04),L   ;
 $C3E7 LD (IX+$05),H   ;
 $C3EA SET 5,E         ;
 $C3EC LD (IX+$06),E   ;
 $C3EF CALL $9926      ;
 $C3F2 CALL $9619      ;
 $C3F5 CP $F0          ;
 $C3F7 RET C           ;
 $C3F8 LD IX,($99E3)   ;
 $C3FC JP $994D        ;
*$C3FF CALL $9439      ;
 $C402 CALL $9619      ;
 $C405 CP $0F          ;
 $C407 RET NC          ;
 $C408 LD IX,($99E3)   ;
 $C40C LD H,$78        ;
 $C40E ADD A,A         ;
 $C40F AND $1E         ;
 $C411 ADD A,$D4       ;
 $C413 LD L,A          ;
 $C414 LD A,$08        ;
 $C416 CALL $9378      ;
 $C419 AND $60         ;
 $C41B RET NZ          ;
 $C41C LD (IX+$00),$80 ;
 $C420 LD (IX+$04),L   ;
 $C423 LD (IX+$05),H   ;
 $C426 LD (IX+$06),$28 ;
 $C42A LD A,($99A5)    ;
 $C42D AND $09         ;
 $C42F LD (IX+$07),A   ;
 $C432 JP $9929        ;
*$C435 LD L,(IX+$01)   ;
 $C438 LD H,(IX+$02)   ;
 $C43B CALL $9378      ;
 $C43E AND $60         ;
 $C440 RET Z           ;
 $C441 PUSH AF         ;
 $C442 AND $40         ;
 $C444 JR Z,$C44E      ;
 $C446 LD A,($7200)    ;
 $C449 OR $10          ;
 $C44B LD ($7200),A    ;
*$C44E POP AF          ;
 $C44F RET             ;
 $C450 EX AF,AF'       ;
 $C451 EX AF,AF'       ;
 $C452 EX AF,AF'       ;
 $C453 EX AF,AF'       ;
 $C454 NOP             ;
 $C455 NOP             ;
 $C456 JR $C468        ;
 $C458 EX AF,AF'       ;
 $C459 EX AF,AF'       ;
 $C45A EX AF,AF'       ;
 $C45B DJNZ $C46D      ;
 $C45D JR $C45F        ;
*$C45F EX AF,AF'       ;
 $C460 LD B,C          ;
 $C461 LD L,B          ;
 $C462 JR NZ,$C4D7     ;
 $C464 LD L,A          ;
 $C465 INC L           ;
 $C466 JR NZ,$C4BC     ;
*$C468 LD H,C          ;
 $C469 LD (HL),E       ;
 $C46A LD L,L          ;
 $C46B LD H,C          ;
 $C46C LD H,C          ;
*$C46D LD L,(HL)       ;
 $C46E AND B           ;
 $C46F NOP             ;
 $C470 EX AF,AF'       ;
 $C471 INC E           ;
 $C472 EX AF,AF'       ;
 $C473 RRA             ;
 $C474 LD A,(BC)       ;
 $C475 LD (BC),A       ;
 $C476 RLCA            ;
 $C477 NOP             ;
 $C478 EX AF,AF'       ;
 $C479 INC E           ;
 $C47A EX AF,AF'       ;
 $C47B CALL M,$A028    ;
 $C47E RET P           ;
 $C47F LD (BC),A       ;
 $C480 NOP             ;
 $C481 RRCA            ;
 $C482 NOP             ;
 $C483 INC BC          ;
 $C484 NOP             ;
 $C485 NOP             ;
 $C486 NOP             ;
 $C487 AND B           ;
 $C488 ADD A,B         ;
 $C489 RET M           ;
 $C48A ADD A,B         ;
 $C48B RET PO          ;
 $C48C ADD A,B         ;
 $C48D ADD A,B         ;
 $C48E NOP             ;
 $C48F NOP             ;
 $C490 LD BC,$0700     ;
 $C493 NOP             ;
 $C494 EX AF,AF'       ;
 $C495 INC D           ;
 $C496 DAA             ;
 $C497 NOP             ;
 $C498 RET NZ          ;
 $C499 NOP             ;
 $C49A RET P           ;
 $C49B NOP             ;
 $C49C NOP             ;
 $C49D RET PO          ;
 $C49E LD D,B          ;
 $C49F DEC B           ;
 $C4A0 DEC B           ;
 $C4A1 DEC B           ;
 $C4A2 RLCA            ;
 $C4A3 EX AF,AF'       ;
 $C4A4 EX AF,AF'       ;
 $C4A5 DJNZ $C4A7      ;
*$C4A7 LD D,B          ;
 $C4A8 JR NZ,$C4EA     ;
 $C4AA ADD A,B         ;
 $C4AB ADD A,B         ;
 $C4AC LD B,B          ;
 $C4AD JR NC,$C4AF     ;
*$C4AF NOP             ;
 $C4B0 NOP             ;
 $C4B1 RRCA            ;
 $C4B2 DJNZ $C4BB      ;
 $C4B4 NOP             ;
 $C4B5 RRCA            ;
 $C4B6 NOP             ;
 $C4B7 NOP             ;
 $C4B8 NOP             ;
 $C4B9 RET M           ;
 $C4BA INC B           ;
*$C4BB RET P           ;
*$C4BC ADD A,B         ;
 $C4BD RET M           ;
 $C4BE ADD A,B         ;
 $C4BF EX AF,AF'       ;
 $C4C0 EX AF,AF'       ;
 $C4C1 DEC BC          ;
 $C4C2 INC B           ;
 $C4C3 NOP             ;
 $C4C4 CCF             ;
 $C4C5 NOP             ;
 $C4C6 NOP             ;
 $C4C7 ADD A,B         ;
 $C4C8 SUB B           ;
 $C4C9 RET PE          ;
 $C4CA ADC A,B         ;
 $C4CB ADC A,B         ;
 $C4CC CP $00          ;
 $C4CE NOP             ;
 $C4CF NOP             ;
 $C4D0 EX AF,AF'       ;
 $C4D1 INC E           ;
 $C4D2 LD HL,($081C)   ;
 $C4D5 EX AF,AF'       ;
 $C4D6 NOP             ;
*$C4D7 NOP             ;
 $C4D8 INC C           ;
 $C4D9 EX AF,AF'       ;
 $C4DA LD A,$08        ;
 $C4DC INC D           ;
 $C4DD LD ($0000),HL   ;
 $C4E0 LD A,(HL)       ;
 $C4E1 JR NZ,$C51F     ;
 $C4E3 INC H           ;
 $C4E4 INC H           ;
 $C4E5 LD C,B          ;
 $C4E6 NOP             ;
 $C4E7 NOP             ;
 $C4E8 NOP             ;
 $C4E9 NOP             ;
*$C4EA NOP             ;
 $C4EB NOP             ;
 $C4EC NOP             ;
 $C4ED NOP             ;
 $C4EE NOP             ;
 $C4EF NOP             ;
 $C4F0 LD (BC),A       ;
 $C4F1 LD BC,$0100     ;
 $C4F4 INC BC          ;
 $C4F5 INC BC          ;
 $C4F6 INC BC          ;
 $C4F7 LD (BC),A       ;
 $C4F8 LD (BC),A       ;
 $C4F9 LD (BC),A       ;
 $C4FA NOP             ;
 $C4FB NOP             ;
 $C4FC NOP             ;
 $C4FD NOP             ;
 $C4FE NOP             ;
 $C4FF LD A,(HL)       ;
 $C500 RST $38         ;
 $C501 RST $38         ;
 $C502 RST $38         ;
 $C503 LD H,(HL)       ;
 $C504 RST $38         ;
 $C505 RST $38         ;
 $C506 SBC A,C         ;
 $C507 CP E            ;
 $C508 RST $38         ;
 $C509 XOR E           ;
 $C50A LD A,(HL)       ;
 $C50B RST $38         ;
 $C50C LD B,D          ;
 $C50D RST $38         ;
 $C50E LD A,(HL)       ;
 $C50F NOP             ;
 $C510 JR NZ,$C492     ;
 $C512 NOP             ;
 $C513 ADD A,B         ;
 $C514 RET NZ          ;
 $C515 RET NZ          ;
 $C516 LD B,B          ;
 $C517 LD B,B          ;
 $C518 LD B,B          ;
 $C519 LD B,B          ;
 $C51A NOP             ;
 $C51B NOP             ;
 $C51C NOP             ;
 $C51D NOP             ;
 $C51E NOP             ;
*$C51F LD BC,$A201     ;
 $C522 AND D           ;
 $C523 RRA             ;
 $C524 LD DE,$1918     ;
 $C527 INC D           ;
 $C528 DEC D           ;
 $C529 JR $C544        ;
 $C52B RLA             ;
 $C52C LD (DE),A       ;
 $C52D INC DE          ;
 $C52E LD D,$17        ;
 $C530 RST $38         ;
 $C531 RRA             ;
 $C532 LD D,$17        ;
 $C534 CPL             ;
 $C535 INC D           ;
 $C536 DEC D           ;
 $C537 DJNZ $C54A      ;
 $C539 RLA             ;
 $C53A LD A,(DE)       ;
 $C53B DEC DE          ;
 $C53C RST $38         ;
 $C53D RRA             ;
 $C53E JR $C559        ;
 $C540 INC D           ;
 $C541 DEC D           ;
 $C542 JR $C554        ;
*$C544 LD DE,$162F     ;
 $C547 RLA             ;
 $C548 LD (DE),A       ;
 $C549 INC DE          ;
*$C54A RST $38         ;
 $C54B LD C,A          ;
 $C54C LD A,(DE)       ;
 $C54D DEC DE          ;
 $C54E LD D,$17        ;
 $C550 LD A,(DE)       ;
 $C551 LD (DE),A       ;
 $C552 INC DE          ;
 $C553 CPL             ;
*$C554 LD DE,$1918     ;
 $C557 INC E           ;
 $C558 RST $38         ;
*$C559 SBC A,A         ;
 $C55A JR $C575        ;
 $C55C CPL             ;
 $C55D INC DE          ;
 $C55E LD A,(DE)       ;
 $C55F DEC DE          ;
 $C560 RRA             ;
 $C561 DJNZ $C574      ;
 $C563 RST $38         ;
 $C564 LD C,A          ;
 $C565 INC E           ;
 $C566 DEC E           ;
 $C567 LD E,$1A        ;
 $C569 DEC DE          ;
 $C56A CPL             ;
 $C56B DEC E           ;
 $C56C LD E,$1C        ;
 $C56E DEC E           ;
 $C56F LD (DE),A       ;
 $C570 INC DE          ;
 $C571 LD E,$1D        ;
 $C573 RST $38         ;
*$C574 LD E,A          ;
*$C575 INC D           ;
 $C576 DEC D           ;
 $C577 LD L,A          ;
 $C578 INC D           ;
 $C579 DEC D           ;
 $C57A RST $38         ;
 $C57B LD E,A          ;
 $C57C DJNZ $C58F      ;
 $C57E LD D,$17        ;
 $C580 LD C,A          ;
 $C581 DEC E           ;
 $C582 LD E,$16        ;
 $C584 RLA             ;
 $C585 INC E           ;
 $C586 RST $38         ;
 $C587 INC D           ;
 $C588 DEC D           ;
 $C589 JR $C5A4        ;
 $C58B LD (DE),A       ;
 $C58C INC DE          ;
 $C58D LD A,(DE)       ;
 $C58E DEC DE          ;
*$C58F CPL             ;
 $C590 DJNZ $C5A3      ;
 $C592 INC D           ;
 $C593 DEC D           ;
 $C594 JR $C5AF        ;
 $C596 RST $38         ;
 $C597 RRA             ;
 $C598 LD D,$17        ;
 $C59A LD A,(DE)       ;
 $C59B DEC DE          ;
 $C59C LD D,$17        ;
 $C59E LD (DE),A       ;
 $C59F INC DE          ;
 $C5A0 CPL             ;
 $C5A1 LD (DE),A       ;
 $C5A2 INC DE          ;
*$C5A3 LD D,$17        ;
 $C5A5 LD A,(DE)       ;
 $C5A6 DEC DE          ;
 $C5A7 RST $38         ;
 $C5A8 CPL             ;
 $C5A9 DEC E           ;
 $C5AA DJNZ $C5BD      ;
 $C5AC INC D           ;
 $C5AD DEC D           ;
 $C5AE JR $C5C9        ;
 $C5B0 RST $38         ;
 $C5B1 CP A            ;
 $C5B2 LD (DE),A       ;
 $C5B3 INC DE          ;
 $C5B4 LD D,$17        ;
 $C5B6 DJNZ $C5C9      ;
 $C5B8 CPL             ;
 $C5B9 DJNZ $C5CC      ;
 $C5BB JR $C5D6        ;
*$C5BD RST $38         ;
 $C5BE SBC A,A         ;
 $C5BF LD (DE),A       ;
 $C5C0 INC DE          ;
 $C5C1 CPL             ;
 $C5C2 LD (DE),A       ;
 $C5C3 INC DE          ;
 $C5C4 INC D           ;
 $C5C5 DEC D           ;
 $C5C6 JR $C5E1        ;
 $C5C8 DJNZ $C5DB      ;
 $C5CA RST $38         ;
 $C5CB JR $C5E6        ;
 $C5CD SBC A,A         ;
 $C5CE LD D,$17        ;
 $C5D0 LD A,(DE)       ;
 $C5D1 DEC DE          ;
 $C5D2 LD (DE),A       ;
 $C5D3 INC DE          ;
 $C5D4 RST $18         ;
 $C5D5 INC E           ;
*$C5D6 LD E,$1A        ;
 $C5D8 DEC DE          ;
 $C5D9 DEC E           ;
 $C5DA INC E           ;
*$C5DB LD E,$FF        ;
 $C5DD RST $38         ;
 $C5DE LD L,A          ;
 $C5DF DEC L           ;
 $C5E0 INC E           ;
*$C5E1 LD E,$1D        ;
 $C5E3 RST $38         ;
 $C5E4 CCF             ;
 $C5E5 INC D           ;
*$C5E6 DEC D           ;
 $C5E7 DJNZ $C5FA      ;
 $C5E9 JR $C604        ;
 $C5EB INC D           ;
 $C5EC CPL             ;
 $C5ED LD E,$1C        ;
 $C5EF DEC E           ;
 $C5F0 INC E           ;
 $C5F1 LD E,$FF        ;
 $C5F3 CPL             ;
 $C5F4 JR $C60C        ;
 $C5F6 RLA             ;
 $C5F7 LD (DE),A       ;
 $C5F8 INC DE          ;
 $C5F9 LD A,(DE)       ;
*$C5FA DEC DE          ;
 $C5FB LD D,$FF        ;
 $C5FD SBC A,A         ;
 $C5FE LD A,(DE)       ;
 $C5FF DEC DE          ;
 $C600 LD (DE),A       ;
 $C601 INC DE          ;
 $C602 LD D,$17        ;
*$C604 LD (DE),A       ;
 $C605 INC DE          ;
 $C606 RRA             ;
 $C607 NOP             ;
 $C608 SUB $70         ;
 $C60A XOR $D4         ;
*$C60C LD L,B          ;
 $C60D AND $47         ;
 $C60F LD SP,HL        ;
*$C610 JP P,$886A      ;
 $C613 LD E,C          ;
 $C614 OR $16          ;
 $C616 DAA             ;
 $C617 LD H,E          ;
 $C618 JR C,$C610      ;
 $C61A LD D,$54        ;
 $C61C DAA             ;
 $C61D LD H,E          ;
 $C61E OR $46          ;
 $C620 LD D,H          ;
 $C621 DAA             ;
 $C622 LD D,B          ;
 $C623 INC DE          ;
 $C624 OR $96          ;
 $C626 DAA             ;
 $C627 LD D,B          ;
 $C628 LD D,$25        ;
 $C62A OR $46          ;
 $C62C LD SP,$6427     ;
 $C62F DEC H           ;
 $C630 INC H           ;
 $C631 OR $56          ;
 $C633 DAA             ;
 $C634 LD H,(HL)       ;
 $C635 DEC H           ;
 $C636 OR $56          ;
 $C638 INC HL          ;
 $C639 DAA             ;
 $C63A LD B,(HL)       ;
 $C63B DAA             ;
 $C63C DEC H           ;
 $C63D RLA             ;
 $C63E OR $48          ;
 $C640 LD B,E          ;
 $C641 ADD A,L         ;
 $C642 OR $16          ;
 $C644 ADC A,B         ;
 $C645 ADD A,L         ;
 $C646 OR $16          ;
 $C648 JR Z,$C6B3      ;
 $C64A OR $B6          ;
 $C64C LD C,C          ;
 $C64D LD ($F661),HL   ;
 $C650 SUB (HL)        ;
 $C651 LD ($6341),HL   ;
 $C654 OR $24          ;
 $C656 SUB (HL)        ;
 $C657 LD H,E          ;
 $C658 SUB $25         ;
 $C65A INC H           ;
 $C65B DEC (HL)        ;
 $C65C OR $C6          ;
 $C65E INC H           ;
 $C65F HALT            ;
 $C660 LD E,B          ;
 $C661 OR $36          ;
 $C663 LD (HL),H       ;
 $C664 LD A,B          ;
 $C665 OR $26          ;
 $C667 DJNZ $C6DD      ;
 $C669 OR $96          ;
 $C66B SUB B           ;
 $C66C NOP             ;
 $C66D LD (HL),$40     ;
 $C66F LD L,$40        ;
 $C671 LD (HL),$4C     ;
 $C673 LD (HL),$60     ;
 $C675 LD E,$04        ;
 $C677 LD A,(BC)       ;
 $C678 LD C,H          ;
 $C679 LD A,$50        ;
 $C67B LD A,(BC)       ;
 $C67C JR $C688        ;
 $C67E LD D,B          ;
 $C67F LD A,(DE)       ;
 $C680 EX AF,AF'       ;
 $C681 LD D,$3C        ;
 $C683 LD B,D          ;
 $C684 LD B,B          ;
 $C685 LD B,D          ;
 $C686 LD B,B          ;
 $C687 LD HL,($3260)   ;
 $C68A LD H,B          ;
 $C68B LD ($0A3C),A    ;
 $C68E INC H           ;
 $C68F LD A,(DE)       ;
 $C690 INC (HL)        ;
 $C691 LD E,$6C        ;
 $C693 LD A,(BC)       ;
 $C694 INC E           ;
 $C695 LD D,$48        ;
 $C697 LD A,($2A44)    ;
 $C69A LD E,B          ;
 $C69B LD H,$00        ;
; This entry point is used by the routine at #R$C172.
*$C69D CALL $9619      ;
 $C6A0 AND $3C         ;
 $C6A2 LD E,A          ;
 $C6A3 LD D,$00        ;
 $C6A5 LD HL,$7530     ;
 $C6A8 ADD HL,DE       ;
 $C6A9 CALL $9619      ;
 $C6AC AND $1C         ;
 $C6AE LD B,A          ;
 $C6AF LD IX,$7639     ;
*$C6B3 ADD IX,DE       ;
 $C6B5 ADD A,E         ;
 $C6B6 CP $70          ;
 $C6B8 JR C,$C6BE      ;
 $C6BA LD A,$70        ;
 $C6BC SUB E           ;
 $C6BD LD B,A          ;
*$C6BE LD A,($99A5)    ;
 $C6C1 BIT 7,A         ;
 $C6C3 JR Z,$C70E      ;
 $C6C5 LD DE,$00B0     ;
 $C6C8 ADD HL,DE       ;
 $C6C9 LD DE,$FFA8     ;
 $C6CC LD A,(IX-$01)   ;
 $C6CF SUB (IX+$00)    ;
 $C6D2 CP $01          ;
 $C6D4 RET Z           ;
*$C6D5 LD A,(IX+$00)   ;
 $C6D8 CP $F8          ;
 $C6DA JR Z,$C6ED      ;
 $C6DC DEC (IX+$00)    ;
 $C6DF PUSH HL         ;
 $C6E0 SLA (HL)        ;
 $C6E2 PUSH AF         ;
 $C6E3 ADD HL,DE       ;
 $C6E4 POP AF          ;
 $C6E5 RL (HL)         ;
 $C6E7 PUSH AF         ;
 $C6E8 ADD HL,DE       ;
 $C6E9 POP AF          ;
 $C6EA RL (HL)         ;
 $C6EC POP HL          ;
*$C6ED INC HL          ;
 $C6EE INC IX          ;
 $C6F0 LD A,$20        ;
 $C6F2 CP L            ;
 $C6F3 JR Z,$C704      ;
 $C6F5 DJNZ $C6D5      ;
 $C6F7 LD A,(IX+$00)   ;
 $C6FA SUB (IX-$01)    ;
 $C6FD CP $02          ;
 $C6FF RET NZ          ;
 $C700 LD B,$01        ;
 $C702 JR $C6D5        ;
*$C704 LD A,(IX+$00)   ;
 $C707 CP $FA          ;
 $C709 RET Z           ;
 $C70A LD B,$10        ;
 $C70C JR $C6D5        ;
*$C70E LD A,(IX+$00)   ;
 $C711 SUB (IX-$01)    ;
 $C714 CP $01          ;
 $C716 RET Z           ;
 $C717 LD DE,$0058     ;
*$C71A LD A,(IX+$00)   ;
 $C71D CP $08          ;
 $C71F JR Z,$C732      ;
 $C721 INC (IX+$00)    ;
 $C724 PUSH HL         ;
 $C725 SRL (HL)        ;
 $C727 PUSH AF         ;
 $C728 ADD HL,DE       ;
 $C729 POP AF          ;
 $C72A RR (HL)         ;
 $C72C PUSH AF         ;
 $C72D ADD HL,DE       ;
 $C72E POP AF          ;
 $C72F RR (HL)         ;
 $C731 POP HL          ;
*$C732 INC HL          ;
 $C733 INC IX          ;
 $C735 LD A,$70        ;
 $C737 CP L            ;
 $C738 JR Z,$C749      ;
 $C73A DJNZ $C71A      ;
 $C73C LD A,(IX+$00)   ;
 $C73F SUB (IX-$01)    ;
 $C742 CP $FE          ;
 $C744 RET NZ          ;
 $C745 LD B,$01        ;
 $C747 JR $C71A        ;
*$C749 LD A,(IX+$00)   ;
 $C74C CP $06          ;
 $C74E RET Z           ;
 $C74F LD B,$10        ;
 $C751 JR $C71A        ;

; Sub-Game Data: Moscow
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8EE1)(moscow) }
; UDGTABLE#
; #POPS
@label=Moscow_Data
b$C753 DEFB $EA,$C8,$6A,$C8,$6F,$C9,$D4,$C9
 $C75B DEFB $07,$C0,$C9
 $C75E DEFW $AA7D
@label=Moscow_SubGame
 $C760 DEFW $C7B6
@label=Moscow_SetUp
 $C762 DEFW $C77F
 $C764 DEFB $20,$7C,$69,$C8,$01,$00,$10,$00
 $C76C DEFB $20,$00,$00,$50,$00,$4B,$20,$73
 $C774 DEFB $E8,$9F,$40,$72,$73,$AA,$80,$7B
 $C77C DEFB $7F,$00,$06

; Initialise: Moscow
@label=Moscow_Initialise
c$C77F LD HL,$7AC4   ; #REGhl=#N$7AC4.
 $C782 LD A,$00      ; {Write #N$00 to *#R$99AA.
 $C784 LD ($99AA),A  ; }
 $C787 LD BC,$0408   ; #REGbc=#N$0408.
@label=Moscow_Initialise_Loop
*$C78A LD IX,($99E3) ; #REGix=*#R$99E3.
 $C78E LD (IX+$04),L ; Write #REGl to *#REGix+#N$04.
 $C791 LD (IX+$05),H ; Write #REGh to *#REGix+#N$05.
 $C794 LD (IX+$06),C ; Write #REGc to *#REGix+#N$06.
 $C797 LD (IX+$07),B ; Write #REGb to *#REGix+#N$07.
 $C79A PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $C79B PUSH BC       ; }
 $C79C LD HL,($99E3) ; #REGhl=*#R$99E3.
 $C79F CALL $9439    ; Call #R$9439.
 $C7A2 CALL $9929    ; Call #R$9929.
 $C7A5 LD HL,($99E3) ; #REGhl=*#R$99E3.
 $C7A8 LD DE,$0038   ; {#REGhl+=#N($0038,$04,$04).
 $C7AB ADD HL,DE     ; }
 $C7AC LD ($99E3),HL ; Write #REGhl to *#R$99E3.
 $C7AF POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $C7B0 POP HL        ; }
 $C7B1 INC HL        ; {Increment #REGhl by two.
 $C7B2 INC HL        ; }
 $C7B3 DJNZ $C78A    ; Decrease counter by one and loop back to #R$C78A until
                     ; counter is zero.
 $C7B5 RET           ; Return.

; Handler: Moscow
@label=Handler_Moscow
c$C7B6 CALL $C854     ;
 $C7B9 LD A,($7207)   ;
 $C7BC CP $02         ;
 $C7BE JR Z,$C7C3     ;
 $C7C0 CP $04         ;
 $C7C2 RET NZ         ;
*$C7C3 LD HL,($99E3)  ;
 $C7C6 LD DE,$0038    ;
 $C7C9 ADD HL,DE      ;
 $C7CA LD A,$74       ;
 $C7CC CP H           ;
 $C7CD JR NZ,$C7D2    ;
 $C7CF LD HL,$7320    ;
*$C7D2 LD ($99E3),HL  ;
 $C7D5 CALL $9439     ;
 $C7D8 LD IX,($99E3)  ;
 $C7DC BIT 5,(IX+$06) ;
 $C7E0 JR Z,$C7E9     ;
 $C7E2 RES 5,(IX+$06) ;
 $C7E6 JP $9926       ;
*$C7E9 DEC (IX+$07)   ;
 $C7EC JR NZ,$C80A    ;
 $C7EE CALL $97D7     ;
 $C7F1 LD A,H         ;
 $C7F2 CP L           ;
 $C7F3 LD A,C         ;
 $C7F4 JR C,$C7F7     ;
 $C7F6 LD A,B         ;
*$C7F7 CP (IX+$06)    ;
 $C7FA JR NZ,$C801    ;
 $C7FC CALL $C846     ;
 $C7FF JR $C80A       ;
*$C801 LD (IX+$06),A  ;
 $C804 CALL $C846     ;
 $C807 JP $9926       ;
*$C80A LD L,(IX+$01)  ;
 $C80D LD H,(IX+$02)  ;
 $C810 CALL $9375     ;
 $C813 AND $61        ;
 $C815 JR NZ,$C824    ;
 $C817 LD (IX+$04),L  ;
 $C81A LD (IX+$05),H  ;
 $C81D SET 5,(IX+$06) ;
 $C821 JP $9926       ;

; Handler: Moscow2
;
; Used by the routine at #R$C7B6.
;
; .
;
; See #POKE#moscow(You Are Not Deported From Moscow).
@label=Handler_Moscow2
c$C824 CP $40        ; {Jump to #R$C832 if #REGa is not equal to #N$40.
 $C826 JR NZ,$C832   ; }
 $C828 LD HL,$EFFA   ; #REGhl=#R$EFFA.
 $C82B SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $C82D LD SP,($99AE) ; #REGsp=*#N$99AE.
 $C831 RET           ; Return.
*$C832 CALL $97D7    ; Call #R$97D7.
 $C835 LD A,(IX+$06) ; #REGa=*#REGix+#N$06.
 $C838 CP C          ; Compare #REGa with #REGc.
 $C839 LD A,C        ; #REGa=#REGc.
 $C83A JR NZ,$C83D   ; Jump to #R$C83D if #REGa is not zero.
 $C83C LD A,B        ; {Write #REGb to *#REGix+#N$06.
*$C83D LD (IX+$06),A ; }
 $C840 CALL $C846    ; Call #R$C846.
 $C843 JP $9926      ; Jump to #R$9926.
; This entry point is used by the routine at #R$C7B6.
*$C846 CALL $9619    ; Call #R$9619.
 $C849 AND %00000011 ; Keep only bits 0-1.
 $C84B INC A         ; Increment #REGa by one.
 $C84C LD IX,($99E3) ; #REGix=*#R$99E3.
 $C850 LD (IX+$07),A ; Write #REGa to *#REGix+#N$07.
 $C853 RET           ; Return.
; This entry point is used by the routine at #R$C7B6.
*$C854 LD A,$00      ; {Write #N$00 to *#R$99AA.
 $C856 LD ($99AA),A  ; }
 $C859 CALL $980E    ; Call #R$980E.
 $C85C CALL $98AB    ; Call #R$98AB.
 $C85F LD B,$78      ; #REGb=#N$78.
 $C861 LD A,C        ; #REGa=#REGc.
 $C862 OR %11000000  ; Set bits 6-7.
 $C864 LD C,A        ; #REGc=#REGa.
 $C865 CALL $98F2    ; Call #R$98F2.
 $C868 RET           ; Return.

; Data block at C869
b$C869 DEFB $A0,$00,$00,$E0,$00,$00,$00,$00
 $C871 DEFB $00,$FF,$F0,$E0,$C0,$C0,$00,$00
 $C879 DEFB $00,$FF,$7F,$3F,$1F,$1F,$00,$07
 $C881 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $C889 DEFB $00,$FF,$FF,$07,$7F,$7F,$7F,$7F
 $C891 DEFB $07,$00,$00,$FF,$00,$00,$FF,$00
 $C899 DEFB $00,$20,$20,$20,$00,$00,$00,$00
 $C8A1 DEFB $00,$24,$24,$24,$24,$24,$24,$24
 $C8A9 DEFB $24,$E0,$C0,$C0,$80,$80,$80,$00
 $C8B1 DEFB $00,$FF,$FF,$FF,$FE,$FC,$F8,$F0
 $C8B9 DEFB $E0,$F8,$C0,$00,$00,$00,$00,$00
 $C8C1 DEFB $00,$1F,$03,$00,$00,$00,$00,$00
 $C8C9 DEFB $00,$FF,$FF,$FF,$7F,$3F,$1F,$0F
 $C8D1 DEFB $07,$07,$03,$03,$01,$01,$01,$00
 $C8D9 DEFB $00,$00,$00,$3F,$20,$20,$27,$24
 $C8E1 DEFB $24,$00,$00,$00,$00,$00,$00,$00
 $C8E9 DEFB $00,$1F,$12,$11,$12,$11,$12,$11
 $C8F1 DEFB $12,$65,$1F,$11,$12,$11,$12,$11
 $C8F9 DEFB $12,$11,$12,$11,$12,$1F,$12,$45
 $C901 DEFB $2F,$13,$1F,$13,$1F,$13,$1F,$13
 $C909 DEFB $11,$12,$11,$12,$11,$12,$1F,$1F
 $C911 DEFB $13,$1F,$13,$1F,$13,$1F,$13,$1F
 $C919 DEFB $13,$1F,$55,$2F,$74,$1F,$13,$1F
 $C921 DEFB $13,$1F,$13,$1F,$B4,$7F,$75,$64
 $C929 DEFB $C5,$1F,$11,$12,$11,$12,$3F,$19
 $C931 DEFB $1A,$1B,$1C,$2F,$65,$1F,$1E,$25
 $C939 DEFB $10,$1E,$25,$10,$1E,$25,$1F,$1E
 $C941 DEFB $25,$10,$3F,$18,$2F,$1D,$3F,$1E
 $C949 DEFB $25,$10,$2F,$17,$3F,$17,$3F,$17
 $C951 DEFB $3F,$17,$DF,$17,$5F,$17,$3F,$17
 $C959 DEFB $3F,$17,$3F,$17,$DF,$17,$5F,$16
 $C961 DEFB $3F,$16,$3F,$16,$3F,$16,$DF,$16
 $C969 DEFB $0F,$FF,$FF,$FF,$9F,$00,$80,$64
 $C971 DEFB $18,$41,$60,$24,$51,$E0,$18,$41
 $C979 DEFB $60,$74,$E0,$18,$41,$70,$74,$78
 $C981 DEFB $60,$C8,$14,$50,$22,$47,$22,$68
 $C989 DEFB $53,$72,$14,$53,$22,$47,$82,$53
 $C991 DEFB $72,$14,$53,$22,$47,$82,$53,$72
 $C999 DEFB $14,$53,$22,$47,$82,$53,$72,$14
 $C9A1 DEFB $53,$85,$62,$56,$75,$14,$15,$46
 $C9A9 DEFB $F5,$B5,$14,$56,$F5,$F5,$F5,$F5
 $C9B1 DEFB $F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5
 $C9B9 DEFB $F5,$F5,$F5,$F5,$F5,$15,$00,$FF
 $C9C1 DEFB $FF,$FF,$97,$12,$6B,$08,$12,$08
 $C9C9 DEFB $1B,$30,$06,$7C,$07,$FC,$FC,$FC
 $C9D1 DEFB $FC,$24,$00,$47,$07,$50,$10,$78
 $C9D9 DEFB $70,$30,$42,$38

; Sub-Game Data: Alice Springs
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F48)(alice-springs) }
; UDGTABLE#
; #POPS
@label=AliceSprings_Data
b$C9DD DEFB $4E,$CE,$16,$CE,$12,$CF,$0F,$CF
 $C9E5 DEFB $07,$5B,$CF
 $C9E8 DEFW $D1D7
@label=AliceSprings_SubGame
 $C9EA DEFW $CBA7                           ; Location subgame routine.
@label=AliceSprings_SetUp
 $C9EC DEFW $CA09                           ; Initialisation routine.
 $C9EE DEFB $1C,$7B,$C6,$CA,$01,$00,$20,$00
 $C9F6 DEFB $50,$00,$00,$50,$00,$28,$40,$72
 $C9FE DEFB $C0,$CF,$00,$00,$00,$00,$00,$00
 $CA06 DEFB $00,$07,$07

; Routine at CA09
c$CA09 LD HL,$6B40     ;
 $CA0C LD (HL),$07     ;
 $CA0E LD C,$06        ;
 $CA10 LD DE,$0006     ;
 $CA13 ADD HL,DE       ;
*$CA14 LD B,$04        ;
*$CA16 PUSH BC         ;
 $CA17 LD B,$05        ;
*$CA19 LD (HL),$05     ;
 $CA1B ADD HL,DE       ;
 $CA1C DJNZ $CA19      ;
 $CA1E LD (HL),$06     ;
 $CA20 ADD HL,DE       ;
 $CA21 LD (HL),$06     ;
 $CA23 ADD HL,DE       ;
 $CA24 POP BC          ;
 $CA25 DJNZ $CA16      ;
 $CA27 LD (HL),$05     ;
 $CA29 ADD HL,DE       ;
 $CA2A LD (HL),$05     ;
 $CA2C ADD HL,DE       ;
 $CA2D LD (HL),$07     ;
 $CA2F ADD HL,DE       ;
 $CA30 LD (HL),$07     ;
 $CA32 ADD HL,DE       ;
 $CA33 DEC C           ;
 $CA34 JR NZ,$CA14     ;
 $CA36 LD C,$04        ;
*$CA38 LD B,$05        ;
*$CA3A LD (HL),$05     ;
 $CA3C ADD HL,DE       ;
 $CA3D DJNZ $CA3A      ;
 $CA3F LD (HL),$07     ;
 $CA41 ADD HL,DE       ;
 $CA42 LD (HL),$07     ;
 $CA44 ADD HL,DE       ;
 $CA45 DEC C           ;
 $CA46 JR NZ,$CA38     ;
 $CA48 LD B,$23        ;
*$CA4A LD (HL),$07     ;
 $CA4C ADD HL,DE       ;
 $CA4D DJNZ $CA4A      ;
 $CA4F LD HL,$7244     ;
 $CA52 LD C,$04        ;
 $CA54 LD A,$42        ;
 $CA56 LD DE,$0038     ;
*$CA59 LD B,$04        ;
 $CA5B PUSH AF         ;
*$CA5C LD (HL),A       ;
 $CA5D ADD A,$0E       ;
 $CA5F ADD HL,DE       ;
 $CA60 DJNZ $CA5C      ;
 $CA62 POP AF          ;
 $CA63 ADD A,$02       ;
 $CA65 DEC C           ;
 $CA66 JR NZ,$CA59     ;
 $CA68 LD A,$07        ;
 $CA6A LD ($99AA),A    ;
 $CA6D LD B,$04        ;
 $CA6F LD HL,$79C6     ;
 $CA72 LD IX,$75C0     ;
*$CA76 PUSH BC         ;
 $CA77 CALL $CAA1      ;
 $CA7A LD DE,$0004     ;
 $CA7D ADD HL,DE       ;
 $CA7E LD DE,$0048     ;
 $CA81 ADD IX,DE       ;
 $CA83 CALL $CAA1      ;
 $CA86 LD DE,$000A     ;
 $CA89 ADD HL,DE       ;
 $CA8A LD DE,$0048     ;
 $CA8D ADD IX,DE       ;
 $CA8F POP BC          ;
 $CA90 DJNZ $CA76      ;
 $CA92 LD DE,$7240     ;
 $CA95 LD ($723B),DE   ;
 $CA99 LD DE,$75C0     ;
 $CA9C LD ($7239),DE   ;
 $CAA0 RET             ;
*$CAA1 LD (IX+$04),L   ;
 $CAA4 LD (IX+$05),H   ;
 $CAA7 LD (IX+$06),$08 ;
 $CAAB LD (IX+$00),$00 ;
 $CAAF LD ($99E3),IX   ;
 $CAB3 LD DE,$0008     ;
 $CAB6 ADD IX,DE       ;
 $CAB8 LD ($99B8),IX   ;
 $CABC PUSH HL         ;
 $CABD CALL $9929      ;
 $CAC0 LD IX,($99E3)   ;
 $CAC4 POP HL          ;
 $CAC5 RET             ;
 $CAC6 LD D,E          ;
 $CAC7 LD L,B          ;
 $CAC8 LD L,A          ;
 $CAC9 HALT            ;
 $CACA LD H,L          ;
 $CACB JR NZ,$CB3C     ;
 $CACD LD H,(HL)       ;
 $CACE LD H,(HL)       ;
 $CACF JR NZ,$CB44     ;
 $CAD1 LD (HL),B       ;
 $CAD2 LD L,A          ;
 $CAD3 LD (HL),D       ;
 $CAD4 LD (HL),H       ;
 $CAD5 LD L,$A0        ;
*$CAD7 LD HL,($723B)   ;
 $CADA LD DE,$0038     ;
 $CADD ADD HL,DE       ;
 $CADE LD A,$C0        ;
 $CAE0 CP L            ;
 $CAE1 JR NZ,$CAE6     ;
 $CAE3 LD HL,$7240     ;
*$CAE6 LD ($723B),HL   ;
 $CAE9 LD IX,($723B)   ;
 $CAED LD A,(HL)       ;
 $CAEE CP $00          ;
 $CAF0 JR NZ,$CB1F     ;
 $CAF2 CALL $9439      ;
 $CAF5 LD (IX+$05),$7D ;
 $CAF9 LD A,(IX+$04)   ;
 $CAFC AND $3E         ;
 $CAFE OR $80          ;
 $CB00 LD (IX+$04),A   ;
 $CB03 LD L,A          ;
 $CB04 LD A,$38        ;
 $CB06 LD (IX+$06),A   ;
 $CB09 LD (IX+$07),$01 ;
 $CB0D LD H,$7D        ;
 $CB0F CALL $9378      ;
 $CB12 AND $62         ;
 $CB14 RET NZ          ;
 $CB15 LD (IX+$00),$80 ;
 $CB19 LD (IX+$04),L   ;
 $CB1C JP $CDFA        ;
*$CB1F CP $80          ;
 $CB21 RET NZ          ;
 $CB22 CALL $9439      ;
 $CB25 BIT 5,(IX+$06)  ;
 $CB29 JR Z,$CB32      ;
 $CB2B RES 5,(IX+$06)  ;
 $CB2F JP $CDDE        ;
*$CB32 DEC (IX+$07)    ;
 $CB35 JR Z,$CB51      ;
 $CB37 LD L,(IX+$04)   ;
 $CB3A LD H,(IX+$05)   ;
 $CB3D CALL $9375      ;
 $CB40 AND $62         ;
 $CB42 JR NZ,$CB51     ;
*$CB44 LD (IX+$04),L   ;
 $CB47 LD (IX+$05),H   ;
 $CB4A SET 5,(IX+$06)  ;
 $CB4E JP $CDDE        ;
*$CB51 CALL $97D7      ;
 $CB54 LD A,$07        ;
 $CB56 CP H            ;
 $CB57 JR C,$CB72      ;
 $CB59 CP L            ;
 $CB5A JR C,$CB72      ;
 $CB5C LD A,(IX+$06)   ;
 $CB5F AND $18         ;
 $CB61 CP B            ;
 $CB62 JR Z,$CB6C      ;
 $CB64 LD A,B          ;
 $CB65 XOR $10         ;
 $CB67 CALL $CB7F      ;
 $CB6A JR $CB72        ;
*$CB6C LD A,C          ;
 $CB6D XOR $10         ;
 $CB6F CALL $CB7F      ;
*$CB72 CALL $9619      ;
 $CB75 LD IX,($723B)   ;
 $CB79 AND $18         ;
 $CB7B CALL $CB7F      ;
 $CB7E RET             ;
*$CB7F PUSH AF         ;
 $CB80 LD L,(IX+$04)   ;
 $CB83 LD H,(IX+$05)   ;
 $CB86 CALL $9378      ;
 $CB89 AND $62         ;
 $CB8B POP DE          ;
 $CB8C RET NZ          ;
 $CB8D LD (IX+$04),L   ;
 $CB90 LD (IX+$05),H   ;
 $CB93 POP HL          ;
 $CB94 LD A,($99A5)    ;
 $CB97 AND $03         ;
 $CB99 JR NZ,$CB9C     ;
 $CB9B INC A           ;
*$CB9C LD (IX+$07),A   ;
 $CB9F SET 5,D         ;
 $CBA1 LD (IX+$06),D   ;
 $CBA4 JP $CDDE        ;
 $CBA7 CALL $CAD7      ;
 $CBAA LD HL,($7239)   ;
 $CBAD LD DE,$0048     ;
 $CBB0 ADD HL,DE       ;
 $CBB1 LD A,$00        ;
 $CBB3 CP L            ;
 $CBB4 JR NZ,$CBB9     ;
 $CBB6 LD HL,$75C0     ;
*$CBB9 LD ($7239),HL   ;
 $CBBC LD IX,($7239)   ;
 $CBC0 LD A,(HL)       ;
 $CBC1 CP $00          ;
 $CBC3 JR Z,$CBE3      ;
 $CBC5 CP $01          ;
 $CBC7 JP Z,$CC5E      ;
 $CBCA CP $02          ;
 $CBCC JP Z,$CCBA      ;
 $CBCF CP $03          ;
 $CBD1 JP Z,$CD19      ;
 $CBD4 CP $04          ;
 $CBD6 JP Z,$CD6E      ;
 $CBD9 CP $05          ;
 $CBDB JP Z,$CDBD      ;
 $CBDE LD SP,($99AE)   ;
 $CBE2 RET             ;
*$CBE3 CALL $9439      ;
 $CBE6 BIT 5,(IX+$06)  ;
 $CBEA JR Z,$CBF3      ;
 $CBEC RES 5,(IX+$06)  ;
 $CBF0 JP $CDEC        ;
*$CBF3 LD L,(IX+$04)   ;
 $CBF6 LD H,(IX+$05)   ;
 $CBF9 CALL $9375      ;
 $CBFC AND $42         ;
 $CBFE JR Z,$CC0E      ;
 $CC00 AND $02         ;
 $CC02 JR NZ,$CC1B     ;
 $CC04 LD HL,$7200     ;
 $CC07 SET 4,(HL)      ;
 $CC09 RES 5,(IX+$06)  ;
 $CC0D RET             ;
*$CC0E LD (IX+$04),L   ;
 $CC11 LD (IX+$05),H   ;
 $CC14 SET 5,(IX+$06)  ;
 $CC18 JP $CDEC        ;
*$CC1B LD (IX+$00),$01 ;
 $CC1F LD A,(IX+$04)   ;
 $CC22 SUB $42         ;
 $CC24 LD C,A          ;
 $CC25 SLA A           ;
 $CC27 ADD A,C         ;
 $CC28 ADD A,$C1       ;
 $CC2A LD H,$69        ;
 $CC2C LD L,A          ;
 $CC2D JR NC,$CC30     ;
 $CC2F INC H           ;
*$CC30 LD (IX+$1F),L   ;
 $CC33 LD (IX+$27),H   ;
 $CC36 LD DE,$CE42     ;
 $CC39 LD (HL),$00     ;
 $CC3B INC HL          ;
 $CC3C INC HL          ;
 $CC3D INC HL          ;
 $CC3E LD (HL),$64     ;
 $CC40 LD BC,$00BD     ;
 $CC43 ADD HL,BC       ;
 $CC44 LD (HL),$00     ;
 $CC46 INC HL          ;
 $CC47 LD (HL),E       ;
 $CC48 INC HL          ;
 $CC49 LD (HL),D       ;
*$CC4A LD L,(IX+$04)   ;
 $CC4D LD H,(IX+$05)   ;
 $CC50 DEC L           ;
 $CC51 DEC L           ;
 $CC52 PUSH HL         ;
 $CC53 CALL $9914      ;
 $CC56 POP HL          ;
 $CC57 LD DE,$0040     ;
 $CC5A ADD HL,DE       ;
 $CC5B JP $9914        ;
*$CC5E LD L,(IX+$04)   ;
 $CC61 LD H,(IX+$05)   ;
 $CC64 LD DE,$007E     ;
 $CC67 ADD HL,DE       ;
 $CC68 EX DE,HL        ;
 $CC69 LD B,$10        ;
 $CC6B LD IX,$7240     ;
*$CC6F PUSH BC         ;
 $CC70 LD L,(IX+$04)   ;
 $CC73 LD H,(IX+$05)   ;
 $CC76 AND A           ;
 $CC77 SBC HL,DE       ;
 $CC79 JR Z,$CC84      ;
 $CC7B LD BC,$0038     ;
 $CC7E ADD IX,BC       ;
 $CC80 POP BC          ;
 $CC81 DJNZ $CC6F      ;
 $CC83 RET             ;
*$CC84 POP BC          ;
 $CC85 BIT 5,(IX+$06)  ;
 $CC89 RET NZ          ;
 $CC8A PUSH IX         ;
 $CC8C PUSH IX         ;
 $CC8E POP HL          ;
 $CC8F CALL $9439      ;
 $CC92 LD (IX+$06),$38 ;
 $CC96 LD (IX+$00),$81 ;
 $CC9A LD A,(IX+$04)   ;
 $CC9D SUB $40         ;
 $CC9F LD (IX+$04),A   ;
 $CCA2 JR NC,$CCA7     ;
 $CCA4 DEC (IX+$05)    ;
*$CCA7 CALL $CDDE      ;
 $CCAA LD IX,($7239)   ;
 $CCAE POP DE          ;
 $CCAF LD (IX+$0F),E   ;
 $CCB2 LD (IX+$17),D   ;
 $CCB5 LD (IX+$00),$02 ;
 $CCB9 RET             ;
*$CCBA LD L,(IX+$0F)   ;
 $CCBD LD H,(IX+$17)   ;
 $CCC0 PUSH HL         ;
 $CCC1 POP IX          ;
 $CCC3 CALL $9439      ;
 $CCC6 BIT 5,(IX+$06)  ;
 $CCCA JR Z,$CCD3      ;
 $CCCC RES 5,(IX+$06)  ;
 $CCD0 JP $CDDE        ;
*$CCD3 LD L,(IX+$04)   ;
 $CCD6 LD H,(IX+$05)   ;
 $CCD9 CALL $9375      ;
 $CCDC BIT 6,A         ;
 $CCDE JR NZ,$CD56     ;
 $CCE0 CALL $CE08      ;
 $CCE3 LD IX,($7239)   ;
 $CCE7 LD L,(IX+$1F)   ;
 $CCEA LD H,(IX+$27)   ;
 $CCED LD (HL),$02     ;
 $CCEF INC HL          ;
 $CCF0 INC HL          ;
 $CCF1 INC HL          ;
 $CCF2 LD (HL),$44     ;
 $CCF4 LD DE,$00BD     ;
 $CCF7 ADD HL,DE       ;
 $CCF8 LD DE,$CE3E     ;
 $CCFB LD (HL),$01     ;
 $CCFD INC HL          ;
 $CCFE LD (HL),E       ;
 $CCFF INC HL          ;
 $CD00 LD (HL),D       ;
 $CD01 CALL $CC4A      ;
 $CD04 LD HL,($7239)   ;
 $CD07 LD IX,($7239)   ;
 $CD0B CALL $9439      ;
 $CD0E LD (IX+$06),$18 ;
 $CD12 LD (IX+$00),$03 ;
 $CD16 JP $CDEC        ;
*$CD19 CALL $9439      ;
 $CD1C BIT 5,(IX+$06)  ;
 $CD20 JR Z,$CD2F      ;
 $CD22 BIT 1,(IX+$10)  ;
 $CD26 JR NZ,$CD5F     ;
 $CD28 RES 5,(IX+$06)  ;
 $CD2C JP $CDEC        ;
*$CD2F LD A,$18        ;
 $CD31 LD L,(IX+$04)   ;
 $CD34 LD H,(IX+$05)   ;
 $CD37 CALL $9378      ;
 $CD3A AND $52         ;
 $CD3C JR NZ,$CD56     ;
 $CD3E PUSH HL         ;
 $CD3F DEC HL          ;
 $CD40 LD E,(HL)       ;
 $CD41 DEC HL          ;
 $CD42 LD D,(HL)       ;
 $CD43 LD A,(DE)       ;
 $CD44 AND $52         ;
 $CD46 POP HL          ;
 $CD47 JR NZ,$CD56     ;
 $CD49 LD (IX+$04),L   ;
 $CD4C LD (IX+$05),H   ;
 $CD4F LD (IX+$06),$38 ;
 $CD53 JP $CDEC        ;
*$CD56 BIT 6,A         ;
 $CD58 RET Z           ;
 $CD59 LD HL,$7200     ;
 $CD5C SET 4,(HL)      ;
 $CD5E RET             ;
*$CD5F LD (IX+$00),$04 ;
 $CD63 LD (IX+$06),$00 ;
 $CD67 LD (IX+$07),$50 ;
 $CD6B JP $CDEC        ;
*$CD6E CALL $9439      ;
 $CD71 DEC (IX+$07)    ;
 $CD74 JR Z,$CD87      ;
 $CD76 LD A,(IX+$07)   ;
 $CD79 AND $03         ;
 $CD7B RET NZ          ;
 $CD7C LD A,(IX+$06)   ;
 $CD7F XOR $20         ;
 $CD81 LD (IX+$06),A   ;
 $CD84 JP $CDEC        ;
*$CD87 LD HL,($99B8)   ;
 $CD8A PUSH HL         ;
 $CD8B LD L,(IX+$04)   ;
 $CD8E LD H,(IX+$05)   ;
 $CD91 DEC L           ;
 $CD92 DEC L           ;
 $CD93 CALL $9768      ;
 $CD96 POP HL          ;
 $CD97 LD ($99B8),HL   ;
 $CD9A LD IX,($7239)   ;
 $CD9E LD (IX+$06),$10 ;
 $CDA2 LD (IX+$00),$05 ;
 $CDA6 LD (IX+$07),$02 ;
 $CDAA LD A,($99AC)    ;
 $CDAD CP $10          ;
 $CDAF JP C,$CDEC      ;
 $CDB2 LD L,(IX+$0F)   ;
 $CDB5 LD H,(IX+$17)   ;
 $CDB8 LD (HL),$00     ;
 $CDBA JP $CDEC        ;
*$CDBD DEC (IX+$07)    ;
 $CDC0 RET NZ          ;
 $CDC1 CALL $9439      ;
 $CDC4 BIT 5,(IX+$06)  ;
 $CDC8 JR NZ,$CDD4     ;
 $CDCA LD (IX+$07),$02 ;
 $CDCE SET 5,(IX+$06)  ;
 $CDD2 JR $CDEC        ;
*$CDD4 LD (IX+$00),$00 ;
 $CDD8 LD (IX+$06),$08 ;
 $CDDC JR $CDEC        ;
*$CDDE LD ($99E3),IX   ;
 $CDE2 LD DE,$CF79     ;
 $CDE5 LD ($99E5),DE   ;
 $CDE9 JP $9926        ;
*$CDEC LD ($99E3),IX   ;
 $CDF0 LD DE,$CFC0     ;
 $CDF3 LD ($99E5),DE   ;
 $CDF7 JP $9926        ;
*$CDFA LD ($99E3),IX   ;
 $CDFE LD DE,$CF79     ;
 $CE01 LD ($99E5),DE   ;
 $CE05 JP $9929        ;
*$CE08 LD ($99E3),IX   ;
 $CE0C LD DE,$CF79     ;
 $CE0F LD ($99E5),DE   ;
 $CE13 JP $9942        ;
 $CE16 LD B,H          ;
 $CE17 LD B,H          ;
 $CE18 LD B,H          ;
 $CE19 LD B,H          ;
 $CE1A LD B,H          ;
 $CE1B LD B,H          ;
 $CE1C LD B,H          ;
 $CE1D LD B,H          ;
 $CE1E LD (HL),A       ;
 $CE1F LD (HL),A       ;
 $CE20 RST $38         ;
 $CE21 LD (HL),A       ;
 $CE22 LD (HL),A       ;
 $CE23 LD (HL),A       ;
 $CE24 LD (HL),A       ;
 $CE25 RST $38         ;
 $CE26 LD (HL),A       ;
 $CE27 LD (HL),A       ;
 $CE28 RST $38         ;
 $CE29 LD (HL),A       ;
 $CE2A NOP             ;
 $CE2B NOP             ;
 $CE2C NOP             ;
 $CE2D NOP             ;
 $CE2E ADD A,B         ;
 $CE2F ADD A,B         ;
 $CE30 ADD A,B         ;
 $CE31 ADD A,B         ;
 $CE32 ADD A,B         ;
 $CE33 ADD A,B         ;
 $CE34 ADD A,B         ;
 $CE35 ADD A,B         ;
 $CE36 LD BC,$0101     ;
 $CE39 LD BC,$0101     ;
 $CE3C LD BC,$7F01     ;
 $CE3F LD A,A          ;
 $CE40 LD A,A          ;
 $CE41 LD A,A          ;
 $CE42 NOP             ;
 $CE43 NOP             ;
 $CE44 NOP             ;
 $CE45 NOP             ;
 $CE46 NOP             ;
 $CE47 NOP             ;
 $CE48 NOP             ;
 $CE49 NOP             ;
 $CE4A NOP             ;
 $CE4B NOP             ;
 $CE4C NOP             ;
 $CE4D NOP             ;
 $CE4E LD D,$F0        ;
 $CE50 RET P           ;
 $CE51 LD H,$F0        ;
 $CE53 RET P           ;
 $CE54 LD H,$F0        ;
 $CE56 RET P           ;
 $CE57 LD H,$10        ;
 $CE59 LD D,$10        ;
 $CE5B LD D,$40        ;
 $CE5D LD D,$10        ;
 $CE5F LD D,$40        ;
 $CE61 LD D,$10        ;
 $CE63 LD D,$40        ;
 $CE65 LD D,$10        ;
 $CE67 LD D,$40        ;
 $CE69 LD (HL),$F6     ;
 $CE6B OR $26          ;
 $CE6D OR $F6          ;
 $CE6F LD H,$F6        ;
 $CE71 OR $26          ;
 $CE73 OR $F6          ;
 $CE75 LD H,$F6        ;
 $CE77 OR $26          ;
 $CE79 OR $F6          ;
 $CE7B LD H,$11        ;
 $CE7D INC DE          ;
 $CE7E LD DE,$1113     ;
 $CE81 INC DE          ;
 $CE82 INC D           ;
 $CE83 LD DE,$1113     ;
 $CE86 INC DE          ;
 $CE87 LD DE,$1413     ;
 $CE8A LD DE,$1113     ;
 $CE8D INC DE          ;
 $CE8E LD DE,$1413     ;
 $CE91 LD DE,$1113     ;
 $CE94 INC DE          ;
 $CE95 LD DE,$1413     ;
 $CE98 LD DE,$2613     ;
 $CE9B LD (DE),A       ;
 $CE9C DEC D           ;
 $CE9D LD (DE),A       ;
 $CE9E DEC D           ;
 $CE9F LD (DE),A       ;
 $CEA0 INC DE          ;
 $CEA1 INC D           ;
 $CEA2 LD (DE),A       ;
 $CEA3 DEC D           ;
 $CEA4 LD (DE),A       ;
 $CEA5 DEC D           ;
 $CEA6 LD (DE),A       ;
 $CEA7 INC DE          ;
 $CEA8 INC D           ;
 $CEA9 LD (DE),A       ;
 $CEAA DEC D           ;
 $CEAB LD (DE),A       ;
 $CEAC DEC D           ;
 $CEAD LD (DE),A       ;
 $CEAE INC DE          ;
 $CEAF INC D           ;
 $CEB0 LD (DE),A       ;
 $CEB1 DEC D           ;
 $CEB2 LD (DE),A       ;
 $CEB3 DEC D           ;
 $CEB4 LD (DE),A       ;
 $CEB5 INC DE          ;
 $CEB6 INC D           ;
 $CEB7 LD (DE),A       ;
 $CEB8 DEC D           ;
 $CEB9 HALT            ;
 $CEBA INC DE          ;
 $CEBB INC D           ;
 $CEBC LD D,(HL)       ;
 $CEBD INC DE          ;
 $CEBE INC D           ;
 $CEBF LD D,(HL)       ;
 $CEC0 INC DE          ;
 $CEC1 INC D           ;
 $CEC2 LD D,(HL)       ;
 $CEC3 INC DE          ;
 $CEC4 INC D           ;
 $CEC5 SUB (HL)        ;
 $CEC6 INC DE          ;
 $CEC7 INC D           ;
 $CEC8 LD D,(HL)       ;
 $CEC9 INC DE          ;
 $CECA INC D           ;
 $CECB LD D,(HL)       ;
 $CECC INC DE          ;
 $CECD INC D           ;
 $CECE LD D,(HL)       ;
 $CECF INC DE          ;
 $CED0 INC D           ;
 $CED1 SUB (HL)        ;
 $CED2 INC DE          ;
 $CED3 INC D           ;
 $CED4 LD D,(HL)       ;
 $CED5 INC DE          ;
 $CED6 INC D           ;
 $CED7 LD D,(HL)       ;
 $CED8 INC DE          ;
 $CED9 INC D           ;
 $CEDA LD D,(HL)       ;
 $CEDB INC DE          ;
 $CEDC INC D           ;
 $CEDD SUB (HL)        ;
 $CEDE INC DE          ;
 $CEDF INC D           ;
 $CEE0 LD D,(HL)       ;
 $CEE1 INC DE          ;
 $CEE2 INC D           ;
 $CEE3 LD D,(HL)       ;
 $CEE4 INC DE          ;
 $CEE5 INC D           ;
 $CEE6 LD D,(HL)       ;
 $CEE7 INC DE          ;
 $CEE8 INC D           ;
 $CEE9 SUB (HL)        ;
 $CEEA INC DE          ;
 $CEEB INC D           ;
 $CEEC LD D,(HL)       ;
 $CEED INC DE          ;
 $CEEE INC D           ;
 $CEEF LD D,(HL)       ;
 $CEF0 INC DE          ;
 $CEF1 INC D           ;
 $CEF2 LD D,(HL)       ;
 $CEF3 INC DE          ;
 $CEF4 INC D           ;
 $CEF5 SUB (HL)        ;
 $CEF6 INC DE          ;
 $CEF7 INC D           ;
 $CEF8 LD D,(HL)       ;
 $CEF9 INC DE          ;
 $CEFA INC D           ;
 $CEFB LD D,(HL)       ;
 $CEFC INC DE          ;
 $CEFD INC D           ;
 $CEFE LD D,(HL)       ;
 $CEFF INC DE          ;
 $CF00 INC D           ;
 $CF01 SUB (HL)        ;
 $CF02 INC DE          ;
 $CF03 INC D           ;
 $CF04 LD D,(HL)       ;
 $CF05 INC DE          ;
 $CF06 INC D           ;
 $CF07 LD D,(HL)       ;
 $CF08 INC DE          ;
 $CF09 INC D           ;
 $CF0A LD D,(HL)       ;
 $CF0B INC DE          ;
 $CF0C INC D           ;
 $CF0D LD H,$00        ;
 $CF0F LD B,A          ;
 $CF10 LD H,B          ;
 $CF11 LD B,H          ;
 $CF12 RET P           ;
 $CF13 RET P           ;
 $CF14 RET P           ;
 $CF15 RET P           ;
 $CF16 RET P           ;
 $CF17 RET P           ;
 $CF18 ADD A,B         ;
 $CF19 LD DE,$1110     ;
 $CF1C LD B,B          ;
 $CF1D LD DE,$1110     ;
 $CF20 LD B,B          ;
 $CF21 LD DE,$1110     ;
 $CF24 LD B,B          ;
 $CF25 LD DE,$1110     ;
 $CF28 LD B,B          ;
 $CF29 LD HL,$F1F1     ;
 $CF2C POP AF          ;
 $CF2D POP AF          ;
 $CF2E POP AF          ;
 $CF2F POP AF          ;
 $CF30 POP AF          ;
 $CF31 POP AF          ;
 $CF32 POP AF          ;
 $CF33 POP AF          ;
 $CF34 POP AF          ;
 $CF35 POP AF          ;
 $CF36 POP HL          ;
 $CF37 LD (DE),A       ;
 $CF38 LD DE,$4112     ;
 $CF3B LD (DE),A       ;
 $CF3C LD DE,$4112     ;
 $CF3F LD (DE),A       ;
 $CF40 LD DE,$4112     ;
 $CF43 LD (DE),A       ;
 $CF44 LD DE,$4112     ;
 $CF47 LD (DE),A       ;
 $CF48 POP AF          ;
 $CF49 POP AF          ;
 $CF4A POP AF          ;
 $CF4B POP AF          ;
 $CF4C POP AF          ;
 $CF4D POP AF          ;
 $CF4E POP AF          ;
 $CF4F POP AF          ;
 $CF50 POP AF          ;
 $CF51 POP AF          ;
 $CF52 POP AF          ;
 $CF53 POP AF          ;
 $CF54 POP AF          ;
 $CF55 POP AF          ;
 $CF56 POP AF          ;
 $CF57 POP AF          ;
 $CF58 POP AF          ;
 $CF59 LD HL,$FF00     ;
 $CF5C RST $38         ;
 $CF5D DEC BC          ;
 $CF5E CALL M,$FCFC    ;
 $CF61 INC C           ;
 $CF62 LD A,(DE)       ;
 $CF63 EX AF,AF'       ;
 $CF64 LD D,$08        ;
 $CF66 LD D,$08        ;
 $CF68 LD D,$08        ;
 $CF6A LD (DE),A       ;
 $CF6B RLA             ;
 $CF6C EX AF,AF'       ;
 $CF6D RLA             ;
 $CF6E EX AF,AF'       ;
 $CF6F RLA             ;
 $CF70 EX AF,AF'       ;
 $CF71 RLA             ;
 $CF72 EX AF,AF'       ;
 $CF73 INC DE          ;
 $CF74 CALL M,$FCFC    ;
 $CF77 ADC A,H         ;
 $CF78 NOP             ;
 $CF79 RRCA            ;
 $CF7A RET NC          ;
 $CF7B LD (BC),A       ;
 $CF7C LD BC,$CFBB     ;
 $CF7F CP $FF          ;
 $CF81 CPL             ;
 $CF82 RET NC          ;
 $CF83 LD BC,$B903     ;
 $CF86 RST $08         ;
 $CF87 RET NZ          ;
 $CF88 RST $38         ;
 $CF89 LD D,A          ;
 $CF8A RET NC          ;
 $CF8B LD (BC),A       ;
 $CF8C LD BC,$CFBC     ;
 $CF8F NOP             ;
 $CF90 NOP             ;
 $CF91 LD (HL),A       ;
 $CF92 RET NC          ;
 $CF93 LD BC,$B903     ;
 $CF96 RST $08         ;
 $CF97 RET NZ          ;
 $CF98 RST $38         ;
 $CF99 RRA             ;
 $CF9A RET NC          ;
 $CF9B LD (BC),A       ;
 $CF9C LD BC,$CFBB     ;
 $CF9F CP $FF          ;
 $CFA1 LD B,A          ;
 $CFA2 RET NC          ;
 $CFA3 LD BC,$BE02     ;
 $CFA6 RST $08         ;
 $CFA7 RET NZ          ;
 $CFA8 RST $38         ;
 $CFA9 LD H,A          ;
 $CFAA RET NC          ;
 $CFAB LD (BC),A       ;
 $CFAC LD BC,$CFBC     ;
 $CFAF NOP             ;
 $CFB0 NOP             ;
 $CFB1 ADC A,A         ;
 $CFB2 RET NC          ;
 $CFB3 LD BC,$BA02     ;
 $CFB6 RST $08         ;
 $CFB7 NOP             ;
 $CFB8 NOP             ;
 $CFB9 INC B           ;
 $CFBA INC HL          ;
 $CFBB LD (BC),A       ;
 $CFBC LD ($0302),HL   ;
 $CFBF LD ($D09F),HL   ;
 $CFC2 LD (BC),A       ;
 $CFC3 INC BC          ;
 $CFC4 LD BC,$7ED0     ;
 $CFC7 RST $38         ;
 $CFC8 RST $38         ;
 $CFC9 RET NC          ;
 $CFCA LD BC,$0103     ;
 $CFCD RET NC          ;
 $CFCE ADD A,B         ;
 $CFCF RST $38         ;
 $CFD0 LD H,A          ;
 $CFD1 POP DE          ;
 $CFD2 LD (BC),A       ;
 $CFD3 INC BC          ;
 $CFD4 LD BC,$7ED0     ;
 $CFD7 RST $38         ;
 $CFD8 LD H,A          ;
 $CFD9 POP DE          ;
 $CFDA LD (BC),A       ;
 $CFDB INC BC          ;
 $CFDC LD BC,$7ED0     ;
 $CFDF RST $38         ;
 $CFE0 RST $08         ;
 $CFE1 RET NC          ;
 $CFE2 LD (BC),A       ;
 $CFE3 INC BC          ;
 $CFE4 LD BC,$7ED0     ;
 $CFE7 RST $38         ;
 $CFE8 RLA             ;
 $CFE9 POP DE          ;
 $CFEA LD BC,$0004     ;
 $CFED RET NC          ;
 $CFEE LD B,B          ;
 $CFEF RST $38         ;
 $CFF0 SCF             ;
 $CFF1 POP DE          ;
 $CFF2 LD (BC),A       ;
 $CFF3 INC BC          ;
 $CFF4 LD BC,$7ED0     ;
 $CFF7 RST $38         ;
 $CFF8 SUB A           ;
 $CFF9 POP DE          ;
 $CFFA LD (BC),A       ;
 $CFFB INC B           ;
 $CFFC RLCA            ;
 $CFFD RET NC          ;
 $CFFE LD A,(HL)       ;
 $CFFF RST $38         ;
 $D000 DEC B           ;
 $D001 INC B           ;
 $D002 INC BC          ;
 $D003 LD ($0304),HL   ;
 $D006 LD ($0405),HL   ;
 $D009 INC HL          ;
 $D00A LD (BC),A       ;
 $D00B DEC B           ;
 $D00C INC B           ;
 $D00D INC HL          ;
 $D00E LD (BC),A       ;
 $D00F INC BC          ;
 $D010 RRCA            ;
 $D011 RRA             ;
 $D012 RRCA            ;
 $D013 LD B,$0A        ;
 $D015 LD BC,$C000     ;
 $D018 RET PO          ;
 $D019 RET M           ;
 $D01A CP $FE          ;
 $D01C LD D,$20        ;
 $D01E NOP             ;
 $D01F INC A           ;
 $D020 RST $38         ;
 $D021 LD A,A          ;
 $D022 LD A,A          ;
 $D023 LD H,A          ;
 $D024 LD D,C          ;
 $D025 LD B,B          ;
 $D026 JR NZ,$D028     ;
*$D028 ADD A,B         ;
 $D029 RET NZ          ;
 $D02A RET P           ;
 $D02B RET P           ;
 $D02C LD (HL),B       ;
 $D02D ADD A,B         ;
 $D02E NOP             ;
 $D02F NOP             ;
 $D030 NOP             ;
 $D031 NOP             ;
 $D032 NOP             ;
 $D033 NOP             ;
 $D034 INC A           ;
 $D035 LD A,(HL)       ;
 $D036 LD A,(HL)       ;
 $D037 LD A,(HL)       ;
 $D038 LD A,(HL)       ;
 $D039 LD A,$3C        ;
 $D03B LD A,(HL)       ;
 $D03C LD A,(HL)       ;
 $D03D LD A,D          ;
 $D03E LD E,H          ;
 $D03F INC A           ;
 $D040 JR $D042        ;
*$D042 NOP             ;
 $D043 NOP             ;
 $D044 NOP             ;
 $D045 NOP             ;
 $D046 NOP             ;
 $D047 NOP             ;
 $D048 INC A           ;
 $D049 LD A,(HL)       ;
 $D04A LD A,(HL)       ;
 $D04B LD A,(HL)       ;
 $D04C LD A,(HL)       ;
 $D04D LD A,H          ;
 $D04E INC A           ;
 $D04F LD A,(HL)       ;
 $D050 LD A,(HL)       ;
 $D051 LD E,(HL)       ;
 $D052 LD A,($183C)    ;
 $D055 NOP             ;
 $D056 NOP             ;
 $D057 INC BC          ;
 $D058 RLCA            ;
 $D059 RRA             ;
 $D05A LD A,A          ;
 $D05B LD A,A          ;
 $D05C LD L,B          ;
 $D05D INC B           ;
 $D05E NOP             ;
 $D05F RET NZ          ;
 $D060 RET P           ;
 $D061 RET M           ;
 $D062 RET P           ;
 $D063 LD H,B          ;
 $D064 LD D,B          ;
 $D065 ADD A,B         ;
 $D066 NOP             ;
 $D067 NOP             ;
 $D068 LD BC,$0F03     ;
 $D06B RRCA            ;
 $D06C LD C,$01        ;
 $D06E NOP             ;
 $D06F INC A           ;
 $D070 RST $38         ;
 $D071 CP $FE          ;
 $D073 AND $8A         ;
 $D075 LD (BC),A       ;
 $D076 INC B           ;
 $D077 NOP             ;
 $D078 NOP             ;
 $D079 NOP             ;
 $D07A NOP             ;
 $D07B NOP             ;
 $D07C JR $D0BA        ;
 $D07E INC A           ;
 $D07F LD A,$7E        ;
 $D081 LD A,(HL)       ;
 $D082 LD A,(HL)       ;
 $D083 LD E,(HL)       ;
 $D084 LD (HL),$7E     ;
 $D086 LD A,(HL)       ;
 $D087 LD A,$26        ;
 $D089 INC B           ;
 $D08A INC B           ;
 $D08B NOP             ;
 $D08C NOP             ;
 $D08D NOP             ;
 $D08E NOP             ;
 $D08F NOP             ;
 $D090 JR $D0CE        ;
 $D092 INC A           ;
 $D093 LD A,H          ;
 $D094 LD A,(HL)       ;
 $D095 LD A,(HL)       ;
 $D096 LD A,(HL)       ;
 $D097 LD A,(HL)       ;
 $D098 LD E,(HL)       ;
 $D099 LD L,$7E        ;
 $D09B LD A,H          ;
 $D09C LD H,H          ;
 $D09D JR NZ,$D0BF     ;
 $D09F NOP             ;
 $D0A0 NOP             ;
 $D0A1 LD BC,$0203     ;
 $D0A4 LD (BC),A       ;
 $D0A5 LD BC,$0000     ;
 $D0A8 NOP             ;
 $D0A9 LD BC,$0301     ;
 $D0AC LD (BC),A       ;
 $D0AD INC BC          ;
 $D0AE INC BC          ;
 $D0AF RLA             ;
 $D0B0 AND A           ;
 $D0B1 RST $38         ;
 $D0B2 LD A,A          ;
 $D0B3 LD A,(HL)       ;
 $D0B4 INC A           ;
 $D0B5 NOP             ;
 $D0B6 NOP             ;
 $D0B7 NOP             ;
 $D0B8 NOP             ;
 $D0B9 RET NZ          ;
*$D0BA RET PO          ;
 $D0BB RET PO          ;
 $D0BC LD H,B          ;
 $D0BD RET P           ;
 $D0BE LD A,B          ;
*$D0BF RET M           ;
 $D0C0 CALL M,$FCFC    ;
 $D0C3 INC A           ;
 $D0C4 CALL C,$DCDC    ;
 $D0C7 CP H            ;
 $D0C8 CP H            ;
 $D0C9 INC A           ;
 $D0CA INC A           ;
 $D0CB JR C,$D145      ;
 $D0CD JR $D107        ;
 $D0CF NOP             ;
 $D0D0 NOP             ;
 $D0D1 NOP             ;
 $D0D2 NOP             ;
 $D0D3 RLCA            ;
 $D0D4 RRCA            ;
 $D0D5 ADD HL,BC       ;
 $D0D6 EX AF,AF'       ;
 $D0D7 RLCA            ;
 $D0D8 NOP             ;
 $D0D9 LD BC,$0303     ;
 $D0DC RLCA            ;
 $D0DD DEC B           ;
 $D0DE INC BC          ;
 $D0DF DAA             ;
 $D0E0 AND A           ;
 $D0E1 LD A,A          ;
 $D0E2 LD A,A          ;
 $D0E3 LD A,(HL)       ;
 $D0E4 INC A           ;
 $D0E5 NOP             ;
 $D0E6 NOP             ;
 $D0E7 NOP             ;
 $D0E8 NOP             ;
 $D0E9 NOP             ;
 $D0EA NOP             ;
 $D0EB NOP             ;
 $D0EC ADD A,B         ;
 $D0ED ADD A,B         ;
 $D0EE RET PO          ;
 $D0EF RET P           ;
 $D0F0 RET M           ;
 $D0F1 CALL M,$3CFC    ;
 $D0F4 CALL C,$DCDC    ;
 $D0F7 CP H            ;
 $D0F8 CP H            ;
 $D0F9 INC A           ;
 $D0FA INC A           ;
 $D0FB JR C,$D175      ;
 $D0FD JR $D137        ;
 $D0FF JR $D13D        ;
 $D101 LD B,D          ;
 $D102 LD B,D          ;
 $D103 INC H           ;
 $D104 JR $D184        ;
 $D106 RST $38         ;
*$D107 RST $38         ;
 $D108 RST $38         ;
 $D109 LD A,A          ;
 $D10A LD A,A          ;
 $D10B CCF             ;
 $D10C LD A,$3C        ;
 $D10E INC A           ;
 $D10F INC A           ;
 $D110 INC A           ;
 $D111 INC A           ;
 $D112 JR NC,$D144     ;
 $D114 JR NC,$D146     ;
 $D116 NOP             ;
 $D117 NOP             ;
 $D118 NOP             ;
 $D119 NOP             ;
 $D11A NOP             ;
 $D11B JR $D159        ;
 $D11D LD B,D          ;
 $D11E LD B,D          ;
 $D11F INC H           ;
 $D120 JR $D1A0        ;
 $D122 RST $38         ;
 $D123 RST $38         ;
 $D124 RST $38         ;
 $D125 CP $FE          ;
 $D127 CALL M,$3C7C    ;
 $D12A INC A           ;
 $D12B INC A           ;
 $D12C INC A           ;
 $D12D INC A           ;
 $D12E INC C           ;
 $D12F INC C           ;
 $D130 INC C           ;
 $D131 INC C           ;
 $D132 NOP             ;
 $D133 NOP             ;
 $D134 NOP             ;
 $D135 NOP             ;
 $D136 NOP             ;
*$D137 LD BC,$0303     ;
 $D13A LD BC,$0100     ;
*$D13D LD BC,$7B01     ;
 $D140 LD A,D          ;
 $D141 LD E,H          ;
 $D142 LD (HL),$7E     ;
*$D144 LD A,(HL)       ;
*$D145 LD H,$24        ;
 $D147 INC B           ;
 $D148 INC B           ;
 $D149 NOP             ;
 $D14A NOP             ;
 $D14B NOP             ;
 $D14C NOP             ;
 $D14D NOP             ;
 $D14E NOP             ;
 $D14F RET NZ          ;
 $D150 RET PO          ;
 $D151 RET PO          ;
 $D152 RET PO          ;
 $D153 RET M           ;
 $D154 RET M           ;
 $D155 RET M           ;
 $D156 CALL M,$7C7C    ;
*$D159 LD A,B          ;
 $D15A LD A,B          ;
 $D15B INC A           ;
 $D15C INC A           ;
 $D15D INC A           ;
 $D15E INC A           ;
 $D15F INC A           ;
 $D160 INC A           ;
 $D161 INC C           ;
 $D162 INC C           ;
 $D163 INC C           ;
 $D164 INC C           ;
 $D165 NOP             ;
 $D166 NOP             ;
 $D167 LD BC,$0303     ;
 $D16A LD BC,$0100     ;
 $D16D LD BC,$0303     ;
 $D170 LD E,$34        ;
 $D172 INC A           ;
 $D173 LD A,H          ;
 $D174 LD A,(HL)       ;
*$D175 LD A,(HL)       ;
 $D176 LD A,(HL)       ;
 $D177 LD A,(HL)       ;
 $D178 LD E,(HL)       ;
 $D179 LD L,$7E        ;
 $D17B LD A,H          ;
 $D17C LD H,H          ;
 $D17D JR NZ,$D19F     ;
 $D17F RET NZ          ;
 $D180 RET PO          ;
 $D181 RET PO          ;
 $D182 RET PO          ;
 $D183 RET M           ;
*$D184 RET M           ;
 $D185 RET M           ;
 $D186 CALL M,$7C7C    ;
 $D189 LD A,B          ;
 $D18A LD A,B          ;
 $D18B INC A           ;
 $D18C INC A           ;
 $D18D INC A           ;
 $D18E INC A           ;
 $D18F INC A           ;
 $D190 INC A           ;
 $D191 INC C           ;
 $D192 INC C           ;
 $D193 INC C           ;
 $D194 INC C           ;
 $D195 NOP             ;
 $D196 NOP             ;
 $D197 NOP             ;
 $D198 NOP             ;
 $D199 NOP             ;
 $D19A NOP             ;
 $D19B LD BC,$0303     ;
 $D19E LD BC,$0100     ;
 $D1A1 LD BC,$0303     ;
 $D1A4 LD E,$36        ;
 $D1A6 INC A           ;
 $D1A7 LD A,$7E        ;
 $D1A9 LD A,(HL)       ;
 $D1AA LD A,(HL)       ;
 $D1AB LD E,(HL)       ;
 $D1AC LD (HL),$7E     ;
 $D1AE LD A,(HL)       ;
 $D1AF LD A,$26        ;
 $D1B1 INC B           ;
 $D1B2 INC B           ;
 $D1B3 NOP             ;
 $D1B4 NOP             ;
 $D1B5 NOP             ;
 $D1B6 NOP             ;
 $D1B7 NOP             ;
 $D1B8 NOP             ;
 $D1B9 NOP             ;
 $D1BA NOP             ;
 $D1BB RET NZ          ;
 $D1BC RET PO          ;
 $D1BD RET PO          ;
 $D1BE RET PO          ;
 $D1BF RET M           ;
 $D1C0 RET M           ;
 $D1C1 RET M           ;
 $D1C2 CALL M,$7C7C    ;
 $D1C5 LD A,B          ;
 $D1C6 INC A           ;
 $D1C7 INC A           ;
 $D1C8 INC A           ;
 $D1C9 INC A           ;
 $D1CA INC A           ;
 $D1CB INC A           ;
 $D1CC INC A           ;
 $D1CD JR NC,$D1FF     ;
 $D1CF JR NC,$D201     ;
 $D1D1 NOP             ;
 $D1D2 NOP             ;
 $D1D3 NOP             ;
 $D1D4 NOP             ;
 $D1D5 NOP             ;
 $D1D6 NOP             ;
 $D1D7 RET PO          ;
 $D1D8 POP DE          ;
 $D1D9 LD BC,$DF01     ;
 $D1DC POP DE          ;
 $D1DD NOP             ;
 $D1DE NOP             ;
 $D1DF LD DE,$0000     ;
 $D1E2 CPL             ;
 $D1E3 LD E,D          ;
 $D1E4 LD L,D          ;
 $D1E5 RST $30         ;
 $D1E6 NOP             ;
 $D1E7 NOP             ;

; Sub-Game Data: Samoa
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F67)(samoa) }
; UDGTABLE#
; #POPS
@label=Samoa_Data
b$D1E8 DEFB $12,$D3,$C2,$D2,$5C,$D4,$55,$D4
 $D1F0 DEFB $07,$23,$D2
 $D1F3 DEFW $D66C
@label=Samoa_SubGame
 $D1F5 DEFW $D5AC                           ; Location subgame routine.
@label=Samoa_SetUp
 $D1F7 DEFW $D214                           ; Initialisation routine.
 $D1F9 DEFB $20,$7C,$15,$D2,$01,$00,$10,$00
*$D201 DEFB $15,$00,$00,$50,$00,$82,$40,$72
 $D209 DEFB $00,$00,$40,$72,$4A,$D6,$00,$7B
 $D211 DEFB $0F,$01,$06

; Initialise: Samoa
@label=Samoa_Initialise
c$D214 RET           ;
 $D215 LD HL,($2526) ;
 $D218 INC HL        ;
 $D219 JR NZ,$D23C   ;
 $D21B LD HL,($3F3A) ;
 $D21E JR NZ,$D241   ;
 $D220 LD HL,$A021   ;
 $D223 RST $38       ;
 $D224 RST $38       ;
 $D225 LD (HL),E     ;
 $D226 DEC B         ;
 $D227 INC HL        ;
 $D228 DEC B         ;
 $D229 RLA           ;
 $D22A ADD HL,BC     ;
 $D22B DEC DE        ;
 $D22C DEC B         ;
 $D22D INC HL        ;
 $D22E DEC B         ;
 $D22F RRCA          ;
 $D230 DEC B         ;
 $D231 RRCA          ;
 $D232 ADD HL,BC     ;
 $D233 RLCA          ;
 $D234 ADD HL,BC     ;
 $D235 DEC BC        ;
 $D236 ADD HL,BC     ;
 $D237 RRCA          ;
 $D238 DEC B         ;
 $D239 DEC BC        ;
 $D23A DEC B         ;
 $D23B RLCA          ;
*$D23C DEC B         ;
 $D23D INC DE        ;
 $D23E DEC B         ;
 $D23F RLCA          ;
 $D240 DEC C         ;
*$D241 RLCA          ;
 $D242 DEC B         ;
 $D243 RRCA          ;
 $D244 ADD HL,BC     ;
 $D245 RLCA          ;
 $D246 ADD HL,BC     ;
 $D247 RLCA          ;
 $D248 DEC C         ;
 $D249 RLCA          ;
 $D24A DEC B         ;
 $D24B RLCA          ;
 $D24C LD DE,$0D07   ;
 $D24F RLCA          ;
 $D250 ADD HL,BC     ;
 $D251 RLCA          ;
 $D252 DEC C         ;
 $D253 RLCA          ;
 $D254 DEC B         ;
 $D255 LD C,$08      ;
 $D257 LD B,$08      ;
 $D259 RLCA          ;
 $D25A DEC C         ;
 $D25B RLCA          ;
 $D25C DEC B         ;
 $D25D RLCA          ;
 $D25E LD DE,$0D07   ;
 $D261 RLCA          ;
 $D262 ADD HL,BC     ;
 $D263 RLCA          ;
 $D264 DEC C         ;
 $D265 RLCA          ;
 $D266 DEC B         ;
 $D267 LD C,$08      ;
 $D269 LD B,$08      ;
 $D26B LD B,$0C      ;
 $D26D LD B,$04      ;
 $D26F LD B,$10      ;
 $D271 LD B,$0C      ;
 $D273 LD B,$08      ;
 $D275 LD B,$0C      ;
 $D277 LD B,$04      ;
 $D279 LD C,$08      ;
 $D27B LD B,$08      ;
 $D27D LD B,$0C      ;
 $D27F LD B,$04      ;
 $D281 LD B,$10      ;
 $D283 RLCA          ;
 $D284 INC C         ;
 $D285 LD B,$08      ;
 $D287 LD B,$0C      ;
 $D289 LD B,$04      ;
 $D28B LD C,$08      ;
 $D28D LD B,$08      ;
 $D28F RLCA          ;
 $D290 INC C         ;
 $D291 LD B,$04      ;
 $D293 LD B,$20      ;
 $D295 LD B,$08      ;
 $D297 RLCA          ;
 $D298 INC C         ;
 $D299 LD B,$04      ;
 $D29B LD C,$08      ;
 $D29D LD B,$18      ;
 $D29F RLCA          ;
 $D2A0 INC B         ;
 $D2A1 LD B,$20      ;
 $D2A3 LD B,$18      ;
 $D2A5 LD B,$04      ;
 $D2A7 LD C,$08      ;
 $D2A9 LD B,$20      ;
 $D2AB RLCA          ;
 $D2AC JR NZ,$D2B4   ;
 $D2AE JR $D2B6      ;
 $D2B0 INC B         ;
 $D2B1 LD C,$08      ;
 $D2B3 LD B,$44      ;
 $D2B5 RLCA          ;
*$D2B6 JR $D2BF      ;
 $D2B8 INC B         ;
 $D2B9 LD C,$08      ;
 $D2BB RLCA          ;
 $D2BC LD L,B        ;
 $D2BD LD C,$74      ;
*$D2BF LD C,$78      ;
 $D2C1 NOP           ;
 $D2C2 LD A,(HL)     ;
 $D2C3 INC A         ;
 $D2C4 NOP           ;
 $D2C5 NOP           ;
 $D2C6 NOP           ;
 $D2C7 NOP           ;
 $D2C8 NOP           ;
 $D2C9 NOP           ;
 $D2CA LD (BC),A     ;
 $D2CB DEC E         ;
 $D2CC LD (BC),A     ;
 $D2CD LD BC,$3D42   ;
 $D2D0 LD BC,$3D01   ;
 $D2D3 RRA           ;
 $D2D4 LD C,$0E      ;
 $D2D6 LD A,(BC)     ;
 $D2D7 LD A,(BC)     ;
 $D2D8 LD (BC),A     ;
 $D2D9 LD (BC),A     ;
 $D2DA XOR D         ;
 $D2DB RET M         ;
 $D2DC RET M         ;
 $D2DD CP B          ;
 $D2DE XOR B         ;
 $D2DF XOR B         ;
 $D2E0 JR NZ,$D302   ;
 $D2E2 LD (BC),A     ;
 $D2E3 LD (DE),A     ;
 $D2E4 DEC B         ;
 $D2E5 DEC B         ;
 $D2E6 LD (BC),A     ;
 $D2E7 LD B,D        ;
 $D2E8 LD C,C        ;
 $D2E9 LD C,E        ;
 $D2EA EX AF,AF'     ;
 $D2EB INC H         ;
 $D2EC LD B,B        ;
 $D2ED LD B,B        ;
 $D2EE LD BC,$4149   ;
 $D2F1 INC BC        ;
 $D2F2 DJNZ $D294    ;
 $D2F4 SUB B         ;
 $D2F5 LD B,E        ;
 $D2F6 INC H         ;
 $D2F7 NOP           ;
 $D2F8 EX AF,AF'     ;
 $D2F9 LD B,B        ;
 $D2FA DJNZ $D2FC    ;
*$D2FC NOP           ;
 $D2FD LD B,C        ;
 $D2FE LD B,H        ;
 $D2FF LD D,B        ;
 $D300 NOP           ;
 $D301 LD (DE),A     ;
*$D302 NOP           ;
 $D303 DJNZ $D30D    ;
 $D305 ADD A,B       ;
 $D306 NOP           ;
 $D307 LD B,B        ;
 $D308 LD (BC),A     ;
 $D309 INC H         ;
 $D30A NOP           ;
 $D30B NOP           ;
 $D30C NOP           ;
*$D30D NOP           ;
 $D30E NOP           ;
 $D30F NOP           ;
 $D310 NOP           ;
 $D311 NOP           ;
 $D312 ADD HL,DE     ;
 $D313 JR $D32B      ;
 $D315 JR $D330      ;
 $D317 JR Z,$D32F    ;
 $D319 RLA           ;
 $D31A JR $D365      ;
 $D31C JR Z,$D357    ;
 $D31E JR Z,$D347    ;
 $D320 ADD HL,SP     ;
 $D321 JR Z,$D349    ;
 $D323 ADD HL,DE     ;
 $D324 ADD HL,HL     ;
 $D325 JR Z,$D33D    ;
 $D327 RLA           ;
 $D328 ADD HL,HL     ;
 $D329 LD C,B        ;
 $D32A ADD HL,HL     ;
*$D32B JR $D356      ;
 $D32D JR $D346      ;
*$D32F ADD HL,SP     ;
*$D330 JR $D35B      ;
 $D332 JR C,$D35D    ;
 $D334 JR Z,$D35F    ;
 $D336 LD D,$17      ;
 $D338 INC D         ;
 $D339 DEC D         ;
 $D33A LD D,$28      ;
 $D33C LD H,$38      ;
 $D33E LD D,$38      ;
 $D340 ADD HL,DE     ;
 $D341 JR $D359      ;
 $D343 RLA           ;
 $D344 JR $D35C      ;
*$D346 JR Z,$D361    ;
 $D348 LD D,$17      ;
 $D34A JR $D362      ;
 $D34C RLA           ;
 $D34D ADD HL,HL     ;
 $D34E LD D,$17      ;
 $D350 LD (DE),A     ;
 $D351 INC DE        ;
 $D352 LD D,$17      ;
 $D354 LD D,$17      ;
*$D356 INC D         ;
*$D357 LD D,$18      ;
*$D359 RLA           ;
 $D35A LD D,$17      ;
*$D35C JR $D375      ;
 $D35E LD H,$17      ;
 $D360 LD D,$17      ;
*$D362 INC D         ;
 $D363 RLA           ;
 $D364 LD D,$17      ;
 $D366 INC D         ;
 $D367 LD D,$17      ;
 $D369 INC D         ;
 $D36A DEC D         ;
 $D36B ADD HL,HL     ;
 $D36C INC D         ;
 $D36D DEC D         ;
 $D36E ADD HL,DE     ;
 $D36F LD DE,$1514   ;
 $D372 LD D,$17      ;
 $D374 LD (DE),A     ;
*$D375 INC D         ;
 $D376 LD D,$17      ;
 $D378 INC D         ;
 $D379 DEC D         ;
 $D37A LD D,$17      ;
 $D37C INC D         ;
 $D37D INC D         ;
 $D37E DEC D         ;
 $D37F LD D,$17      ;
 $D381 LD (DE),A     ;
 $D382 RLA           ;
 $D383 INC D         ;
 $D384 DEC D         ;
 $D385 LD (DE),A     ;
 $D386 LD D,$17      ;
 $D388 LD (DE),A     ;
 $D389 INC DE        ;
 $D38A ADD HL,HL     ;
 $D38B LD (DE),A     ;
 $D38C INC DE        ;
 $D38D ADD HL,DE     ;
 $D38E LD DE,$1312   ;
 $D391 INC D         ;
 $D392 DEC D         ;
 $D393 ADD HL,DE     ;
 $D394 LD (DE),A     ;
 $D395 INC D         ;
 $D396 DEC D         ;
 $D397 LD (DE),A     ;
 $D398 INC DE        ;
 $D399 INC D         ;
 $D39A DEC D         ;
 $D39B LD ($1413),HL ;
 $D39E DEC D         ;
 $D39F LD DE,$1215   ;
 $D3A2 INC DE        ;
 $D3A3 ADD HL,DE     ;
 $D3A4 INC D         ;
 $D3A5 DEC D         ;
 $D3A6 LD DE,$1139   ;
 $D3A9 ADD HL,HL     ;
 $D3AA LD DE,$1229   ;
 $D3AD INC DE        ;
 $D3AE ADD HL,HL     ;
 $D3AF LD (DE),A     ;
 $D3B0 INC DE        ;
 $D3B1 LD DE,$1219   ;
 $D3B4 INC DE        ;
 $D3B5 ADD HL,DE     ;
 $D3B6 LD DE,$1219   ;
 $D3B9 INC DE        ;
 $D3BA LD DE,$1913   ;
 $D3BD LD DE,$1219   ;
 $D3C0 INC DE        ;
 $D3C1 LD DE,$1139   ;
 $D3C4 ADD HL,HL     ;
 $D3C5 LD DE,$1129   ;
 $D3C8 ADD HL,SP     ;
 $D3C9 LD DE,$1119   ;
 $D3CC LD C,C        ;
 $D3CD LD DE,$1139   ;
 $D3D0 ADD HL,HL     ;
 $D3D1 LD DE,$1139   ;
 $D3D4 ADD HL,SP     ;
 $D3D5 LD DE,$1129   ;
 $D3D8 ADD HL,HL     ;
 $D3D9 LD DE,$1139   ;
 $D3DC ADD HL,DE     ;
 $D3DD LD DE,$1149   ;
 $D3E0 ADD HL,SP     ;
 $D3E1 LD DE,$1129   ;
 $D3E4 ADD HL,SP     ;
 $D3E5 LD DE,$1139   ;
 $D3E8 ADD HL,HL     ;
 $D3E9 LD DE,$1129   ;
 $D3EC ADD HL,SP     ;
 $D3ED LD DE,$1119   ;
 $D3F0 LD C,C        ;
 $D3F1 LD DE,$1139   ;
 $D3F4 ADD HL,HL     ;
 $D3F5 LD DE,$1139   ;
 $D3F8 ADD HL,SP     ;
 $D3F9 LD DE,$1129   ;
 $D3FC ADD HL,HL     ;
 $D3FD LD DE,$1139   ;
 $D400 ADD HL,DE     ;
 $D401 LD DE,$1149   ;
 $D404 ADD HL,SP     ;
 $D405 LD DE,$1129   ;
 $D408 ADD HL,SP     ;
 $D409 LD DE,$1139   ;
 $D40C ADD HL,HL     ;
 $D40D LD DE,$1129   ;
 $D410 ADD HL,SP     ;
 $D411 LD DE,$1119   ;
 $D414 LD C,C        ;
 $D415 DJNZ $D450    ;
 $D417 LD DE,$1129   ;
 $D41A ADD HL,SP     ;
 $D41B LD DE,$1139   ;
 $D41E ADD HL,HL     ;
 $D41F LD DE,$1029   ;
 $D422 ADD HL,SP     ;
 $D423 LD DE,$1119   ;
 $D426 ADC A,C       ;
 $D427 LD DE,$1029   ;
 $D42A ADD HL,SP     ;
 $D42B LD DE,$1139   ;
 $D42E ADD HL,HL     ;
 $D42F LD DE,$1069   ;
 $D432 ADD HL,DE     ;
 $D433 LD DE,$1189   ;
 $D436 LD L,C        ;
 $D437 LD DE,$1139   ;
 $D43A ADD HL,HL     ;
 $D43B LD DE,$1089   ;
 $D43E ADC A,C       ;
 $D43F LD DE,$1169   ;
 $D442 ADD HL,SP     ;
 $D443 LD DE,$1129   ;
 $D446 LD SP,HL      ;
 $D447 ADD HL,HL     ;
 $D448 DJNZ $D4B3    ;
 $D44A DJNZ $D485    ;
 $D44C LD DE,$1029   ;
 $D44F LD SP,HL      ;
*$D450 EXX           ;
 $D451 LD DE,$F9F9   ;
 $D454 NOP           ;
 $D455 DAA           ;
 $D456 LD A,($3225)  ;
 $D459 LD (HL),D     ;
 $D45A INC L         ;
 $D45B INC A         ;
 $D45C JR NZ,$D480   ;
 $D45E DJNZ $D482    ;
 $D460 DJNZ $D494    ;
 $D462 DJNZ $D476    ;
 $D464 DJNZ $D4A8    ;
 $D466 DJNZ $D49A    ;
 $D468 DJNZ $D48C    ;
 $D46A DJNZ $D49E    ;
 $D46C DJNZ $D4A0    ;
 $D46E DJNZ $D492    ;
 $D470 DJNZ $D494    ;
 $D472 DJNZ $D4A6    ;
 $D474 DJNZ $D488    ;
*$D476 DJNZ $D4BA    ;
 $D478 DJNZ $D4AC    ;
 $D47A DJNZ $D49E    ;
 $D47C DJNZ $D4B0    ;
 $D47E DJNZ $D4B2    ;
*$D480 DJNZ $D4A4    ;
*$D482 DJNZ $D4A6    ;
 $D484 DJNZ $D4B8    ;
 $D486 DJNZ $D49A    ;
*$D488 DJNZ $D4CC    ;
 $D48A DJNZ $D4BE    ;
*$D48C DJNZ $D4B0    ;
 $D48E DJNZ $D4C2    ;
 $D490 DJNZ $D4C4    ;
*$D492 DJNZ $D4A6    ;
*$D494 DEC D         ;
 $D495 LD D,$22      ;
 $D497 DJNZ $D4CB    ;
 $D499 DJNZ $D4AD    ;
 $D49B DJNZ $D4DF    ;
 $D49D DJNZ $D4D1    ;
 $D49F DJNZ $D4C3    ;
 $D4A1 DJNZ $D4D5    ;
 $D4A3 DJNZ $D4D7    ;
 $D4A5 DJNZ $D4B9    ;
 $D4A7 DEC D         ;
*$D4A8 LD DE,$1022   ;
 $D4AB LD (DE),A     ;
*$D4AC DEC D         ;
*$D4AD LD (DE),A     ;
 $D4AE DJNZ $D4C2    ;
*$D4B0 DJNZ $D4F4    ;
*$D4B2 DJNZ $D4E6    ;
 $D4B4 DJNZ $D4D8    ;
 $D4B6 DJNZ $D4CD    ;
*$D4B8 LD ($3516),HL ;
 $D4BB LD D,$25      ;
 $D4BD LD DE,$1025   ;
 $D4C0 LD (DE),A     ;
 $D4C1 DEC H         ;
*$D4C2 DJNZ $D4D6    ;
*$D4C4 LD D,$15      ;
 $D4C6 LD ($1615),HL ;
 $D4C9 DEC D         ;
 $D4CA LD ($1211),HL ;
*$D4CD DEC D         ;
 $D4CE LD D,$15      ;
 $D4D0 LD ($3511),HL ;
 $D4D3 LD DE,$1125   ;
*$D4D6 DEC H         ;
*$D4D7 LD D,$35      ;
 $D4D9 LD D,$15      ;
 $D4DB LD DE,$1145   ;
 $D4DE DEC (HL)      ;
*$D4DF LD DE,$1125   ;
 $D4E2 DEC (HL)      ;
 $D4E3 LD DE,$1135   ;
*$D4E6 DEC H         ;
 $D4E7 LD DE,$1125   ;
 $D4EA DEC (HL)      ;
 $D4EB LD DE,$1115   ;
 $D4EE LD B,L        ;
 $D4EF LD DE,$1135   ;
 $D4F2 DEC H         ;
 $D4F3 LD DE,$1135   ;
 $D4F6 DEC (HL)      ;
 $D4F7 LD DE,$1124   ;
 $D4FA INC H         ;
 $D4FB LD DE,$1135   ;
 $D4FE DEC D         ;
 $D4FF LD DE,$1145   ;
 $D502 DEC (HL)      ;
 $D503 LD DE,$1125   ;
 $D506 DEC (HL)      ;
 $D507 LD DE,$1135   ;
 $D50A INC H         ;
 $D50B LD DE,$1124   ;
 $D50E INC (HL)      ;
 $D50F LD DE,$1114   ;
 $D512 LD B,H        ;
 $D513 LD DE,$1134   ;
 $D516 INC H         ;
 $D517 LD DE,$1134   ;
 $D51A INC (HL)      ;
 $D51B LD DE,$1124   ;
 $D51E INC H         ;
 $D51F LD DE,$1134   ;
 $D522 INC D         ;
 $D523 LD DE,$1144   ;
 $D526 INC (HL)      ;
 $D527 LD DE,$1124   ;
 $D52A INC (HL)      ;
 $D52B LD DE,$1134   ;
 $D52E INC H         ;
 $D52F LD DE,$1124   ;
 $D532 INC (HL)      ;
 $D533 LD DE,$1114   ;
 $D536 LD B,H        ;
 $D537 INC DE        ;
 $D538 INC (HL)      ;
 $D539 LD DE,$1124   ;
 $D53C INC (HL)      ;
 $D53D LD DE,$1134   ;
 $D540 INC H         ;
 $D541 LD DE,$1324   ;
 $D544 INC (HL)      ;
 $D545 LD DE,$1114   ;
 $D548 LD B,H        ;
 $D549 INC DE        ;
 $D54A INC (HL)      ;
 $D54B LD DE,$1324   ;
 $D54E INC (HL)      ;
 $D54F LD DE,$1134   ;
 $D552 INC H         ;
 $D553 LD DE,$1324   ;
 $D556 INC (HL)      ;
 $D557 INC DE        ;
 $D558 INC D         ;
 $D559 LD DE,$1344   ;
 $D55C INC (HL)      ;
 $D55D LD DE,$1324   ;
 $D560 INC (HL)      ;
 $D561 LD DE,$1134   ;
 $D564 INC H         ;
 $D565 LD DE,$1324   ;
 $D568 INC (HL)      ;
 $D569 INC DE        ;
 $D56A INC D         ;
 $D56B INC DE        ;
 $D56C LD B,H        ;
 $D56D INC DE        ;
 $D56E INC (HL)      ;
 $D56F LD DE,$1324   ;
 $D572 INC (HL)      ;
 $D573 LD DE,$1134   ;
 $D576 INC H         ;
 $D577 LD DE,$1324   ;
 $D57A INC (HL)      ;
 $D57B INC DE        ;
 $D57C INC D         ;
 $D57D INC DE        ;
 $D57E LD B,H        ;
 $D57F INC DE        ;
 $D580 INC (HL)      ;
 $D581 INC DE        ;
 $D582 INC H         ;
 $D583 INC DE        ;
 $D584 INC (HL)      ;
 $D585 INC DE        ;
 $D586 INC (HL)      ;
 $D587 LD DE,$1324   ;
 $D58A INC H         ;
 $D58B INC DE        ;
 $D58C INC (HL)      ;
 $D58D INC DE        ;
 $D58E INC D         ;
 $D58F INC DE        ;
 $D590 LD B,H        ;
 $D591 INC DE        ;
 $D592 INC (HL)      ;
 $D593 INC DE        ;
 $D594 INC H         ;
 $D595 INC DE        ;
 $D596 INC (HL)      ;
 $D597 INC DE        ;
 $D598 INC (HL)      ;
 $D599 LD DE,$1324   ;
 $D59C INC H         ;
 $D59D INC DE        ;
 $D59E INC (HL)      ;
 $D59F INC DE        ;
 $D5A0 INC D         ;
 $D5A1 INC DE        ;
 $D5A2 LD B,H        ;
 $D5A3 INC DE        ;
 $D5A4 INC (HL)      ;
 $D5A5 INC DE        ;
 $D5A6 INC H         ;
 $D5A7 INC DE        ;
 $D5A8 INC (HL)      ;
 $D5A9 INC DE        ;
 $D5AA INC H         ;
 $D5AB NOP           ;

; Handler: Samoa
@label=Handler_Samoa
c$D5AC LD A,$02                             ;
 $D5AE LD ($99AA),A                         ;
 $D5B1 LD A,($7238)                         ;
 $D5B4 RLA                                  ;
 $D5B5 RLA                                  ;
 $D5B6 RLA                                  ;
 $D5B7 RLA                                  ;
 $D5B8 AND $F0                              ;
 $D5BA LD HL,$EFFF                          ;
 $D5BD OR (HL)                              ;
 $D5BE LD (HL),A                            ;
 $D5BF CALL $D615                           ;
*$D5C2 LD A,($72FF)                         ;
 $D5C5 CP $00                               ;
 $D5C7 JR NZ,$D5E0                          ;
 $D5C9 LD HL,$7300                          ;
 $D5CC LD ($724A),HL                        ;
 $D5CF LD ($7252),HL                        ;
 $D5D2 LD A,($7254)                         ;
 $D5D5 AND $38                              ;
 $D5D7 CP $20                               ;
 $D5D9 RET Z                                ;
 $D5DA LD HL,$72FF                          ;
 $D5DD LD (HL),$01                          ;
 $D5DF RET                                  ;
*$D5E0 LD A,($7240)                         ;
 $D5E3 CP $00                               ;
 $D5E5 RET Z                                ;
 $D5E6 LD A,($7206)                         ;
 $D5E9 BIT 6,A                              ;
 $D5EB LD DE,$FF80                          ;
 $D5EE JR Z,$D5FE                           ;
 $D5F0 RRCA                                 ;
 $D5F1 RRCA                                 ;
 $D5F2 AND $07                              ;
 $D5F4 LD E,A                               ;
 $D5F5 LD D,$00                             ;
 $D5F7 LD HL,$D675                          ;
 $D5FA ADD HL,DE                            ;
 $D5FB LD E,(HL)                            ;
 $D5FC INC HL                               ;
 $D5FD LD D,(HL)                            ;
*$D5FE LD HL,($7204)                        ;
 $D601 ADD HL,DE                            ;
 $D602 LD DE,($7244)                        ;
 $D606 AND A                                ;
 $D607 SBC HL,DE                            ;
 $D609 RET NZ                               ;
 $D60A LD A,$32                             ;
 $D60C LD ($7238),A                         ;
 $D60F LD HL,$7200                          ;
 $D612 SET 4,(HL)                           ;
 $D614 RET                                  ;
*$D615 CALL $980E                           ;
 $D618 CALL $98AB                           ;
 $D61B LD B,E                               ;
 $D61C LD A,$00                             ;
 $D61E LD ($72FF),A                         ;
 $D621 LD DE,($7204)                        ;
 $D625 AND A                                ;
 $D626 SBC HL,DE                            ;
 $D628 INC H                                ;
 $D629 LD A,C                               ;
 $D62A OR $C0                               ;
 $D62C LD C,A                               ;
 $D62D LD E,B                               ;
 $D62E LD A,$01                             ;
 $D630 CP H                                 ;
 $D631 JR C,$D644                           ;
 $D633 LD A,L                               ;
 $D634 ADD A,$08                            ;
 $D636 AND $3F                              ;
 $D638 CP $10                               ;
 $D63A JR NC,$D644                          ;
 $D63C LD B,$78                             ;
 $D63E CALL $98F2                           ;
 $D641 JP $D5C2                             ;
*$D644 LD A,$01                             ;
 $D646 LD ($7247),A                         ;
 $D649 RET                                  ;
 $D64A LD E,D                               ;
 $D64B SUB $01                              ;
 $D64D LD (BC),A                            ;
 $D64E LD L,D                               ;
 $D64F SUB $00                              ;
 $D651 NOP                                  ;
 $D652 NOP                                  ;
 $D653 NOP                                  ;
 $D654 NOP                                  ;
 $D655 NOP                                  ;
 $D656 NOP                                  ;
 $D657 NOP                                  ;
 $D658 NOP                                  ;
 $D659 NOP                                  ;
 $D65A NOP                                  ;
 $D65B NOP                                  ;
 $D65C EX AF,AF'                            ;
 $D65D INC A                                ;
 $D65E LD A,B                               ;
 $D65F LD A,B                               ;
 $D660 JR NC,$D662                          ;
*$D662 NOP                                  ;
 $D663 NOP                                  ;
 $D664 NOP                                  ;
 $D665 NOP                                  ;
 $D666 NOP                                  ;
 $D667 NOP                                  ;
 $D668 NOP                                  ;
 $D669 NOP                                  ;
 $D66A RLCA                                 ;
 $D66B RLCA                                 ;
 $D66C DEFB $5A,$D6,$01,$01,$74,$D6,$00,$00 ;
 $D674 DEFB $11,$C2,$FF,$00,$00,$BE,$FF,$00 ;
 $D67C DEFB $00                             ;

; Sub-Game Data: Benares
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F14)(benares) }
; UDGTABLE#
; #POPS
@label=Benares_Data
b$D67D DEFB $9F,$D9,$1F,$D9,$16,$DA,$10,$DA
 $D685 DEFB $07,$60,$DA
 $D688 DEFW $AA9E
@label=Benares_SubGame
 $D68A DEFW $D6E2                           ; Location subgame routine.
@label=Benares_SetUp
 $D68C DEFW $D6A9                           ; Initialisation routine.
 $D68E DEFB $20,$7B,$CE,$D6,$01,$00,$15,$00
 $D696 DEFB $30,$00,$00,$30,$00,$46,$40,$72
 $D69E DEFB $1F,$A7,$00,$00,$00,$00,$00,$00
 $D6A6 DEFB $00,$00,$09,$21,$06,$6F,$11,$3F
 $D6AE DEFB $FF,$06,$1E,$C5,$06,$05,$3E,$04
 $D6B6 DEFB $E5,$CB,$46,$23,$20,$05,$FE,$02
 $D6BE DEFB $28,$01,$3D,$77,$19,$10,$F2,$E1
 $D6C6 DEFB $01,$06,$00,$09,$C1,$10,$E4,$C9
 $D6CE DEFB $48,$75,$72,$72,$79,$20,$63,$75
 $D6D6 DEFB $72,$72,$79,$20,$54,$72,$69,$73
 $D6DE DEFB $68,$6E,$61,$A0,$3A,$07,$72,$FE
 $D6E6 DEFB $00,$C8,$2A,$E3,$99,$11,$38,$00
 $D6EE DEFB $19,$3E,$F0,$BD,$20,$03,$21,$40
 $D6F6 DEFB $72,$22,$E3,$99,$CB,$7E,$C2,$8F
 $D6FE DEFB $D7,$3A,$FF,$77,$FE,$08,$28,$E8
 $D706 DEFB $3C,$32,$FF,$77,$CB,$FE,$CD,$39
 $D70E DEFB $94,$DD,$2A,$E3,$99,$DD,$7E,$00
 $D716 DEFB $FE,$80,$20,$47,$CD,$19,$96,$5F
 $D71E DEFB $16,$40,$E6,$40,$82,$16,$20,$CB
 $D726 DEFB $7B,$28,$04,$C6,$3E,$16,$30,$DD
 $D72E DEFB $2A,$E3,$99,$6F,$7B,$E6,$0F,$C6
 $D736 DEFB $06,$DD,$77,$07,$7B,$E6,$01,$3C
 $D73E DEFB $DD,$77,$0F,$32,$AA,$99,$7A,$26
 $D746 DEFB $79,$CD,$78,$93,$DD,$75,$04,$DD
 $D74E DEFB $74,$05,$DD,$72,$06,$E6,$62,$CA
 $D756 DEFB $29,$99,$21,$FF,$77,$35,$DD,$36
 $D75E DEFB $00,$00,$C9,$21,$AA,$99,$DD,$5E
 $D766 DEFB $0F,$73,$DD,$36,$07,$00,$FE,$82
 $D76E DEFB $20,$07,$DD,$36,$06,$08,$C3,$26
 $D776 DEFB $99,$FE,$83,$20,$07,$DD,$36,$06
 $D77E DEFB $18,$C3,$26,$99,$FE,$84,$20,$07
 $D786 DEFB $DD,$36,$06,$18,$C3,$26,$99,$E1
 $D78E DEFB $C9,$CD,$39,$94,$DD,$2A,$E3,$99
 $D796 DEFB $DD,$7E,$0F,$32,$AA,$99,$DD,$CB
 $D79E DEFB $06,$6E,$28,$67,$DD,$6E,$04,$DD
 $D7A6 DEFB $66,$05,$CD,$04,$96,$20,$0B,$21
 $D7AE DEFB $FF,$77,$35,$DD,$36,$00,$00,$C3
 $D7B6 DEFB $42,$99,$DD,$CB,$06,$AE,$DD,$7E
 $D7BE DEFB $00,$FE,$83,$C2,$26,$99,$DD,$6E
 $D7C6 DEFB $04,$DD,$66,$05,$56,$23,$5E,$1A
 $D7CE DEFB $E6,$72,$FE,$30,$C2,$26,$99,$DD
 $D7D6 DEFB $36,$06,$40,$DD,$36,$00,$04,$21
 $D7DE DEFB $AD,$99,$35,$28,$12,$DD,$6E,$04
 $D7E6 DEFB $DD,$66,$05,$3A,$00,$72,$E6,$01
 $D7EE DEFB $28,$0F,$CD,$9D,$93,$18,$63,$ED
 $D7F6 DEFB $7B,$AE,$99,$21,$FA,$EF,$CB,$C6
 $D7FE DEFB $C9,$CD,$9D,$93,$21,$00,$72,$CB
 $D806 DEFB $86,$18,$4F,$DD,$CB,$06,$EE,$DD
 $D80E DEFB $7E,$00,$FE,$80,$20,$1F,$DD,$7E
 $D816 DEFB $06,$CD,$AE,$D8,$CD,$19,$96,$E6
 $D81E DEFB $07,$C6,$03,$DD,$2A,$E3,$99,$DD
 $D826 DEFB $77,$07,$DD,$36,$06,$08,$DD,$36
 $D82E DEFB $00,$81,$C3,$26,$99,$FE,$81,$20
 $D836 DEFB $2D,$3E,$28,$CD,$AE,$D8,$30,$21
 $D83E DEFB $DD,$36,$00,$02,$DD,$36,$06,$40
 $D846 DEFB $3E,$00,$32,$AA,$99,$CD,$4D,$99
 $D84E DEFB $DD,$2A,$E3,$99,$DD,$7E,$0F,$32
 $D856 DEFB $AA,$99,$21,$FF,$77,$35,$C3,$26
 $D85E DEFB $99,$3E,$28,$C3,$D6,$D8,$FE,$82
 $D866 DEFB $20,$1B,$3E,$28,$CD,$AE,$D8,$DD
 $D86E DEFB $7E,$05,$FE,$7C,$20,$0A,$DD,$CB
 $D876 DEFB $06,$AE,$DD,$36,$00,$03,$18,$DA
 $D87E DEFB $3E,$28,$C3,$D6,$D8,$FE,$83,$20
 $D886 DEFB $17,$3E,$38,$CD,$AE,$D8,$FE,$10
 $D88E DEFB $28,$05,$3E,$38,$C3,$D6,$D8,$DD
 $D896 DEFB $75,$04,$DD,$74,$05,$C3,$26,$99
 $D89E DEFB $FE,$84,$20,$0A,$3E,$38,$CD,$AE
 $D8A6 DEFB $D8,$3E,$38,$C3,$D6,$D8,$E1,$C9
 $D8AE DEFB $F5,$DD,$6E,$04,$DD,$66,$05,$CD
 $D8B6 DEFB $78,$93,$E6,$72,$D1,$28,$0E,$CB
 $D8BE DEFB $77,$C8,$ED,$4B,$00,$72,$CB,$E1
 $D8C6 DEFB $ED,$43,$00,$72,$C9,$DD,$72,$06
 $D8CE DEFB $DD,$35,$07,$37,$C8,$C1,$18,$21
 $D8D6 DEFB $DD,$BE,$06,$DD,$7E,$06,$20,$0B
 $D8DE DEFB $CD,$19,$96,$E6,$10,$F6,$20,$DD
 $D8E6 DEFB $2A,$E3,$99,$DD,$6E,$04,$DD,$66
 $D8EE DEFB $05,$57,$CD,$78,$93,$E6,$72,$20
 $D8F6 DEFB $0C,$DD,$72,$06,$DD,$75,$04,$DD
 $D8FE DEFB $74,$05,$C3,$26,$99,$CD,$BD,$D8
 $D906 DEFB $7A,$EE,$10,$57,$DD,$66,$05,$DD
 $D90E DEFB $6E,$04,$CD,$78,$93,$E6,$72,$28
 $D916 DEFB $E0,$CD,$BD,$D8,$DD,$CB,$06,$AE
 $D91E DEFB $C9,$00,$00,$AA,$55,$00,$00,$AA
 $D926 DEFB $55,$6C,$13,$AC,$5B,$06,$01,$AA
 $D92E DEFB $55,$98,$68,$C9,$36,$CC,$33,$CC
 $D936 DEFB $33,$CC,$B3,$8C,$8B,$98,$69,$C9
 $D93E DEFB $36,$FF,$7F,$DF,$37,$6D,$B3,$8C
 $D946 DEFB $8B,$FF,$FF,$FF,$FF,$FF,$7F,$DF
 $D94E DEFB $37,$00,$00,$FF,$00,$01,$83,$C4
 $D956 DEFB $78,$CC,$33,$CC,$1B,$C4,$33,$C4
 $D95E DEFB $33,$CC,$CC,$CC,$CC,$CC,$CC,$CC
 $D966 DEFB $CC,$80,$80,$80,$80,$80,$80,$80
 $D96E DEFB $FF,$00,$00,$00,$00,$00,$00,$00
 $D976 DEFB $FF,$00,$00,$00,$00,$00,$00,$00
 $D97E DEFB $00,$C0,$C0,$EA,$D5,$C0,$C0,$EA
 $D986 DEFB $D5,$01,$03,$06,$0F,$18,$30,$FF
 $D98E DEFB $FF,$CC,$CC,$CC,$FF,$CC,$CC,$FF
 $D996 DEFB $FF,$CD,$CF,$CE,$FC,$DC,$FC,$EC
 $D99E DEFB $CC,$1B,$19,$2A,$19,$2A,$19,$3A
 $D9A6 DEFB $19,$1A,$19,$3A,$19,$2A,$19,$2A
 $D9AE DEFB $19,$2A,$7B,$19,$2A,$19,$1A,$19
 $D9B6 DEFB $1A,$19,$2A,$19,$2A,$19,$2A,$29
 $D9BE DEFB $4A,$19,$2A,$FB,$FB,$2B,$14,$15
 $D9C6 DEFB $6B,$1D,$2E,$1F,$FB,$5B,$12,$13
 $D9CE DEFB $36,$2B,$10,$1C,$38,$F0,$50,$27
 $D9D6 DEFB $5B,$10,$1C,$38,$F0,$50,$27,$5B
 $D9DE DEFB $10,$1C,$38,$F0,$50,$27,$5B,$10
 $D9E6 DEFB $1C,$38,$F0,$50,$11,$17,$5B,$10
 $D9EE DEFB $1C,$20,$1C,$F0,$60,$11,$5B,$10
 $D9F6 DEFB $1C,$20,$1C,$F0,$A0,$2B,$F0,$F0
 $D9FE DEFB $2B,$F0,$F0,$2B,$F0,$F0,$FB,$FB
 $DA06 DEFB $FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB
 $DA0E DEFB $BB,$00,$30,$28,$70,$30,$07,$68
 $DA16 DEFB $F0,$B0,$64,$F0,$B0,$74,$F3,$C3
 $DA1E DEFB $54,$22,$31,$F2,$52,$73,$22,$31
 $DA26 DEFB $F2,$52,$73,$22,$31,$F2,$52,$33
 $DA2E DEFB $14,$33,$22,$31,$F2,$52,$73,$22
 $DA36 DEFB $31,$F2,$52,$73,$22,$33,$F2,$52
 $DA3E DEFB $73,$22,$33,$F2,$52,$73,$22,$33
 $DA46 DEFB $F2,$52,$73,$22,$33,$F2,$52,$73
 $DA4E DEFB $F2,$A2,$73,$F5,$A5,$71,$F5,$A5
 $DA56 DEFB $71,$F5,$F5,$F5,$F5,$F5,$F5,$F5
 $DA5E DEFB $55,$00,$83,$83,$68,$1A,$0C,$0E
 $DA66 DEFB $50,$1A,$0C,$0E,$50,$1B,$0C,$0E
 $DA6E DEFB $50,$1B,$0C,$0E,$50,$1B,$0C,$0F
 $DA76 DEFB $50,$1B,$6C,$17,$FC,$FC,$FC,$74
 $DA7E DEFB $0D,$1C,$15,$14,$0D,$08,$11,$0C
 $DA86 DEFB $99,$00,$08,$9F,$48,$9F,$09,$A3
 $DA8E DEFB $89,$A5

; Sub-Game Data: Chichen Itza
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F7E)(chichen-itza) }
; UDGTABLE#
; #POPS
@label=ChichenItza_Data
b$DA90 DEFB $78,$DC,$28,$DC,$31,$DD,$2C,$DD
 $DA98 DEFB $07,$CA,$DD
 $DA9B DEFW $AA7D
@label=ChichenItza_SubGame
 $DA9D DEFW $DAE2                           ; Location subgame routine.
@label=ChichenItza_SetUp
 $DA9F DEFW $DABC                           ; Initialisation routine.
 $DAA1 DEFB $20,$7C,$CB,$DA,$01,$00,$15,$00
 $DAA9 DEFB $25,$00,$00,$50,$00,$3C,$60,$72
 $DAB1 DEFB $89,$A5,$00,$00,$00,$00,$00,$00
 $DAB9 DEFB $00,$00,$06,$3E,$07,$32,$C5,$65
 $DAC1 DEFB $32,$85,$66,$32,$85,$69,$32,$45
 $DAC9 DEFB $6A,$C9,$45,$63,$63,$75,$73,$73
 $DAD1 DEFB $61,$20,$6D,$69,$2C,$20,$54,$72
 $DAD9 DEFB $61,$73,$68,$6F,$6D,$62,$72,$65
 $DAE1 DEFB $A0,$2A,$E3,$99,$11,$38,$00,$19
 $DAE9 DEFB $3E,$A8,$BD,$20,$03,$21,$60,$72
 $DAF1 DEFB $22,$E3,$99,$CB,$7E,$CA,$A7,$DB
 $DAF9 DEFB $DD,$2A,$E3,$99,$DD,$7E,$07,$D6
 $DB01 DEFB $08,$DD,$77,$07,$E6,$F8,$20,$D9
 $DB09 DEFB $CD,$39,$94,$DD,$CB,$07,$DE,$DD
 $DB11 DEFB $CB,$06,$6E,$28,$1F,$DD,$CB,$06
 $DB19 DEFB $AE,$DD,$6E,$04,$DD,$66,$05,$CD
 $DB21 DEFB $04,$96,$20,$0A,$DD,$36,$00,$00
 $DB29 DEFB $CD,$0C,$DC,$C3,$42,$99,$CD,$0C
 $DB31 DEFB $DC,$C3,$26,$99,$DD,$34,$00,$28
 $DB39 DEFB $30,$DD,$6E,$04,$DD,$66,$05,$CD
 $DB41 DEFB $75,$93,$E6,$62,$20,$23,$DD,$75
 $DB49 DEFB $04,$DD,$74,$05,$DD,$CB,$06,$EE
 $DB51 DEFB $CD,$19,$96,$E6,$35,$DD,$2A,$E3
 $DB59 DEFB $99,$20,$D3,$3E,$00,$32,$AA,$99
 $DB61 DEFB $CD,$4D,$99,$DD,$2A,$E3,$99,$18
 $DB69 DEFB $C5,$E6,$40,$28,$05,$21,$00,$72
 $DB71 DEFB $CB,$E6,$CD,$19,$96,$E6,$18,$DD
 $DB79 DEFB $2A,$E3,$99,$DD,$77,$06,$3A,$A5
 $DB81 DEFB $99,$F6,$F8,$D6,$03,$DD,$77,$00
 $DB89 DEFB $CD,$19,$96,$DD,$2A,$E3,$99,$4F
 $DB91 DEFB $E6,$C0,$20,$9A,$DD,$7E,$07,$E6
 $DB99 DEFB $07,$4F,$3A,$A5,$99,$E6,$38,$B1
 $DBA1 DEFB $DD,$77,$07,$C3,$2F,$DB,$CD,$39
 $DBA9 DEFB $94,$CD,$19,$96,$DD,$2A,$E3,$99
 $DBB1 DEFB $CB,$47,$28,$3F,$E6,$3E,$28,$F1
 $DBB9 DEFB $FE,$3E,$28,$ED,$F6,$C0,$6F,$26
 $DBC1 DEFB $7D,$06,$18,$DD,$70,$06,$DD,$70
 $DBC9 DEFB $03,$CD,$75,$93,$E6,$62,$20,$D9
 $DBD1 DEFB $DD,$75,$04,$DD,$74,$05,$3A,$A5
 $DBD9 DEFB $99,$4F,$F6,$F8,$D6,$03,$DD,$77
 $DBE1 DEFB $00,$79,$E6,$07,$C6,$08,$DD,$77
 $DBE9 DEFB $07,$DD,$CB,$06,$EE,$CD,$0C,$DC
 $DBF1 DEFB $C3,$29,$99,$26,$00,$11,$3E,$7A
 $DBF9 DEFB $06,$10,$CB,$4F,$20,$05,$11,$00
 $DC01 DEFB $7A,$06,$00,$E6,$F0,$6F,$29,$29
 $DC09 DEFB $19,$18,$B8,$DD,$7E,$07,$4F,$E6
 $DC11 DEFB $01,$3C,$32,$AA,$99,$79,$E6,$06
 $DC19 DEFB $5F,$16,$00,$21,$88,$DA,$19,$5E
 $DC21 DEFB $23,$56,$ED,$53,$E5,$99,$C9,$00
 $DC29 DEFB $00,$FF,$FF,$00,$00,$FF,$FF,$02
 $DC31 DEFB $01,$01,$01,$01,$01,$01,$7F,$01
 $DC39 DEFB $01,$03,$3F,$3F,$2B,$0B,$0B,$03
 $DC41 DEFB $0B,$63,$23,$39,$2B,$03,$03,$13
 $DC49 DEFB $13,$13,$3B,$01,$0B,$43,$03,$00
 $DC51 DEFB $00,$FF,$1E,$00,$20,$54,$08,$00
 $DC59 DEFB $00,$FF,$F0,$C0,$88,$0C,$00,$7E
 $DC61 DEFB $81,$81,$01,$01,$81,$7F,$03,$00
 $DC69 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $DC71 DEFB $20,$40,$04,$10,$00,$00,$00,$18
 $DC79 DEFB $60,$11,$48,$19,$18,$19,$28,$12
 $DC81 DEFB $28,$29,$28,$19,$28,$13,$30,$28
 $DC89 DEFB $60,$13,$98,$14,$F8,$60,$14,$88
 $DC91 DEFB $16,$13,$35,$16,$17,$25,$16,$15
 $DC99 DEFB $17,$26,$15,$28,$60,$13,$16,$25
 $DCA1 DEFB $16,$25,$16,$15,$18,$14,$48,$13
 $DCA9 DEFB $48,$14,$68,$11,$98,$11,$48,$14
 $DCB1 DEFB $48,$11,$48,$13,$68,$12,$98,$12
 $DCB9 DEFB $98,$12,$B8,$13,$48,$17,$48,$14
 $DCC1 DEFB $98,$13,$B8,$14,$48,$13,$48,$14
 $DCC9 DEFB $48,$17,$48,$14,$B8,$13,$48,$14
 $DCD1 DEFB $48,$13,$48,$13,$48,$14,$48,$17
 $DCD9 DEFB $68,$13,$48,$13,$48,$14,$48,$13
 $DCE1 DEFB $48,$11,$48,$14,$F8,$B8,$12,$F8
 $DCE9 DEFB $68,$17,$98,$13,$48,$17,$B8,$17
 $DCF1 DEFB $48,$13,$98,$14,$48,$13,$68,$17
 $DCF9 DEFB $48,$13,$48,$14,$48,$17,$48,$13
 $DD01 DEFB $48,$14,$68,$13,$48,$14,$48,$13
 $DD09 DEFB $48,$14,$48,$13,$48,$13,$F8,$F8
 $DD11 DEFB $F8,$88,$17,$98,$17,$B8,$17,$48
 $DD19 DEFB $17,$48,$14,$98,$13,$68,$17,$48
 $DD21 DEFB $13,$48,$14,$48,$13,$48,$17,$48
 $DD29 DEFB $14,$48,$00,$30,$70,$38,$78,$34
 $DD31 DEFB $70,$11,$40,$54,$10,$94,$D0,$32
 $DD39 DEFB $63,$10,$F3,$70,$22,$63,$60,$11
 $DD41 DEFB $40,$11,$F0,$50,$12,$10,$43,$10
 $DD49 DEFB $43,$10,$63,$11,$93,$11,$43,$10
 $DD51 DEFB $42,$11,$22,$23,$10,$22,$43,$10
 $DD59 DEFB $93,$10,$93,$10,$B3,$10,$43,$11
 $DD61 DEFB $43,$10,$93,$10,$B3,$10,$43,$10
 $DD69 DEFB $43,$10,$43,$11,$43,$10,$B3,$10
 $DD71 DEFB $43,$10,$43,$10,$43,$10,$43,$10
 $DD79 DEFB $43,$10,$63,$10,$42,$10,$32,$13
 $DD81 DEFB $10,$42,$10,$22,$23,$11,$42,$10
 $DD89 DEFB $12,$F3,$A3,$10,$F3,$63,$11,$93
 $DD91 DEFB $10,$43,$11,$B3,$11,$43,$10,$93
 $DD99 DEFB $10,$43,$10,$63,$11,$43,$10,$43
 $DDA1 DEFB $10,$43,$11,$43,$10,$43,$10,$63
 $DDA9 DEFB $10,$12,$33,$10,$22,$23,$10,$32
 $DDB1 DEFB $13,$10,$12,$33,$10,$42,$10,$32
 $DDB9 DEFB $F3,$F3,$F3,$53,$11,$93,$11,$B3
 $DDC1 DEFB $11,$43,$11,$43,$10,$93,$10,$43
 $DDC9 DEFB $00,$1C,$65,$1C,$29,$07,$39,$1C
 $DDD1 DEFB $29,$07,$11,$07,$11,$07,$11,$1C
 $DDD9 DEFB $25,$04,$06,$10,$06,$10,$06,$18
 $DDE1 DEFB $06,$24,$06,$10,$07,$10,$07,$10
 $DDE9 DEFB $07,$18,$06,$24,$06,$54,$06,$10
 $DDF1 DEFB $06,$10,$06,$24,$06,$2C,$06,$10
 $DDF9 DEFB $06,$10,$06,$10,$06,$10,$06,$2C
 $DE01 DEFB $06,$10,$06,$10,$06,$10,$06,$10
 $DE09 DEFB $06,$10,$06,$18,$07,$10,$07,$10
 $DE11 DEFB $07,$10,$07,$10,$07,$10,$07,$C0
 $DE19 DEFB $06,$24,$06,$10,$06,$2C,$06,$10
 $DE21 DEFB $06,$24,$06,$10,$06,$18,$06,$10
 $DE29 DEFB $06,$10,$06,$10,$06,$10,$06,$10
 $DE31 DEFB $06,$18,$07,$10,$07,$10,$07,$10
 $DE39 DEFB $07,$10,$07,$10,$07,$D4,$06,$24
 $DE41 DEFB $06,$2C,$06,$10,$06,$10,$06,$24
 $DE49 DEFB $06,$10,$00

; Sub-Game Data: New Orleans
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8F9C)(new-orleans) }
; UDGTABLE#
; #POPS
@label=NewOrleans_Data
b$DE4C DEFB $E8,$DF,$68,$DF,$76,$E0,$69,$E0
 $DE54 DEFB $07,$DF,$E0
 $DE57 DEFW $AA6A
@label=NewOrleans_SubGame
 $DE59 DEFW $DEB2                           ; Location subgame routine.
@label=NewOrleans_SetUp
 $DE5B DEFW $DE8B                           ; Initialisation routine.
 $DE5D DEFB $20,$7C,$78,$DE,$01,$00,$10,$00
 $DE65 DEFB $20,$00,$00,$10,$00,$64,$F8,$72
 $DE6D DEFB $7F,$A8,$D0,$72,$48,$AA,$00,$7C
 $DE75 DEFB $1F,$07,$07,$48,$69,$20,$47,$61
 $DE7D DEFB $72,$62,$61,$67,$65,$20,$67,$6F
 $DE85 DEFB $62,$62,$6C,$65,$72,$A0,$11,$18
 $DE8D DEFB $00,$ED,$53,$6E,$92,$11,$40,$72
 $DE95 DEFB $ED,$53,$B8,$99,$DD,$21,$ED,$E0
 $DE9D DEFB $06,$06,$C3,$26,$92,$CD,$0E,$98
 $DEA5 DEFB $CD,$AB,$98,$06,$79,$7B,$D6,$08
 $DEAD DEFB $5F,$CD,$F2,$98,$C9,$3E,$00,$32
 $DEB5 DEFB $AA,$99,$CD,$A2,$DE,$3A,$07,$72
 $DEBD DEFB $FE,$00,$C8,$3E,$01,$32,$AA,$99
 $DEC5 DEFB $CD,$C8,$DE,$2A,$E3,$99,$11,$38
 $DECD DEFB $00,$19,$3E,$78,$BC,$20,$03,$21
 $DED5 DEFB $F8,$72,$22,$E3,$99,$CB,$7E,$28
 $DEDD DEFB $4E,$CD,$39,$94,$DD,$2A,$E3,$99
 $DEE5 DEFB $DD,$CB,$06,$6E,$28,$07,$DD,$CB
 $DEED DEFB $06,$AE,$C3,$26,$99,$DD,$6E,$04
 $DEF5 DEFB $DD,$66,$05,$E5,$DD,$21,$7F,$A8
 $DEFD DEFB $CD,$04,$96,$E1,$20,$08,$2A,$E3
 $DF05 DEFB $99,$36,$00,$C3,$42,$99,$CD,$75
 $DF0D DEFB $93,$DD,$2A,$E3,$99,$E6,$60,$20
 $DF15 DEFB $0D,$DD,$75,$04,$DD,$74,$05,$DD
 $DF1D DEFB $CB,$06,$EE,$C3,$26,$99,$E6,$40
 $DF25 DEFB $C8,$21,$00,$72,$CB,$E6,$C9,$CD
 $DF2D DEFB $39,$94,$CD,$19,$96,$4F,$E6,$E0
 $DF35 DEFB $FE,$A0,$D0,$3C,$6F,$3E,$07,$A1
 $DF3D DEFB $C0,$26,$00,$11,$00,$7C,$29,$19
 $DF45 DEFB $DD,$2A,$E3,$99,$46,$23,$4E,$2B
 $DF4D DEFB $0A,$E6,$60,$C0,$DD,$36,$00,$80
 $DF55 DEFB $DD,$75,$04,$DD,$74,$05,$3A,$A5
 $DF5D DEFB $99,$E6,$18,$F6,$20,$DD,$77,$06
 $DF65 DEFB $C3,$29,$99,$00,$00,$00,$1C,$3E
 $DF6D DEFB $3C,$38,$00,$0F,$07,$07,$03,$03
 $DF75 DEFB $01,$01,$01,$24,$FF,$00,$FF,$FF
 $DF7D DEFB $FF,$00,$00,$FF,$07,$2C,$7E,$78
 $DF85 DEFB $1F,$F0,$FF,$FF,$F0,$1E,$78,$7F
 $DF8D DEFB $2C,$07,$FF,$24,$C3,$66,$C3,$C3
 $DF95 DEFB $66,$81,$E7,$00,$00,$00,$00,$00
 $DF9D DEFB $00,$FF,$FF,$FF,$00,$FF,$00,$FF
 $DFA5 DEFB $00,$FF,$FF,$31,$1B,$0E,$03,$00
 $DFAD DEFB $00,$00,$00,$8C,$D8,$70,$C0,$00
 $DFB5 DEFB $00,$00,$00,$F0,$E0,$E0,$C0,$C0
 $DFBD DEFB $80,$80,$80,$00,$00,$00,$00,$00
 $DFC5 DEFB $00,$00,$00,$5A,$DB,$7E,$DB,$99
 $DFCD DEFB $DB,$7E,$3C,$18,$18,$18,$18,$18
 $DFD5 DEFB $18,$18,$18,$18,$18,$24,$2C,$2C
 $DFDD DEFB $2C,$2C,$2C,$2C,$2C,$2C,$2C,$08
 $DFE5 DEFB $00,$FF,$FF,$1B,$26,$37,$26,$37
 $DFED DEFB $26,$37,$26,$37,$26,$37,$26,$37
 $DFF5 DEFB $2B,$F5,$F5,$2B,$F5,$F5,$2B,$F2
 $DFFD DEFB $F2,$2B,$13,$14,$13,$14,$13,$14
 $E005 DEFB $13,$14,$13,$14,$13,$14,$13,$14
 $E00D DEFB $13,$14,$13,$14,$13,$14,$13,$14
 $E015 DEFB $13,$14,$13,$14,$13,$14,$13,$14
 $E01D DEFB $4B,$11,$1B,$1A,$18,$1C,$19,$11
 $E025 DEFB $1B,$1A,$3B,$11,$1B,$1A,$18,$1C
 $E02D DEFB $19,$11,$1B,$1A,$3B,$11,$1B,$1A
 $E035 DEFB $18,$8B,$1D,$BB,$1D,$DB,$30,$1B
 $E03D DEFB $20,$1D,$20,$1B,$50,$1B,$20,$1D
 $E045 DEFB $20,$1B,$50,$1B,$20,$8B,$1D,$BB
 $E04D DEFB $1D,$FB,$4B,$1E,$BB,$1E,$DB,$66
 $E055 DEFB $1F,$B6,$1F,$B6,$FB,$FB,$FB,$FB
 $E05D DEFB $FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB
 $E065 DEFB $FB,$FB,$FB,$00,$37,$77,$07,$47
 $E06D DEFB $0F,$4F,$06,$46,$01,$1F,$5F,$05
 $E075 DEFB $45,$30,$34,$20,$34,$20,$34,$21
 $E07D DEFB $35,$21,$35,$21,$55,$F4,$F5,$20
 $E085 DEFB $F4,$F5,$20,$F4,$F5,$20,$F4,$F5
 $E08D DEFB $56,$10,$16,$32,$16,$10,$56,$11
 $E095 DEFB $17,$33,$17,$11,$57,$11,$17,$23
 $E09D DEFB $42,$10,$52,$10,$52,$11,$53,$11
 $E0A5 DEFB $53,$11,$43,$3B,$10,$2B,$12,$2B
 $E0AD DEFB $10,$5B,$11,$2C,$13,$2C,$11,$5C
 $E0B5 DEFB $11,$4C,$34,$10,$54,$10,$54,$11
 $E0BD DEFB $55,$11,$55,$11,$25,$20,$F9,$FA
 $E0C5 DEFB $20,$F9,$FA,$20,$F9,$FA,$20,$F9
 $E0CD DEFB $FA,$20,$F9,$FA,$20,$F9,$FA,$20
 $E0D5 DEFB $F9,$FA,$20,$F9,$FA,$20,$F9,$FA
 $E0DD DEFB $10,$00,$FF,$FF,$FF,$FF,$93,$9C
 $E0E5 DEFB $05,$2C,$05,$FC,$FC,$FC,$BC,$00
 $E0ED DEFB $50,$9F,$08,$7B,$00,$10,$9F,$0A
 $E0F5 DEFB $7B,$07,$11,$A3,$14,$7B,$01,$91
 $E0FD DEFB $A5,$22,$7B,$07,$10,$9F,$2C,$7B
 $E105 DEFB $00,$50,$9F,$34,$7B,$02

; Sub-Game Data: Kanyu
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8FB9)(kanyu) }
; UDGTABLE#
; #POPS
@label=Kanyu_Data
b$E10B DEFB $D5,$E5,$1D,$E5,$7C,$E6,$75,$E6
 $E113 DEFB $07,$BA,$E4
 $E116 DEFW $E48F
@label=Kanyu_SubGame
 $E118 DEFW $E194                           ; Location subgame routine.
@label=Kanyu_SetUp
 $E11A DEFW $E137                           ; Initialisation routine.
 $E11C DEFB $20,$7C,$76,$E4,$01,$00,$10,$00
 $E124 DEFB $15,$00,$00,$10,$00,$82,$E0,$74
 $E12C DEFB $49,$A4,$C8,$74,$98,$E4,$C0,$7A
 $E134 DEFB $3F,$01,$06

; Initialise: Kanyu
@label=Kanyu_Initialise
c$E137 LD HL,$79D6   ; {Write #N$79D6 to *#N$74E4.
 $E13A LD ($74E4),HL ; }
 $E13D LD A,$01      ; {Write #N$01 to *#N$723A.
 $E13F LD ($723A),A  ; }
 $E142 LD HL,$74E0   ; #REGhl=#N$74E0.
 $E145 LD (HL),$32   ; Write #N$32 to *#REGhl.
 $E147 CALL $9439    ; Call #R$9439.
 $E14A CALL $9929    ; Call #R$9929.
 $E14D LD DE,$7240   ; {Write #N$7240 to *#R$99B8.
 $E150 LD ($99B8),DE ; }
 $E154 LD DE,$0040   ; {Write #N($0040,$04,$04) to *#R$926E.
 $E157 LD ($926E),DE ; }
 $E15B LD IX,$E32F   ; #REGix=#R$E32F.
 $E15F LD B,$04      ; #REGb=#N$04.
 $E161 CALL $9226    ; Call #R$9226.
 $E164 LD DE,$0010   ; {Write #N($0010,$04,$04) to *#R$926E.
 $E167 LD ($926E),DE ; }
 $E16B LD B,$05      ; #REGb=#N$05.
 $E16D CALL $9226    ; Call #R$9226.
 $E170 LD DE,$0008   ; {Write #N($0008,$04,$04) to *#R$926E.
 $E173 LD ($926E),DE ; }
 $E177 LD B,$06      ; #REGb=#N$06.
 $E179 CALL $9226    ; Call #R$9226.
 $E17C LD DE,$0048   ; {Write #N($0048,$04,$04) to *#R$926E.
 $E17F LD ($926E),DE ; }
 $E183 LD B,$01      ; #REGb=#N$01.
 $E185 CALL $9226    ; Call #R$9226.
 $E188 LD DE,$0030   ; {Write #N($0030,$04,$04) to *#R$926E.
 $E18B LD ($926E),DE ; }
 $E18F LD B,$04      ; #REGb=#N$04.
 $E191 JP $9226      ; Jump to #R$9226.

; Handler: Kanyu
@label=Handler_Kanyu
c$E194 LD A,$00                             ;
 $E196 LD ($99AA),A                         ;
 $E199 CALL $E2F2                           ;
 $E19C CALL $E259                           ;
 $E19F LD HL,$723B                          ;
 $E1A2 LD A,$00                             ;
 $E1A4 CP (HL)                              ;
 $E1A5 JR Z,$E1D8                           ;
 $E1A7 DEC (HL)                             ;
 $E1A8 JR NZ,$E1D8                          ;
 $E1AA LD HL,$E2D8                          ;
 $E1AD LD BC,$0406                          ;
 $E1B0 LD IX,$7408                          ;
 $E1B4 LD DE,$0030                          ;
*$E1B7 PUSH BC                              ;
 $E1B8 BIT 0,(IX+$07)                       ;
 $E1BC JR NZ,$E1C8                          ;
 $E1BE LD B,$00                             ;
 $E1C0 ADD HL,BC                            ;
 $E1C1 ADD IX,DE                            ;
 $E1C3 POP BC                               ;
 $E1C4 DJNZ $E1B7                           ;
 $E1C6 JR $E1D8                             ;
*$E1C8 POP BC                               ;
 $E1C9 DJNZ $E1CC                           ;
 $E1CB ADD HL,BC                            ;
*$E1CC LD BC,$0018                          ;
 $E1CF LD E,(HL)                            ;
 $E1D0 INC HL                               ;
 $E1D1 LD D,(HL)                            ;
 $E1D2 LD HL,$E43E                          ;
 $E1D5 CALL $E23A                           ;
*$E1D8 CALL $980E                           ;
 $E1DB CALL $98AB                           ;
 $E1DE LD B,E                               ;
 $E1DF LD A,C                               ;
 $E1E0 SUB $1A                              ;
 $E1E2 JR C,$E234                           ;
 $E1E4 CP $14                               ;
 $E1E6 JR NC,$E234                          ;
 $E1E8 AND $1C                              ;
 $E1EA CP $0C                               ;
 $E1EC JR Z,$E234                           ;
 $E1EE LD E,A                               ;
 $E1EF RRCA                                 ;
 $E1F0 ADD A,E                              ;
 $E1F1 LD E,A                               ;
 $E1F2 LD D,$00                             ;
 $E1F4 LD IX,$E2D4                          ;
 $E1F8 ADD IX,DE                            ;
 $E1FA LD A,C                               ;
 $E1FB OR (IX+$00)                          ;
 $E1FE LD C,A                               ;
 $E1FF LD A,B                               ;
 $E200 SUB (IX+$02)                         ;
 $E203 LD E,A                               ;
 $E204 LD B,(IX+$01)                        ;
 $E207 PUSH BC                              ;
 $E208 PUSH DE                              ;
 $E209 LD C,(IX+$03)                        ;
 $E20C LD B,$00                             ;
 $E20E LD E,(IX+$04)                        ;
 $E211 LD D,(IX+$05)                        ;
 $E214 LD IX,$7408                          ;
 $E218 ADD IX,BC                            ;
 $E21A BIT 0,(IX+$07)                       ;
 $E21E JR NZ,$E22E                          ;
 $E220 LD BC,$0008                          ;
 $E223 LD HL,$E466                          ;
 $E226 CALL $E23A                           ;
 $E229 LD A,$0A                             ;
 $E22B LD ($723B),A                         ;
*$E22E POP DE                               ;
 $E22F POP BC                               ;
 $E230 CALL $98F2                           ;
 $E233 RET                                  ;
*$E234 LD HL,$74CF                          ;
 $E237 LD (HL),$01                          ;
 $E239 RET                                  ;
*$E23A LD A,(IX+$07)                        ;
 $E23D CPL                                  ;
 $E23E LD (IX+$07),A                        ;
 $E241 LD (IX+$0A),L                        ;
 $E244 LD (IX+$0B),H                        ;
 $E247 ADD HL,BC                            ;
 $E248 LD (IX+$22),L                        ;
 $E24B LD (IX+$23),H                        ;
 $E24E PUSH DE                              ;
 $E24F EX DE,HL                             ;
 $E250 CALL $9914                           ;
 $E253 POP HL                               ;
 $E254 INC HL                               ;
 $E255 INC HL                               ;
 $E256 JP $9914                             ;
*$E259 LD A,($7207)                         ;
 $E25C CP $03                               ;
 $E25E RET NZ                               ;
 $E25F LD IX,$74E0                          ;
 $E263 DEC (IX+$00)                         ;
 $E266 JR NZ,$E27A                          ;
 $E268 CALL $9619                           ;
 $E26B LD IX,$74E0                          ;
 $E26F LD (IX+$07),A                        ;
 $E272 AND $0F                              ;
 $E274 INC A                                ;
 $E275 LD (IX+$00),A                        ;
 $E278 JR $E27F                             ;
*$E27A BIT 7,(IX+$07)                       ;
 $E27E RET Z                                ;
*$E27F LD HL,$74E0                          ;
 $E282 CALL $9439                           ;
 $E285 LD IX,$74E0                          ;
 $E289 BIT 5,(IX+$06)                       ;
 $E28D JR Z,$E296                           ;
 $E28F RES 5,(IX+$06)                       ;
 $E293 JP $9926                             ;
*$E296 CALL $97D7                           ;
 $E299 LD A,H                               ;
 $E29A CP L                                 ;
 $E29B LD A,(IX+$06)                        ;
 $E29E JR NC,$E2AA                          ;
 $E2A0 CP C                                 ;
 $E2A1 CALL Z,$E2B4                         ;
 $E2A4 LD (IX+$06),C                        ;
 $E2A7 JP $9926                             ;
*$E2AA CP B                                 ;
 $E2AB CALL Z,$E2B4                         ;
 $E2AE LD (IX+$06),B                        ;
 $E2B1 JP $9926                             ;
*$E2B4 PUSH BC                              ;
 $E2B5 LD HL,($74E4)                        ;
 $E2B8 CALL $9378                           ;
 $E2BB POP BC                               ;
 $E2BC AND $61                              ;
 $E2BE JR Z,$E2C9                           ;
 $E2C0 AND $40                              ;
 $E2C2 RET Z                                ;
 $E2C3 LD HL,$7200                          ;
 $E2C6 SET 4,(HL)                           ;
 $E2C8 RET                                  ;
*$E2C9 LD ($74E4),HL                        ;
 $E2CC SET 5,(IX+$06)                       ;
 $E2D0 POP HL                               ;
 $E2D1 JP $9926                             ;
 $E2D4 LD B,B                               ;
 $E2D5 LD A,D                               ;
 $E2D6 JR NC,$E2D8                          ;
*$E2D8 LD E,D                               ;
 $E2D9 LD A,D                               ;
 $E2DA RET NZ                               ;
 $E2DB LD A,C                               ;
 $E2DC JR NZ,$E30E                          ;
 $E2DE SBC A,$79                            ;
 $E2E0 RET NZ                               ;
 $E2E1 LD A,C                               ;
 $E2E2 JR NZ,$E344                          ;
 $E2E4 JP PO,$0079                          ;
 $E2E7 NOP                                  ;
 $E2E8 NOP                                  ;
 $E2E9 NOP                                  ;
 $E2EA NOP                                  ;
 $E2EB NOP                                  ;
 $E2EC NOP                                  ;
 $E2ED LD A,D                               ;
 $E2EE JR Z,$E280                           ;
 $E2F0 LD HL,($217A)                        ;
 $E2F3 LD A,($3572)                         ;
 $E2F6 RET NZ                               ;
 $E2F7 LD (HL),$19                          ;
 $E2F9 LD HL,$E41E                          ;
 $E2FC LD A,($7239)                         ;
 $E2FF XOR $01                              ;
 $E301 LD ($7239),A                         ;
 $E304 JR Z,$E309                           ;
 $E306 LD HL,$E3EE                          ;
*$E309 LD B,$03                             ;
 $E30B LD DE,$0008                          ;
*$E30E LD IX,$73D8                          ;
*$E312 LD (IX+$02),L                        ;
 $E315 LD (IX+$03),H                        ;
 $E318 ADD HL,DE                            ;
 $E319 ADD IX,DE                            ;
 $E31B DJNZ $E312                           ;
 $E31D LD HL,$7C08                          ;
 $E320 CALL $9914                           ;
 $E323 LD HL,$7C48                          ;
 $E326 CALL $9914                           ;
 $E329 LD HL,$7C88                          ;
 $E32C JP $9914                             ;
 $E32F DEFB $A3,$E3,$04,$79,$06,$A3,$E3,$B0 ;
 $E337 DEFB $78,$06,$A3,$E3,$B6,$7A,$06,$A3 ;
 $E33F DEFB $E3,$0E,$7A,$06,$93,$E3,$82,$79 ;
 $E347 DEFB $06,$9B,$E3,$8C,$79,$06,$9B,$E3 ;
 $E34F DEFB $38,$79,$06,$9B,$E3,$96,$7A,$06 ;
 $E357 DEFB $93,$E3,$34,$7B,$06,$AB,$E3,$26 ;
 $E35F DEFB $79,$06,$AB,$E3,$56,$79,$06,$AB ;
 $E367 DEFB $E3,$32,$7A,$06,$AB,$E3,$86,$7A ;
 $E36F DEFB $06,$AB,$E3,$92,$7B,$06,$AB,$E3 ;
 $E377 DEFB $3C,$7C,$06,$B3,$E3,$06,$7C,$00 ;
 $E37F DEFB $BB,$E3,$1A,$7A,$00,$BB,$E3,$9E ;
 $E387 DEFB $79,$00,$BB,$E3,$A2,$79,$00,$BB ;
 $E38F DEFB $E3,$EA,$79,$00,$5D,$E5,$01,$02 ;
 $E397 DEFB $D4,$E3,$00,$00,$C5,$E5,$01,$02 ;
 $E39F DEFB $D4,$E3,$00,$00,$85,$E5,$04,$02 ;
 $E3A7 DEFB $CC,$E3,$00,$00,$85,$E5,$01,$01 ;
 $E3AF DEFB $D4,$E3,$00,$00,$D6,$E3,$03,$03 ;
 $E3B7 DEFB $C3,$E3,$00,$00,$36,$E4,$02,$03 ;
 $E3BF DEFB $C3,$E3,$00,$00,$04,$03,$22,$04 ;
 $E3C7 DEFB $03,$22,$04,$03,$22,$00,$07,$07 ;
 $E3CF DEFB $00,$07,$07,$00,$07,$07,$07,$00 ;
 $E3D7 DEFB $0E,$1E,$1E,$1E,$0C,$1C,$1E,$0F ;
 $E3DF DEFB $0F,$0F,$1C,$1C,$1E,$1E,$0E,$0A ;
 $E3E7 DEFB $0A,$0A,$0A,$0E,$02,$03,$00,$20 ;
 $E3EF DEFB $20,$20,$20,$20,$24,$64,$A4,$64 ;
 $E3F7 DEFB $A5,$26,$24,$27,$24,$3C,$46,$46 ;
 $E3FF DEFB $7E,$7E,$7E,$7E,$7E,$3C,$00,$00 ;
 $E407 DEFB $38,$7C,$7C,$7C,$38,$70,$78,$F8 ;
 $E40F DEFB $78,$70,$F0,$78,$78,$78,$78,$78 ;
 $E417 DEFB $58,$50,$50,$D0,$10,$30,$00,$04 ;
 $E41F DEFB $04,$04,$04,$14,$14,$16,$15,$14 ;
 $E427 DEFB $96,$75,$D4,$34,$14,$3C,$52,$52 ;
 $E42F DEFB $7E,$7E,$7E,$7E,$7E,$3C,$00,$01 ;
 $E437 DEFB $03,$07,$07,$07,$03,$01,$0F,$0F ;
 $E43F DEFB $1F,$14,$2A,$35,$0A,$04,$03,$03 ;
 $E447 DEFB $03,$03,$02,$02,$02,$02,$02,$80 ;
 $E44F DEFB $C0,$E0,$E0,$E0,$C0,$80,$E0,$E0 ;
 $E457 DEFB $F0,$50,$A8,$58,$90,$20,$C0,$C0 ;
 $E45F DEFB $C0,$40,$40,$40,$40,$40,$40,$05 ;
 $E467 DEFB $0F,$3F,$2F,$12,$03,$03,$03,$A0 ;
 $E46F DEFB $F0,$FC,$F4,$48,$C0,$C0,$C0,$45 ;
 $E477 DEFB $65,$20,$6A,$61,$62,$61,$6C,$61 ;
 $E47F DEFB $20,$63,$61,$6D,$74,$61,$20,$67 ;
 $E487 DEFB $6F,$6F,$67,$61,$20,$74,$61,$F3 ;
 $E48F DEFB $AA,$E4,$01,$01,$97,$E4,$00,$00 ;
 $E497 DEFB $11,$AA,$E4,$01,$02,$A0,$E4,$00 ;
 $E49F DEFB $00,$02,$02,$00,$00,$00,$00,$00 ;
 $E4A7 DEFB $00,$00,$00,$00,$02,$00,$10,$02 ;
 $E4AF DEFB $44,$00,$00,$00,$00,$00,$00,$00 ;
 $E4B7 DEFB $00,$00,$00,$24,$19,$0C,$0B,$11 ;
 $E4BF DEFB $04,$06,$3C,$19,$0C,$1B,$12,$1C ;
 $E4C7 DEFB $06,$14,$1B,$0C,$05,$06,$23,$18 ;
 $E4CF DEFB $12,$0C,$1B,$10,$06,$25,$14,$13 ;
 $E4D7 DEFB $10,$05,$06,$09,$14,$06,$0C,$19 ;
 $E4DF DEFB $10,$19,$10,$06,$2C,$1B,$10,$19 ;
 $E4E7 DEFB $04,$06,$38,$1B,$10,$1B,$12,$34 ;
 $E4EF DEFB $05,$06,$09,$14,$2B,$38,$06,$08 ;
 $E4F7 DEFB $06,$14,$05,$06,$21,$3C,$12,$10 ;
 $E4FF DEFB $06,$08,$19,$3C,$13,$1C,$1B,$38 ;
 $E507 DEFB $15,$1C,$1B,$38,$15,$20,$09,$06 ;
 $E50F DEFB $05,$3C,$17,$28,$06,$40,$17,$70 ;
 $E517 DEFB $0D,$06,$7C,$06,$84,$00,$FF,$FF ;
 $E51F DEFB $FF,$FF,$7F,$7F,$7F,$3F,$3F,$1F ;
 $E527 DEFB $1F,$0F,$07,$07,$03,$01,$FF,$7F ;
 $E52F DEFB $3F,$0F,$03,$00,$00,$00,$FF,$FF ;
 $E537 DEFB $FF,$FF,$FF,$FF,$0F,$00,$FF,$FF ;
 $E53F DEFB $FF,$FF,$FF,$FF,$F0,$00,$FF,$FE ;
 $E547 DEFB $FC,$F0,$C0,$00,$00,$00,$FC,$F8 ;
 $E54F DEFB $F8,$F0,$E0,$E0,$C0,$80,$FF,$FF ;
 $E557 DEFB $FF,$FF,$FE,$FE,$FE,$FC,$01,$03 ;
 $E55F DEFB $07,$07,$0F,$1F,$1F,$3F,$3F,$7F ;
 $E567 DEFB $7F,$7F,$FF,$FF,$FF,$FF,$40,$40 ;
 $E56F DEFB $50,$44,$14,$14,$10,$04,$09,$01 ;
 $E577 DEFB $22,$02,$84,$00,$08,$00,$00,$50 ;
 $E57F DEFB $94,$24,$28,$48,$48,$80,$00,$00 ;
 $E587 DEFB $00,$00,$00,$00,$00,$00,$01,$03 ;
 $E58F DEFB $07,$0F,$1F,$3F,$7F,$FF,$01,$03 ;
 $E597 DEFB $07,$0F,$1F,$3F,$7F,$FF,$00,$00 ;
 $E59F DEFB $00,$00,$00,$00,$00,$00,$80,$C0 ;
 $E5A7 DEFB $E0,$F0,$F8,$FC,$FE,$FF,$FF,$FF ;
 $E5AF DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00 ;
 $E5B7 DEFB $00,$00,$00,$00,$00,$00,$80,$C0 ;
 $E5BF DEFB $E0,$F0,$F8,$FC,$FE,$FF,$80,$C0 ;
 $E5C7 DEFB $E0,$E0,$F0,$F8,$F8,$FC,$FC,$FE ;
 $E5CF DEFB $FE,$FE,$FF,$FF,$FF,$FF,$9D,$10 ;
 $E5D7 DEFB $4D,$17,$3D,$11,$4D,$16,$1D,$1C ;
 $E5DF DEFB $FD,$11,$4D,$16,$3D,$10,$12,$13 ;
 $E5E7 DEFB $14,$15,$18,$1B,$AD,$1C,$5D,$10 ;
 $E5EF DEFB $12,$13,$14,$15,$17,$3D,$11,$4D ;
 $E5F7 DEFB $19,$AD,$1B,$6D,$11,$1A,$3D,$16 ;
 $E5FF DEFB $4D,$12,$13,$14,$15,$10,$4D,$17 ;
 $E607 DEFB $DD,$12,$13,$14,$15,$9D,$11,$4D ;
 $E60F DEFB $16,$4D,$10,$4D,$17,$FD,$1D,$10 ;
 $E617 DEFB $12,$13,$14,$15,$17,$4D,$11,$4D ;
 $E61F DEFB $16,$1D,$1C,$ED,$11,$1A,$3D,$16 ;
 $E627 DEFB $4D,$10,$12,$13,$14,$15,$18,$1B ;
 $E62F DEFB $FD,$1D,$12,$13,$14,$15,$5D,$11 ;
 $E637 DEFB $1A,$3D,$19,$FD,$CD,$12,$13,$14 ;
 $E63F DEFB $15,$10,$4D,$17,$FD,$BD,$11,$4D ;
 $E647 DEFB $16,$FD,$BD,$10,$12,$13,$14,$15 ;
 $E64F DEFB $17,$ED,$10,$BD,$11,$1A,$3D,$16 ;
 $E657 DEFB $ED,$11,$CD,$12,$13,$14,$15,$FD ;
 $E65F DEFB $10,$12,$13,$14,$15,$FD,$CD,$11 ;
 $E667 DEFB $1A,$FD,$FD,$1D,$12,$13,$14,$15 ;
 $E66F DEFB $FD,$FD,$FD,$FD,$5D,$00,$68,$6A ;
 $E677 DEFB $6E,$56,$50,$70,$46,$90,$13,$45 ;
 $E67F DEFB $13,$30,$13,$45,$13,$12,$15,$F0 ;
 $E687 DEFB $13,$45,$13,$30,$11,$16,$43,$45 ;
 $E68F DEFB $70,$15,$50,$11,$13,$16,$23,$11 ;
 $E697 DEFB $30,$11,$16,$34,$13,$45,$60,$45 ;
 $E69F DEFB $30,$11,$14,$16,$24,$11,$50,$31 ;
 $E6A7 DEFB $13,$45,$13,$50,$45,$40,$11,$10 ;
 $E6AF DEFB $21,$90,$13,$45,$13,$40,$13,$45 ;
 $E6B7 DEFB $13,$F0,$10,$11,$13,$16,$23,$11 ;
 $E6BF DEFB $40,$13,$45,$13,$10,$15,$E0,$11 ;
 $E6C7 DEFB $14,$16,$24,$11,$40,$11,$13,$16 ;
 $E6CF DEFB $33,$45,$D0,$11,$10,$21,$50,$11 ;
 $E6D7 DEFB $14,$16,$24,$13,$45,$F0,$20,$15 ;
 $E6DF DEFB $50,$11,$10,$21,$13,$45,$13,$F0 ;
 $E6E7 DEFB $45,$70,$13,$45,$13,$F0,$45,$70 ;
 $E6EF DEFB $11,$23,$16,$13,$11,$E0,$13,$45 ;
 $E6F7 DEFB $70,$11,$24,$16,$14,$11,$E0,$13 ;
 $E6FF DEFB $45,$80,$21,$10,$11,$F0,$11,$33 ;
 $E707 DEFB $16,$F0,$C0,$11,$34,$16,$F0,$D0 ;
 $E70F DEFB $31,$F0,$F0,$F0,$F0,$60,$00     ;

; Sub-Game Data: Sao Paulo
;
; #PUSHS
; #UDGTABLE
; { #LOCATION($8FD0)(sao-paulo) }
; UDGTABLE#
; #POPS
@label=SaoPaulo_Data
b$E716 DEFB $1A,$E9,$C2,$E8,$CB,$E9,$C7,$E9
 $E71E DEFB $07,$44,$EA
 $E721 DEFW $E89B
@label=SaoPaulo_SubGame
 $E723 DEFW $E7C3                           ; Location subgame routine.
@label=SaoPaulo_SetUp
 $E725 DEFW $E755                           ; Initialisation routine.
 $E727 DEFB $86,$7C,$42,$E7,$01,$00,$20,$00
 $E72F DEFB $30,$00,$00,$30,$00,$78,$40,$72
 $E737 DEFB $94,$EA,$00,$00,$00,$00,$00,$00
 $E73F DEFB $00,$00,$06,$4F,$68,$20,$63,$6F
 $E747 DEFB $6F,$6B,$20,$79,$65,$72,$20,$61
 $E74F DEFB $72,$63,$68,$65,$72,$A0

; Initialise: Sao Paulo
@label=SaoPaulo_Initialise
c$E755 LD IX,$E8A4     ;
 $E759 LD B,$07        ;
 $E75B LD DE,$0006     ;
*$E75E LD L,(IX+$00)   ;
 $E761 LD H,(IX+$01)   ;
 $E764 SET 1,(HL)      ;
 $E766 ADD HL,DE       ;
 $E767 SET 1,(HL)      ;
 $E769 INC IX          ;
 $E76B INC IX          ;
 $E76D DJNZ $E75E      ;
 $E76F LD HL,$61DA     ;
 $E772 LD DE,$0006     ;
 $E775 CALL $E7BB      ;
 $E778 LD DE,$00C0     ;
 $E77B CALL $E7BB      ;
 $E77E LD HL,$E8B2     ;
 $E781 LD B,$08        ;
 $E783 LD IX,$7240     ;
*$E787 PUSH BC         ;
 $E788 LD A,(HL)       ;
 $E789 LD (IX+$04),A   ;
 $E78C INC HL          ;
 $E78D LD A,(HL)       ;
 $E78E LD (IX+$05),A   ;
 $E791 INC HL          ;
 $E792 LD (IX+$06),$08 ;
 $E796 PUSH HL         ;
 $E797 LD ($99E3),IX   ;
 $E79B LD BC,$0008     ;
 $E79E ADD IX,BC       ;
 $E7A0 LD ($99B8),IX   ;
 $E7A4 CALL $9929      ;
 $E7A7 LD IX,($99E3)   ;
 $E7AB LD BC,$0038     ;
 $E7AE ADD IX,BC       ;
 $E7B0 POP HL          ;
 $E7B1 POP BC          ;
 $E7B2 DJNZ $E787      ;
 $E7B4 LD HL,$7240     ;
 $E7B7 LD ($99E3),HL   ;
 $E7BA RET             ;
*$E7BB LD B,$10        ;
*$E7BD ADD HL,DE       ;
 $E7BE LD (HL),$07     ;
 $E7C0 DJNZ $E7BD      ;
 $E7C2 RET             ;

; Handler: Sao Paulo
@label=Handler_SaoPaulo
c$E7C3 LD A,($EFFC)    ;
 $E7C6 AND $08         ;
 $E7C8 JR NZ,$E7CF     ;
 $E7CA LD HL,$EFFF     ;
 $E7CD SET 2,(HL)      ;
*$E7CF LD HL,($99E3)   ;
 $E7D2 LD DE,$0038     ;
 $E7D5 ADD HL,DE       ;
 $E7D6 LD A,$00        ;
 $E7D8 CP L            ;
 $E7D9 JR NZ,$E7DE     ;
 $E7DB LD HL,$7240     ;
*$E7DE LD ($99E3),HL   ;
 $E7E1 CALL $9439      ;
 $E7E4 LD IX,($99E3)   ;
 $E7E8 BIT 5,(IX+$06)  ;
 $E7EC JR Z,$E7F5      ;
 $E7EE RES 5,(IX+$06)  ;
 $E7F2 JP $9926        ;
*$E7F5 LD A,(IX+$07)   ;
 $E7F8 LD E,A          ;
 $E7F9 CP $00          ;
 $E7FB JR Z,$E806      ;
 $E7FD CALL $E88E      ;
 $E800 LD (IX+$07),$00 ;
 $E804 JR Z,$E842      ;
*$E806 LD A,(IX+$06)   ;
 $E809 LD E,A          ;
 $E80A CALL $E88E      ;
 $E80D JR Z,$E842      ;
 $E80F BIT 6,D         ;
 $E811 JR Z,$E819      ;
 $E813 LD HL,$7200     ;
 $E816 SET 4,(HL)      ;
 $E818 RET             ;
*$E819 BIT 5,D         ;
 $E81B LD A,(IX+$06)   ;
 $E81E LD D,A          ;
 $E81F JR NZ,$E823     ;
 $E821 XOR $10         ;
*$E823 LD (IX+$07),A   ;
 $E826 CALL $9619      ;
 $E829 LD IX,($99E3)   ;
 $E82D AND $10         ;
 $E82F OR $08          ;
 $E831 LD E,A          ;
 $E832 LD A,D          ;
 $E833 XOR E           ;
 $E834 LD E,A          ;
 $E835 CALL $E88E      ;
 $E838 JR Z,$E842      ;
 $E83A LD A,E          ;
 $E83B XOR $10         ;
 $E83D LD E,A          ;
 $E83E CALL $E88E      ;
 $E841 RET NZ          ;
*$E842 LD (IX+$04),L   ;
 $E845 LD (IX+$05),H   ;
 $E848 SET 5,E         ;
 $E84A LD (IX+$06),E   ;
 $E84D BIT 4,D         ;
 $E84F JR Z,$E876      ;
 $E851 LD A,($7200)    ;
 $E854 AND $01         ;
 $E856 PUSH AF         ;
 $E857 CALL $939D      ;
 $E85A LD HL,$99AD     ;
 $E85D DEC (HL)        ;
 $E85E JR Z,$E86C      ;
 $E860 POP AF          ;
 $E861 JP NZ,$9926     ;
 $E864 LD HL,$7200     ;
 $E867 RES 0,(HL)      ;
 $E869 JP $9926        ;
*$E86C LD HL,$EFFA     ;
 $E86F SET 0,(HL)      ;
 $E871 LD SP,($99AE)   ;
 $E875 RET             ;
*$E876 CALL $9619      ;
 $E879 AND $57         ;
 $E87B JP NZ,$9926     ;
 $E87E LD A,$07        ;
 $E880 LD ($99AA),A    ;
 $E883 CALL $994D      ;
 $E886 LD A,$00        ;
 $E888 LD ($99AA),A    ;
 $E88B JP $9926        ;
*$E88E LD L,(IX+$04)   ;
 $E891 LD H,(IX+$05)   ;
 $E894 CALL $9378      ;
 $E897 LD D,A          ;
 $E898 AND $62         ;
 $E89A RET             ;

; Data block at E89B
b$E89B DEFB $02,$E9,$01,$01,$A3,$E8,$00,$00
 $E8A3 DEFB $11,$1A,$64,$5C,$64,$9E,$67,$0A
 $E8AB DEFB $68,$56,$6A,$94,$6B,$92,$6D,$88
 $E8B3 DEFB $79,$CC,$79,$A8,$79,$FA,$79,$48
 $E8BB DEFB $7B,$0C,$7C,$A6,$7B,$38,$7C,$FF
 $E8C3 DEFB $81,$83,$83,$85,$85,$89,$89,$91
 $E8CB DEFB $91,$A1,$A1,$C1,$C1,$81,$FF,$80
 $E8D3 DEFB $A0,$81,$88,$80,$91,$80,$88,$FF
 $E8DB DEFB $FF,$A0,$81,$88,$80,$80,$92,$FF
 $E8E3 DEFB $FF,$08,$40,$00,$04,$00,$20,$FF
 $E8EB DEFB $FF,$01,$09,$01,$21,$01,$09,$00
 $E8F3 DEFB $00,$FF,$FF,$00,$00,$FF,$FF,$01
 $E8FB DEFB $40,$00,$12,$40,$00,$20,$04,$00
 $E903 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $E90B DEFB $FF,$00,$00,$00,$00,$00,$00,$05
 $E913 DEFB $01,$21,$01,$01,$05,$21,$81,$28
 $E91B DEFB $C0,$38,$12,$77,$1A,$28,$12,$27
 $E923 DEFB $38,$11,$13,$A4,$15,$28,$12,$77
 $E92B DEFB $1A,$28,$12,$27,$48,$12,$B7,$28
 $E933 DEFB $97,$28,$37,$48,$12,$A7,$1A,$29
 $E93B DEFB $12,$77,$1A,$29,$12,$27,$48,$12
 $E943 DEFB $A7,$1A,$28,$12,$77,$1A,$28,$12
 $E94B DEFB $27,$48,$12,$A7,$1A,$28,$12,$77
 $E953 DEFB $1A,$28,$12,$27,$48,$12,$A7,$1A
 $E95B DEFB $28,$12,$77,$1A,$28,$30,$48,$20
 $E963 DEFB $18,$90,$28,$60,$18,$20,$28,$31
 $E96B DEFB $38,$13,$24,$17,$74,$15,$11,$18
 $E973 DEFB $13,$64,$17,$15,$11,$88,$12,$A7
 $E97B DEFB $1A,$28,$12,$77,$1A,$28,$13,$34
 $E983 DEFB $38,$12,$A7,$1A,$28,$12,$87,$28
 $E98B DEFB $47,$38,$12,$A7,$1A,$28,$12,$77
 $E993 DEFB $1A,$29,$12,$37,$38,$12,$B7,$28
 $E99B DEFB $87,$1A,$28,$12,$37,$38,$12,$A7
 $E9A3 DEFB $1A,$29,$12,$77,$1A,$28,$12,$37
 $E9AB DEFB $38,$12,$A7,$1A,$28,$90,$28,$12
 $E9B3 DEFB $37,$38,$10,$26,$90,$28,$91,$28
 $E9BB DEFB $40,$38,$11,$26,$91,$D8,$41,$48
 $E9C3 DEFB $26,$F8,$C8,$00,$68,$28,$50,$70
 $E9CB DEFB $20,$C3,$30,$92,$20,$32,$30,$13
 $E9D3 DEFB $C2,$20,$92,$20,$32,$30,$11,$F2
 $E9DB DEFB $D2,$30,$11,$C2,$20,$92,$20,$32
 $E9E3 DEFB $30,$11,$C2,$20,$92,$20,$32,$40
 $E9EB DEFB $C2,$21,$92,$21,$32,$40,$C2,$20
 $E9F3 DEFB $92,$20,$33,$40,$23,$12,$93,$20
 $E9FB DEFB $63,$12,$23,$20,$33,$30,$C2,$13
 $EA03 DEFB $10,$92,$13,$20,$31,$30,$C2,$11
 $EA0B DEFB $10,$92,$11,$10,$42,$30,$C2,$11
 $EA13 DEFB $10,$F2,$30,$C2,$11,$10,$92,$11
 $EA1B DEFB $10,$42,$30,$F2,$82,$20,$42,$30
 $EA23 DEFB $C2,$20,$92,$21,$42,$30,$C2,$20
 $EA2B DEFB $93,$20,$42,$30,$C3,$21,$93,$20
 $EA33 DEFB $43,$30,$C3,$20,$91,$20,$43,$30
 $EA3B DEFB $11,$23,$91,$20,$91,$20,$41,$10
 $EA43 DEFB $00,$45,$24,$09,$10,$0D,$30,$09
 $EA4B DEFB $24,$09,$10,$0D,$74,$0D,$30,$09
 $EA53 DEFB $24,$09,$10,$0D,$30,$09,$24,$09
 $EA5B DEFB $10,$0D,$30,$09,$24,$09,$10,$0D
 $EA63 DEFB $30,$09,$24,$2D,$04,$45,$04,$29
 $EA6B DEFB $30,$09,$24,$25,$30,$09,$24,$09
 $EA73 DEFB $14,$09,$30,$09,$40,$09,$30,$09
 $EA7B DEFB $24,$09,$14,$09,$5C,$09,$14,$09
 $EA83 DEFB $30,$09,$24,$09,$14,$09,$30,$35
 $EA8B DEFB $14,$0D,$08,$79,$08,$79,$08,$6D
 $EA93 DEFB $00,$E2,$EA,$02,$03,$D4,$EA,$7E
 $EA9B DEFB $FF,$42,$EB,$01,$03,$DF,$EA,$80
 $EAA3 DEFB $FF,$7A,$EB,$02,$03,$D4,$EA,$80
 $EAAB DEFB $FF,$DA,$EB,$01,$04,$DA,$EA,$80
 $EAB3 DEFB $FF,$12,$EB,$02,$03,$D4,$EA,$7E
 $EABB DEFB $FF,$5A,$EB,$01,$04,$DE,$EA,$40
 $EAC3 DEFB $FF,$AA,$EB,$02,$03,$D4,$EA,$80
 $EACB DEFB $FF,$FA,$EB,$01,$04,$DA,$EA,$80
 $EAD3 DEFB $FF,$04,$03,$22,$04,$03,$22,$05
 $EADB DEFB $04,$23,$22,$05,$04,$03,$22,$00
 $EAE3 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $EAEB DEFB $01,$01,$01,$01,$02,$02,$04,$08
 $EAF3 DEFB $88,$50,$60,$20,$20,$11,$00,$1C
 $EAFB DEFB $3E,$26,$46,$26,$7C,$FC,$FE,$B6
 $EB03 DEFB $2C,$1C,$7C,$BC,$3C,$3E,$36,$77
 $EB0B DEFB $63,$63,$67,$C0,$C0,$C0,$00,$03
 $EB13 DEFB $07,$04,$08,$04,$03,$03,$07,$07
 $EB1B DEFB $0A,$0A,$09,$0B,$0F,$0B,$13,$13
 $EB23 DEFB $23,$A3,$C7,$C0,$40,$41,$20,$80
 $EB2B DEFB $C0,$C0,$C0,$C0,$80,$80,$C0,$E0
 $EB33 DEFB $60,$C0,$C0,$C0,$C0,$C0,$C0,$C0
 $EB3B DEFB $C0,$C0,$C0,$C0,$C0,$C0,$00,$38
 $EB43 DEFB $7C,$7C,$7C,$38,$7C,$FE,$FE,$FE
 $EB4B DEFB $7C,$7C,$7C,$FF,$7C,$7C,$6C,$6C
 $EB53 DEFB $6C,$6C,$6C,$0C,$0C,$0C,$0C,$00
 $EB5B DEFB $00,$00,$00,$38,$7C,$7C,$7C,$38
 $EB63 DEFB $7C,$FE,$FE,$FE,$FE,$7C,$7C,$7C
 $EB6B DEFB $7C,$7C,$FF,$6C,$6C,$6C,$6C,$60
 $EB73 DEFB $60,$60,$60,$00,$00,$00,$00,$00
 $EB7B DEFB $07,$0F,$0C,$0D,$0E,$1C,$1C,$1E
 $EB83 DEFB $1E,$17,$1B,$1D,$1C,$3C,$3E,$36
 $EB8B DEFB $36,$66,$67,$60,$60,$70,$00,$00
 $EB93 DEFB $00,$80,$80,$80,$00,$00,$00,$00
 $EB9B DEFB $00,$00,$80,$80,$C0,$20,$10,$0C
 $EBA3 DEFB $04,$06,$02,$06,$02,$04,$00,$01
 $EBAB DEFB $03,$03,$01,$01,$07,$07,$07,$07
 $EBB3 DEFB $03,$02,$03,$03,$03,$03,$07,$06
 $EBBB DEFB $06,$06,$07,$00,$00,$00,$00,$80
 $EBC3 DEFB $40,$20,$40,$C0,$80,$80,$C0,$C0
 $EBCB DEFB $C0,$C0,$40,$E0,$E0,$D0,$D0,$CC
 $EBD3 DEFB $C4,$C6,$C2,$C6,$C2,$E4,$00,$3C
 $EBDB DEFB $7E,$42,$42,$24,$18,$7E,$FF,$FF
 $EBE3 DEFB $FF,$FD,$3B,$5A,$76,$6E,$6E,$6E
 $EBEB DEFB $6E,$6E,$6E,$6E,$6E,$0E,$0E,$0E
 $EBF3 DEFB $08,$08,$08,$08,$08,$55,$7F,$00
 $EBFB DEFB $00,$00,$00,$3C,$7E,$42,$42,$24
 $EC03 DEFB $7E,$FF,$FF,$FD,$FB,$3B,$57,$4E
 $EC0B DEFB $6E,$6E,$6E,$6E,$6E,$6E,$6E,$6E
 $EC13 DEFB $68,$68,$68,$68,$55,$7F,$00,$00
 $EC1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EC9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECBB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECC3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECCB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECD3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECDB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECEB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ECFB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ED9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDBB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDC3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDCB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDD3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDDB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDEB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EDFB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EE9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEBB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEC3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EECB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EED3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEDB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEEB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EEFB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EF9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFBB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFC3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFCB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFD3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EFDB DEFB $00,$00

; Data block at EFDD
b$EFDD DEFB $00

; Data block at EFDE
b$EFDE DEFB $00,$00

; Active Key Map
;
; .
;
; .
;
; Right.
@label=ActiveKeyMap
g$EFE0 DEFB $00      ; Port.
 $EFE1 DEFB $00      ; Key value.
 $EFE2 DEFB $00      ; Modifier.
; Down.
 $EFE3 DEFB $00      ; Port.
 $EFE4 DEFB $00      ; Key value.
 $EFE5 DEFB $00      ; Modifier.
; Left.
 $EFE6 DEFB $00      ; Port.
 $EFE7 DEFB $00      ; Key value.
 $EFE8 DEFB $00      ; Modifier.
; Up.
 $EFE9 DEFB $00      ; Port.
 $EFEA DEFB $00      ; Key value.
 $EFEB DEFB $00      ; Modifier.
; Fire.
 $EFEC DEFB $00      ; Port.
 $EFED DEFB $00      ; Key value.
 $EFEE DEFB $00      ; Modifier.

; Game status buffer entry at EFEF
g$EFEF DEFB $00,$00,$00

; Pointer: Active Player
;
; Points to either #R$8C28 or #R$8C38.
@label=Pointer_ActivePlayer
g$EFF2 DEFW $0000

; Active Player Score
@label=ActivePlayerScore
g$EFF4 DEFB $00
 $EFF5 DEFB $00
 $EFF6 DEFB $00

; Active Player Cash
@label=ActivePlayerCash_01
g$EFF7 DEFB $00
@label=ActivePlayerCash_02
 $EFF8 DEFB $00

; Data block at EFF9
b$EFF9 DEFB $00

; Game State #1
;
; #TABLE(default,centre,centre)
; { =h Bit | =h Meaning }
; { #N$00 | }
; { #N$01 | Has Bonus Points? }
; { #N$02 | Deported From Russia }
; { #N$03 | Hit By The Bull }
; { #N$04 | Stranded }
; { #N$05 | Can't Afford To Fly }
; { #N$06 | Completed All Locations }
; { #N$07 | Flying To New Destination }
; TABLE#
@label=GameState_1
g$EFFA DEFB $00

; Game State #2
;
; #TABLE(default,centre,centre)
; { =h Bit | =h Meaning }
; { #N$00 | Ticker On/ Off }
; { #N$01 | }
; { #N$02 | }
; { #N$03 | }
; { #N$04 | Used for printing scores/ stripping off leading zeroes }
; { #N$05 | 1UP/ 2UP Game }
; { #N$06 | }
; { #N$07 | }
; TABLE#
@label=GameState_2
g$EFFB DEFB $00

; Data block at EFFC
b$EFFC DEFB $00

; Data block at EFFD
b$EFFD DEFB $00

; Data block at EFFE
b$EFFE DEFB $00

; Data block at EFFF
b$EFFF DEFB $00

; Data block at F000
b$F000 DEFB $FF,$01,$FF,$01,$39,$25,$53,$04
 $F008 DEFB $4A,$01,$12,$05,$07,$02,$03,$02
 $F010 DEFB $02,$03,$04,$06,$10,$17,$34,$04
 $F018 DEFB $08,$04,$01,$01,$01,$25,$09,$03
 $F020 DEFB $02,$01,$29,$30,$07,$08,$06,$0F
 $F028 DEFB $21,$0F,$05,$6F,$08,$15,$04,$0D
 $F030 DEFB $0C,$05,$11,$04,$24,$0A,$02,$03
 $F038 DEFB $02,$02,$01,$5D,$05,$02,$04,$01
 $F040 DEFB $13,$01,$06,$26,$03,$0F,$27,$03
 $F048 DEFB $02,$02,$05,$04,$01,$47,$02,$18
 $F050 DEFB $01,$02,$09,$03,$19,$01,$0A,$1B
 $F058 DEFB $03,$0C,$02,$02,$05,$05,$28,$1D
 $F060 DEFB $02,$09,$02,$11,$04,$2F,$02,$01
 $F068 DEFB $24,$01,$FF,$01,$FF,$01,$3D,$21
 $F070 DEFB $3A,$03,$12,$01,$03,$08,$46,$01
 $F078 DEFB $11,$06,$01,$03,$01,$01,$01,$02
 $F080 DEFB $02,$05,$04,$02,$01,$07,$0F,$18
 $F088 DEFB $20,$01,$13,$02,$09,$04,$01,$28
 $F090 DEFB $02,$0D,$15,$02,$11,$2F,$07,$09
 $F098 DEFB $06,$0D,$09,$02,$01,$05,$12,$10
 $F0A0 DEFB $04,$69,$01,$04,$09,$15,$02,$0E
 $F0A8 DEFB $0D,$06,$07,$01,$09,$02,$25,$0A
 $F0B0 DEFB $07,$60,$05,$01,$19,$01,$07,$25
 $F0B8 DEFB $02,$12,$25,$03,$01,$03,$04,$4D
 $F0C0 DEFB $01,$1C,$09,$03,$19,$01,$09,$1A
 $F0C8 DEFB $06,$0A,$01,$04,$09,$01,$29,$17
 $F0D0 DEFB $02,$02,$02,$09,$03,$05,$02,$3D
 $F0D8 DEFB $27,$01,$FF,$01,$AA,$03,$52,$01
 $F0E0 DEFB $3A,$24,$36,$05,$13,$0E,$11,$06
 $F0E8 DEFB $2E,$01,$11,$04,$02,$06,$01,$02
 $F0F0 DEFB $03,$03,$01,$01,$03,$02,$01,$09
 $F0F8 DEFB $0E,$14,$01,$02,$1F,$06,$1A,$04
 $F100 DEFB $01,$3E,$21,$2D,$09,$04,$02,$02
 $F108 DEFB $07,$0B,$0C,$07,$11,$07,$02,$08
 $F110 DEFB $02,$69,$05,$02,$09,$24,$0D,$07
 $F118 DEFB $02,$02,$34,$03,$01,$05,$04,$5A
 $F120 DEFB $0D,$04,$18,$01,$07,$25,$02,$12
 $F128 DEFB $25,$03,$01,$04,$03,$4D,$01,$1C
 $F130 DEFB $0A,$01,$1A,$01,$09,$31,$01,$01
 $F138 DEFB $2F,$0A,$01,$0C,$02,$03,$01,$08
 $F140 DEFB $04,$05,$02,$3C,$04,$01,$23,$01
 $F148 DEFB $FF,$01,$A9,$04,$52,$01,$25,$01
 $F150 DEFB $04,$01,$15,$1D,$34,$05,$14,$11
 $F158 DEFB $10,$05,$02,$03,$2A,$01,$11,$04
 $F160 DEFB $01,$0A,$04,$01,$01,$02,$03,$0E
 $F168 DEFB $0B,$01,$01,$15,$1F,$09,$12,$04
 $F170 DEFB $02,$04,$01,$3F,$05,$02,$02,$04
 $F178 DEFB $13,$2C,$01,$01,$04,$09,$0A,$09
 $F180 DEFB $0E,$06,$11,$08,$02,$74,$0F,$24
 $F188 DEFB $0D,$07,$02,$03,$2C,$02,$0A,$04
 $F190 DEFB $04,$5A,$0C,$05,$18,$01,$07,$16
 $F198 DEFB $03,$0C,$02,$12,$25,$01,$03,$04
 $F1A0 DEFB $03,$4C,$01,$1B,$01,$02,$09,$01
 $F1A8 DEFB $1A,$01,$09,$1D,$03,$01,$02,$0F
 $F1B0 DEFB $30,$0A,$02,$0A,$08,$07,$02,$07
 $F1B8 DEFB $01,$3C,$05,$03,$21,$01,$FF,$01
 $F1C0 DEFB $AB,$04,$50,$01,$19,$03,$02,$02
 $F1C8 DEFB $04,$02,$04,$03,$02,$04,$0F,$1C
 $F1D0 DEFB $33,$04,$13,$12,$13,$01,$31,$01
 $F1D8 DEFB $19,$07,$05,$03,$03,$10,$08,$18
 $F1E0 DEFB $1D,$0D,$0E,$02,$01,$04,$02,$04
 $F1E8 DEFB $03,$4B,$11,$2B,$01,$04,$02,$02
 $F1F0 DEFB $02,$05,$0B,$08,$0E,$04,$12,$07
 $F1F8 DEFB $03,$76,$0E,$01,$02,$22,$0B,$0D
 $F200 DEFB $2C,$02,$0A,$03,$03,$02,$01,$58
 $F208 DEFB $0D,$05,$18,$01,$08,$15,$01,$01
 $F210 DEFB $01,$0D,$01,$10,$2A,$04,$02,$6A
 $F218 DEFB $02,$01,$24,$01,$09,$1C,$03,$01
 $F220 DEFB $02,$0B,$02,$02,$31,$06,$02,$03
 $F228 DEFB $02,$09,$0A,$05,$03,$43,$04,$04
 $F230 DEFB $21,$01,$FF,$01,$AD,$02,$01,$03
 $F238 DEFB $4C,$01,$19,$07,$04,$02,$04,$09
 $F240 DEFB $10,$1A,$34,$02,$14,$14,$08,$01
 $F248 DEFB $3B,$01,$0E,$01,$07,$05,$03,$04
 $F250 DEFB $04,$02,$0B,$08,$09,$01,$01,$13
 $F258 DEFB $1E,$10,$04,$01,$03,$11,$01,$01
 $F260 DEFB $01,$4E,$0E,$29,$03,$02,$01,$01
 $F268 DEFB $07,$03,$01,$01,$0A,$07,$24,$08
 $F270 DEFB $02,$6B,$01,$0B,$0E,$01,$02,$22
 $F278 DEFB $0B,$0D,$2C,$03,$06,$02,$01,$03
 $F280 DEFB $03,$5A,$0E,$05,$18,$01,$08,$17
 $F288 DEFB $01,$1D,$01,$02,$27,$01,$05,$6B
 $F290 DEFB $02,$02,$23,$01,$09,$1C,$02,$02
 $F298 DEFB $02,$02,$01,$06,$03,$01,$2D,$09
 $F2A0 DEFB $05,$04,$02,$07,$0C,$04,$04,$3E
 $F2A8 DEFB $0A,$01,$22,$01,$FF,$01,$B0,$03
 $F2B0 DEFB $4C,$01,$1B,$03,$25,$1A,$33,$02
 $F2B8 DEFB $0A,$01,$07,$1C,$02,$05,$38,$04
 $F2C0 DEFB $07,$09,$09,$02,$01,$02,$02,$02
 $F2C8 DEFB $01,$03,$04,$03,$03,$07,$0A,$13
 $F2D0 DEFB $1F,$12,$03,$01,$02,$12,$01,$51
 $F2D8 DEFB $0D,$29,$03,$01,$0A,$04,$01,$01
 $F2E0 DEFB $09,$07,$23,$09,$02,$0A,$02,$5F
 $F2E8 DEFB $01,$09,$10,$01,$03,$01,$01,$22
 $F2F0 DEFB $08,$0D,$2C,$02,$07,$02,$08,$43
 $F2F8 DEFB $01,$14,$0F,$05,$18,$01,$08,$2F
 $F300 DEFB $07,$04,$29,$6D,$02,$02,$23,$01
 $F308 DEFB $08,$1D,$02,$02,$01,$01,$02,$06
 $F310 DEFB $32,$09,$06,$04,$02,$07,$03,$03
 $F318 DEFB $05,$05,$05,$3C,$08,$01,$24,$01
 $F320 DEFB $FF,$01,$FF,$01,$27,$04,$07,$02
 $F328 DEFB $10,$16,$36,$02,$09,$04,$05,$23
 $F330 DEFB $09,$02,$2D,$08,$02,$0E,$02,$05
 $F338 DEFB $07,$06,$01,$03,$07,$05,$09,$0F
 $F340 DEFB $22,$13,$05,$12,$01,$56,$09,$28
 $F348 DEFB $06,$01,$03,$03,$05,$01,$0C,$05
 $F350 DEFB $24,$09,$02,$07,$02,$5D,$03,$01
 $F358 DEFB $01,$07,$13,$01,$05,$23,$07,$0E
 $F360 DEFB $29,$02,$01,$02,$06,$01,$08,$44
 $F368 DEFB $01,$14,$0F,$05,$18,$01,$0A,$2C
 $F370 DEFB $01,$02,$05,$04,$27,$6F,$02,$01
 $F378 DEFB $24,$01,$08,$1D,$02,$0C,$32,$08
 $F380 DEFB $09,$04,$01,$17,$03,$35,$01,$07
 $F388 DEFB $08,$02,$23,$01,$08,$28,$03,$01
 $F390 DEFB $31,$07,$0C,$01,$02,$03,$02,$12
 $F398 DEFB $03,$34,$02,$02,$01,$03,$09,$02
 $F3A0 DEFB $23,$01,$0B,$20,$3A,$12,$04,$05
 $F3A8 DEFB $07,$46,$07,$01,$2A,$01,$0F,$02
 $F3B0 DEFB $01,$0A,$0D,$01,$36,$27,$02,$0B
 $F3B8 DEFB $03,$02,$09,$29,$02,$01,$31,$01
 $F3C0 DEFB $18,$0B,$09,$01,$08,$01,$29,$2C
 $F3C8 DEFB $02,$09,$10,$07,$0A,$02,$02,$08
 $F3D0 DEFB $0A,$02,$30,$01,$26,$02,$01,$02
 $F3D8 DEFB $02,$0D,$29,$31,$18,$02,$0E,$01
 $F3E0 DEFB $14,$02,$2C,$01,$2A,$19,$2F,$13
 $F3E8 DEFB $01,$08,$2F,$03,$05,$06,$02,$04
 $F3F0 DEFB $06,$02,$26,$01,$2A,$26,$26,$15
 $F3F8 DEFB $46,$01,$0C,$03,$02,$03,$19,$01
 $F400 DEFB $2F,$1E,$27,$16,$04,$05,$3C,$0E
 $F408 DEFB $02,$03,$1D,$01,$08,$28,$35,$07
 $F410 DEFB $0C,$01,$02,$04,$01,$11,$05,$33
 $F418 DEFB $05,$04,$08,$02,$23,$01,$0C,$1E
 $F420 DEFB $3B,$13,$03,$09,$02,$47,$32,$01
 $F428 DEFB $10,$01,$02,$09,$44,$27,$02,$12
 $F430 DEFB $08,$27,$03,$01,$31,$01,$19,$0A
 $F438 DEFB $3C,$2C,$03,$06,$13,$05,$0F,$09
 $F440 DEFB $09,$02,$30,$01,$27,$03,$01,$10
 $F448 DEFB $29,$30,$18,$03,$0D,$02,$0D,$01
 $F450 DEFB $05,$02,$2C,$01,$2A,$1A,$2E,$13
 $F458 DEFB $01,$07,$30,$04,$04,$06,$02,$02
 $F460 DEFB $08,$02,$03,$02,$21,$01,$2B,$24
 $F468 DEFB $27,$15,$45,$01,$13,$03,$18,$01
 $F470 DEFB $31,$1B,$28,$14,$06,$04,$3C,$15
 $F478 DEFB $19,$01,$02,$01,$08,$27,$36,$07
 $F480 DEFB $0B,$01,$04,$03,$01,$11,$05,$36
 $F488 DEFB $04,$02,$08,$02,$23,$01,$0C,$1E
 $F490 DEFB $3B,$68,$32,$01,$11,$01,$01,$09
 $F498 DEFB $43,$29,$02,$11,$08,$11,$02,$12
 $F4A0 DEFB $37,$01,$1B,$02,$01,$08,$13,$01
 $F4A8 DEFB $25,$2E,$01,$04,$15,$05,$0F,$09
 $F4B0 DEFB $3B,$01,$2B,$11,$29,$09,$01,$24
 $F4B8 DEFB $1A,$01,$0F,$02,$0B,$03,$04,$01
 $F4C0 DEFB $2D,$01,$29,$1F,$2B,$19,$32,$03
 $F4C8 DEFB $05,$04,$02,$03,$09,$01,$02,$05
 $F4D0 DEFB $1F,$01,$2B,$24,$27,$10,$01,$05
 $F4D8 DEFB $53,$01,$1F,$01,$32,$1A,$29,$13
 $F4E0 DEFB $06,$04,$3C,$16,$1B,$01,$09,$26
 $F4E8 DEFB $37,$05,$06,$02,$09,$01,$04,$12
 $F4F0 DEFB $03,$36,$04,$03,$06,$03,$23,$01
 $F4F8 DEFB $0D,$01,$01,$1B,$3A,$2D,$02,$3A
 $F500 DEFB $32,$01,$14,$08,$0B,$04,$34,$2A
 $F508 DEFB $01,$11,$08,$0F,$04,$0B,$03,$01
 $F510 DEFB $3A,$01,$1F,$08,$38,$2E,$01,$02
 $F518 DEFB $18,$04,$10,$01,$01,$06,$0A,$01
 $F520 DEFB $01,$01,$2E,$01,$2C,$12,$28,$02
 $F528 DEFB $02,$03,$03,$22,$27,$02,$02,$03
 $F530 DEFB $09,$03,$33,$01,$29,$22,$29,$17
 $F538 DEFB $33,$04,$07,$02,$01,$04,$08,$0A
 $F540 DEFB $1D,$01,$2C,$22,$28,$10,$01,$05
 $F548 DEFB $4A,$03,$06,$01,$1F,$01,$32,$1A
 $F550 DEFB $29,$12,$07,$04,$3A,$19,$01,$01
 $F558 DEFB $18,$01,$09,$25,$3E,$07,$14,$44
 $F560 DEFB $05,$03,$05,$04,$23,$01,$0D,$02
 $F568 DEFB $01,$13,$04,$03,$39,$22,$01,$0B
 $F570 DEFB $03,$39,$32,$01,$15,$07,$07,$01
 $F578 DEFB $06,$02,$33,$2A,$02,$0F,$0C,$0B
 $F580 DEFB $06,$0A,$3E,$01,$22,$05,$38,$2F
 $F588 DEFB $1A,$04,$10,$01,$02,$05,$0D,$01
 $F590 DEFB $2D,$01,$2C,$15,$32,$1F,$28,$02
 $F598 DEFB $02,$02,$09,$03,$33,$01,$2A,$23
 $F5A0 DEFB $27,$16,$35,$03,$0B,$01,$0D,$08
 $F5A8 DEFB $1C,$01,$2C,$21,$29,$10,$01,$05
 $F5B0 DEFB $05,$02,$42,$06,$04,$02,$1E,$01
 $F5B8 DEFB $32,$1A,$29,$12,$07,$04,$37,$1C
 $F5C0 DEFB $02,$01,$0B,$01,$0B,$01,$09,$25
 $F5C8 DEFB $39,$02,$02,$09,$13,$44,$05,$02
 $F5D0 DEFB $03,$06,$24,$01,$0E,$01,$01,$0D
 $F5D8 DEFB $05,$01,$05,$02,$38,$23,$02,$0C
 $F5E0 DEFB $02,$37,$33,$01,$15,$07,$05,$03
 $F5E8 DEFB $07,$04,$30,$2A,$03,$0E,$0C,$0A
 $F5F0 DEFB $07,$0A,$03,$01,$3A,$01,$24,$03
 $F5F8 DEFB $39,$2E,$02,$04,$15,$03,$10,$01
 $F600 DEFB $03,$04,$0B,$01,$01,$01,$2D,$01
 $F608 DEFB $2C,$16,$31,$1E,$2A,$02,$01,$02
 $F610 DEFB $07,$05,$33,$01,$29,$25,$27,$15
 $F618 DEFB $35,$02,$1B,$08,$1B,$01,$2D,$20
 $F620 DEFB $28,$17,$05,$02,$3F,$01,$02,$06
 $F628 DEFB $04,$02,$1E,$01,$33,$19,$2A,$11
 $F630 DEFB $06,$04,$36,$1E,$1A,$01,$0A,$24
 $F638 DEFB $39,$0C,$14,$45,$33,$01,$0E,$01
 $F640 DEFB $02,$0B,$0C,$02,$37,$25,$02,$0C
 $F648 DEFB $05,$33,$33,$01,$15,$08,$04,$03
 $F650 DEFB $08,$02,$02,$03,$2C,$2A,$03,$0D
 $F658 DEFB $0D,$09,$08,$0A,$0D,$02,$2F,$01
 $F660 DEFB $24,$03,$09,$03,$2E,$33,$15,$02
 $F668 DEFB $11,$01,$03,$02,$3D,$01,$2B,$18
 $F670 DEFB $30,$1D,$2C,$02,$07,$08,$04,$01
 $F678 DEFB $2D,$01,$29,$27,$25,$15,$38,$05
 $F680 DEFB $16,$08,$06,$02,$12,$01,$2D,$20
 $F688 DEFB $28,$17,$05,$02,$3E,$09,$05,$03
 $F690 DEFB $1D,$01,$33,$18,$2B,$11,$06,$04
 $F698 DEFB $36,$1F,$19,$01,$0A,$23,$3A,$0D
 $F6A0 DEFB $13,$45,$08,$01,$2A,$01,$0D,$03
 $F6A8 DEFB $02,$0A,$0C,$02,$36,$26,$02,$0C
 $F6B0 DEFB $03,$01,$06,$02,$01,$2B,$01,$01
 $F6B8 DEFB $31,$01,$17,$06,$03,$04,$0B,$05
 $F6C0 DEFB $2B,$2B,$03,$0B,$0E,$08,$09,$0B
 $F6C8 DEFB $0C,$02,$2F,$01,$24,$04,$05,$0B
 $F6D0 DEFB $2A,$32,$15,$02,$01,$01,$0F,$01
 $F6D8 DEFB $15,$01,$2C,$01,$2B,$18,$2F,$1D
 $F6E0 DEFB $2D,$04,$05,$07,$01,$04,$03,$01
 $F6E8 DEFB $2A,$01,$2A,$26,$25,$16,$38,$05
 $F6F0 DEFB $02,$01,$12,$04,$02,$03,$19,$01
 $F6F8 DEFB $2E,$1F,$27,$17,$04,$04,$3C,$0D
 $F700 DEFB $03,$03,$1B,$01,$01,$01,$33,$15
 $F708 DEFB $2E,$11,$06,$04,$36,$1F,$19,$01
 $F710 DEFB $33,$13,$31,$10,$07,$03,$35,$21
 $F718 DEFB $18,$01,$32,$11,$36,$08,$46,$08
 $F720 DEFB $08,$0E,$1A,$01,$32,$09,$B8,$02
 $F728 DEFB $01,$01,$08,$01,$31,$07,$C7,$01
 $F730 DEFB $34,$05,$C6,$01,$FF,$01,$FF,$01
 $F738 DEFB $FF,$01,$33,$12,$32,$0E,$41,$22
 $F740 DEFB $17,$01,$32,$10,$37,$07,$47,$04
 $F748 DEFB $01,$02,$09,$0E,$1A,$01,$32,$09
 $F750 DEFB $B7,$03,$0A,$01,$32,$07,$C6,$01
 $F758 DEFB $37,$04,$C4,$01,$FF,$01,$FF,$01
 $F760 DEFB $FF,$01,$33,$12,$32,$0E,$42,$21
 $F768 DEFB $17,$01,$32,$10,$38,$01,$4C,$03
 $F770 DEFB $10,$0A,$12,$01,$08,$01,$32,$07
 $F778 DEFB $B8,$03,$0B,$01,$32,$06,$C7,$01
 $F780 DEFB $38,$02,$C5,$01,$FF,$01,$FF,$01
 $F788 DEFB $FF,$01,$33,$12,$32,$0E,$42,$21
 $F790 DEFB $17,$01,$33,$0B,$02,$01,$99,$09
 $F798 DEFB $13,$01,$08,$01,$32,$08,$B6,$03
 $F7A0 DEFB $0C,$01,$32,$06,$C7,$01,$FF,$01
 $F7A8 DEFB $FF,$01,$FF,$01,$FF,$01,$33,$12
 $F7B0 DEFB $33,$0C,$44,$1F,$18,$01,$33,$0C
 $F7B8 DEFB $9B,$09,$13,$02,$07,$01,$32,$08
 $F7C0 DEFB $B5,$03,$0D,$01,$32,$05,$C8,$01
 $F7C8 DEFB $FF,$01,$FF,$01,$FF,$01,$FF,$01
 $F7D0 DEFB $33,$11,$34,$0B,$45,$1F,$18,$01
 $F7D8 DEFB $32,$0D,$9C,$07,$14,$03,$06,$01
 $F7E0 DEFB $33,$06,$B5,$03,$0E,$01,$33,$04
 $F7E8 DEFB $07,$01,$01,$01,$BE,$01,$FF,$01
 $F7F0 DEFB $FF,$01,$FF,$01,$FF,$01,$32,$12
 $F7F8 DEFB $34,$0B,$45,$1F,$18,$01,$32,$0D
 $F800 DEFB $9F,$03,$15,$02,$07,$01,$33,$06
 $F808 DEFB $B4,$04,$0E,$01,$33,$04,$C8,$01
 $F810 DEFB $FF,$01,$FF,$01,$FF,$01,$FF,$01
 $F818 DEFB $32,$11,$36,$09,$46,$09,$04,$11
 $F820 DEFB $19,$01,$32,$0C,$B7,$02,$08,$01
 $F828 DEFB $32,$06,$B7,$01,$0F,$01,$33,$05
 $F830 DEFB $C7,$01,$FF,$01,$FF,$01,$FF,$01
 $F838 DEFB $FF,$01,$38,$02,$C5,$01,$38,$02

; Font UDGs
@label=Font
b$F840 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F848 DEFB $18,$18,$18,$18,$18,$00,$18,$00 ; #UDG(#PC,attr=56)
 $F850 DEFB $33,$66,$66,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F858 DEFB $00,$36,$7F,$36,$36,$7F,$36,$00 ; #UDG(#PC,attr=56)
 $F860 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F868 DEFB $00,$66,$6C,$18,$30,$66,$46,$00 ; #UDG(#PC,attr=56)
 $F870 DEFB $38,$68,$6A,$72,$EC,$C6,$FE,$7A ; #UDG(#PC,attr=56)
 $F878 DEFB $18,$0C,$0C,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F880 DEFB $0C,$18,$18,$18,$18,$18,$18,$0C ; #UDG(#PC,attr=56)
 $F888 DEFB $30,$0C,$0C,$0C,$0C,$0C,$0C,$10 ; #UDG(#PC,attr=56)
 $F890 DEFB $00,$04,$06,$FF,$FF,$06,$04,$00 ; #UDG(#PC,attr=56)
 $F898 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F8A0 DEFB $00,$00,$00,$00,$00,$18,$18,$30 ; #UDG(#PC,attr=56)
 $F8A8 DEFB $00,$00,$00,$7E,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F8B0 DEFB $00,$00,$00,$00,$00,$18,$18,$00 ; #UDG(#PC,attr=56)
 $F8B8 DEFB $03,$06,$0C,$18,$30,$60,$C0,$00 ; #UDG(#PC,attr=56)
 $F8C0 DEFB $00,$3C,$66,$6E,$76,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F8C8 DEFB $00,$18,$38,$18,$18,$18,$3C,$00 ; #UDG(#PC,attr=56)
 $F8D0 DEFB $00,$3C,$66,$0C,$30,$62,$7E,$00 ; #UDG(#PC,attr=56)
 $F8D8 DEFB $00,$7E,$4C,$18,$0C,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F8E0 DEFB $00,$0C,$1C,$3C,$6C,$7E,$0C,$00 ; #UDG(#PC,attr=56)
 $F8E8 DEFB $00,$7E,$62,$7C,$06,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F8F0 DEFB $00,$3C,$60,$7C,$66,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F8F8 DEFB $00,$7E,$46,$0C,$18,$30,$30,$00 ; #UDG(#PC,attr=56)
 $F900 DEFB $00,$3C,$66,$3C,$66,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F908 DEFB $00,$3C,$66,$3E,$06,$0C,$38,$00 ; #UDG(#PC,attr=56)
 $F910 DEFB $00,$18,$18,$00,$00,$18,$18,$00 ; #UDG(#PC,attr=56)
 $F918 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F920 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F928 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F930 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $F938 DEFB $00,$3C,$66,$0C,$18,$00,$18,$00 ; #UDG(#PC,attr=56)
 $F940 DEFB $00,$3C,$46,$36,$76,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F948 DEFB $00,$18,$3C,$66,$66,$7E,$66,$00 ; #UDG(#PC,attr=56)
 $F950 DEFB $00,$7C,$36,$3C,$36,$36,$7C,$00 ; #UDG(#PC,attr=56)
 $F958 DEFB $00,$3E,$66,$60,$60,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F960 DEFB $00,$FC,$66,$66,$66,$66,$FC,$00 ; #UDG(#PC,attr=56)
 $F968 DEFB $00,$FE,$62,$78,$60,$62,$FE,$00 ; #UDG(#PC,attr=56)
 $F970 DEFB $00,$FE,$62,$78,$60,$60,$F0,$00 ; #UDG(#PC,attr=56)
 $F978 DEFB $00,$7C,$C4,$C0,$DE,$CC,$7C,$00 ; #UDG(#PC,attr=56)
 $F980 DEFB $00,$66,$66,$7E,$66,$66,$66,$00 ; #UDG(#PC,attr=56)
 $F988 DEFB $00,$7E,$5A,$18,$18,$5A,$7E,$00 ; #UDG(#PC,attr=56)
 $F990 DEFB $00,$1E,$0C,$0C,$0C,$CC,$78,$00 ; #UDG(#PC,attr=56)
 $F998 DEFB $00,$F6,$6C,$78,$78,$6C,$F6,$03 ; #UDG(#PC,attr=56)
 $F9A0 DEFB $00,$F0,$60,$60,$60,$62,$FE,$00 ; #UDG(#PC,attr=56)
 $F9A8 DEFB $00,$C6,$EE,$FE,$D6,$C6,$C6,$00 ; #UDG(#PC,attr=56)
 $F9B0 DEFB $00,$E7,$76,$7E,$6E,$66,$E7,$00 ; #UDG(#PC,attr=56)
 $F9B8 DEFB $00,$3C,$66,$66,$66,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F9C0 DEFB $00,$FC,$66,$66,$7C,$60,$F0,$00 ; #UDG(#PC,attr=56)
 $F9C8 DEFB $00,$3C,$66,$66,$66,$68,$36,$00 ; #UDG(#PC,attr=56)
 $F9D0 DEFB $00,$FC,$66,$66,$7C,$6C,$F6,$03 ; #UDG(#PC,attr=56)
 $F9D8 DEFB $00,$3E,$60,$3C,$06,$06,$7C,$00 ; #UDG(#PC,attr=56)
 $F9E0 DEFB $00,$7E,$5A,$18,$18,$18,$3C,$00 ; #UDG(#PC,attr=56)
 $F9E8 DEFB $00,$66,$66,$66,$66,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $F9F0 DEFB $00,$66,$66,$66,$3C,$3C,$18,$00 ; #UDG(#PC,attr=56)
 $F9F8 DEFB $00,$C6,$C6,$D6,$FE,$EE,$C6,$00 ; #UDG(#PC,attr=56)
 $FA00 DEFB $00,$E7,$66,$3C,$3C,$66,$E7,$00 ; #UDG(#PC,attr=56)
 $FA08 DEFB $00,$C3,$62,$34,$18,$18,$3C,$00 ; #UDG(#PC,attr=56)
 $FA10 DEFB $00,$FE,$8C,$18,$30,$62,$FE,$00 ; #UDG(#PC,attr=56)
 $FA18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $FA20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $FA28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $FA30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $FA38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=56)
 $FA40 DEFB $3C,$62,$60,$F8,$60,$62,$FC,$00 ; #UDG(#PC,attr=56)
 $FA48 DEFB $00,$00,$78,$CC,$CC,$CC,$76,$00 ; #UDG(#PC,attr=56)
 $FA50 DEFB $E0,$60,$7C,$66,$66,$66,$FC,$00 ; #UDG(#PC,attr=56)
 $FA58 DEFB $00,$00,$3E,$66,$60,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $FA60 DEFB $0E,$0C,$7C,$CC,$CC,$CC,$76,$00 ; #UDG(#PC,attr=56)
 $FA68 DEFB $00,$00,$3C,$66,$7E,$60,$3E,$00 ; #UDG(#PC,attr=56)
 $FA70 DEFB $0E,$18,$18,$18,$3E,$18,$18,$18 ; #UDG(#PC,attr=56)
 $FA78 DEFB $00,$06,$3C,$66,$66,$3E,$60,$7E ; #UDG(#PC,attr=56)
 $FA80 DEFB $E0,$60,$7C,$66,$66,$66,$F7,$00 ; #UDG(#PC,attr=56)
 $FA88 DEFB $18,$00,$38,$18,$18,$18,$3C,$00 ; #UDG(#PC,attr=56)
 $FA90 DEFB $06,$00,$0E,$06,$06,$06,$66,$3C ; #UDG(#PC,attr=56)
 $FA98 DEFB $E0,$60,$6C,$78,$78,$6C,$F6,$03 ; #UDG(#PC,attr=56)
 $FAA0 DEFB $38,$18,$18,$18,$18,$18,$3C,$00 ; #UDG(#PC,attr=56)
 $FAA8 DEFB $00,$00,$FE,$DB,$DB,$DB,$DB,$00 ; #UDG(#PC,attr=56)
 $FAB0 DEFB $00,$00,$DC,$66,$66,$66,$F7,$00 ; #UDG(#PC,attr=56)
 $FAB8 DEFB $00,$00,$3C,$66,$66,$66,$3C,$00 ; #UDG(#PC,attr=56)
 $FAC0 DEFB $00,$00,$FC,$66,$66,$7C,$60,$F0 ; #UDG(#PC,attr=56)
 $FAC8 DEFB $00,$00,$7E,$CC,$CC,$7C,$0C,$0E ; #UDG(#PC,attr=56)
 $FAD0 DEFB $00,$00,$6E,$33,$30,$30,$78,$00 ; #UDG(#PC,attr=56)
 $FAD8 DEFB $00,$00,$3E,$60,$3C,$06,$7C,$00 ; #UDG(#PC,attr=56)
 $FAE0 DEFB $18,$18,$7E,$18,$18,$18,$0E,$00 ; #UDG(#PC,attr=56)
 $FAE8 DEFB $00,$00,$EE,$66,$66,$66,$3B,$00 ; #UDG(#PC,attr=56)
 $FAF0 DEFB $00,$00,$E7,$62,$74,$38,$10,$00 ; #UDG(#PC,attr=56)
 $FAF8 DEFB $00,$00,$C6,$D6,$D6,$7C,$6C,$00 ; #UDG(#PC,attr=56)
 $FB00 DEFB $00,$00,$66,$3C,$18,$3C,$66,$00 ; #UDG(#PC,attr=56)
 $FB08 DEFB $00,$00,$66,$66,$66,$3E,$06,$7C ; #UDG(#PC,attr=56)
 $FB10 DEFB $00,$00,$7E,$4C,$18,$32,$7E,$00 ; #UDG(#PC,attr=56)
 $FB18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF18 DEFB $F3,$0D,$CE,$0B,$E2,$50,$CE,$0B
 $FF20 DEFB $E3,$50,$1E,$17,$DC,$0A,$CE,$0B
 $FF28 DEFB $06,$03,$07,$5C,$4D,$00,$00,$00
 $FF30 DEFB $21,$B0,$AA,$00,$6A,$FF,$50,$15
 $FF38 DEFB $0E,$01,$8A,$18,$09,$18,$8F,$17
 $FF40 DEFB $DB,$02,$4D,$00
 $FF44 DEFB $00,$08,$00,$2E,$00,$77,$08,$00
 $FF4C DEFB $66,$81,$06,$80,$7F,$10,$54,$FF
 $FF54 DEFB $B4,$12,$00,$3E,$00,$3C,$42,$42
 $FF5C DEFB $7E,$42,$42,$00,$00,$7C,$42,$7C
 $FF64 DEFB $42,$42,$7C,$00,$00,$3C,$42,$40
 $FF6C DEFB $40,$42,$3C,$00,$00,$78,$44,$42
 $FF74 DEFB $42,$44,$78,$00,$00,$7E,$40,$7C
 $FF7C DEFB $40,$40,$7E,$00,$00,$7E,$40,$7C
 $FF84 DEFB $40,$40,$40,$00,$00,$3C,$42,$40
 $FF8C DEFB $4E,$42,$3C,$00,$00,$42,$42,$7E
 $FF94 DEFB $42,$42,$42,$00,$00,$3E,$08,$08
 $FF9C DEFB $08,$08,$3E,$00,$00,$02,$02,$02
 $FFA4 DEFB $42,$42,$3C,$00,$00,$44,$48,$70
 $FFAC DEFB $48,$44,$42,$00,$00,$40,$40,$40
 $FFB4 DEFB $40,$40,$7E,$00,$00,$42,$66,$5A
 $FFBC DEFB $42,$42,$42,$00,$00,$42,$62,$52
 $FFC4 DEFB $4A,$46,$42

; Routine at FFC7
c$FFC7 NOP           ;
 $FFC8 NOP           ;
 $FFC9 INC A         ;
 $FFCA LD B,D        ;
 $FFCB LD B,D        ;
 $FFCC LD B,D        ;
 $FFCD LD B,D        ;
 $FFCE INC A         ;
 $FFCF NOP           ;
 $FFD0 NOP           ;
 $FFD1 LD A,H        ;
 $FFD2 LD B,D        ;
 $FFD3 LD B,D        ;
 $FFD4 LD A,H        ;
 $FFD5 LD B,B        ;
 $FFD6 LD B,B        ;
 $FFD7 NOP           ;
 $FFD8 NOP           ;
 $FFD9 INC A         ;
 $FFDA LD B,D        ;
 $FFDB LD B,D        ;
 $FFDC LD D,D        ;
 $FFDD LD C,D        ;
 $FFDE INC A         ;
 $FFDF NOP           ;
 $FFE0 NOP           ;
 $FFE1 LD A,H        ;
 $FFE2 LD B,D        ;
 $FFE3 LD B,D        ;
 $FFE4 LD A,H        ;
 $FFE5 LD B,H        ;
 $FFE6 LD B,D        ;
 $FFE7 NOP           ;
 $FFE8 NOP           ;
 $FFE9 INC A         ;
 $FFEA LD B,B        ;
 $FFEB INC A         ;
 $FFEC LD (BC),A     ;
 $FFED LD B,D        ;
 $FFEE INC A         ;
 $FFEF NOP           ;
 $FFF0 NOP           ;
 $FFF1 CP $10        ;
 $FFF3 DEFB $10,$10  ;
 $FFF5 DEFB $10,$10  ;
 $FFF7 NOP           ;
 $FFF8 NOP           ;
 $FFF9 LD B,D        ;
 $FFFA LD B,D        ;
 $FFFB LD B,D        ;
 $FFFC LD B,D        ;
 $FFFD LD B,D        ;
 $FFFE INC A         ;
 $FFFF NOP           ;
